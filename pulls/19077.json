{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
    "id": 423571491,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDIzNTcxNDkx",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19077",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/19077.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/19077.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/c4a29d0a90b821c443c10891d9326c534d15cf97",
    "number": 19077,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "wallet: Add sqlite as an alternative wallet database and use it for new descriptor wallets",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR adds a new class `SQLiteDatabase` which is a subclass of `WalletDatabase`. This provides access to a SQLite database that is used to store the wallet records. To keep compatibility with BDB and to complexity of the change down, we don't make use of many SQLite's features. We use it strictly as a key-value store. We create a table `main` which has two columns, `key` and `value` both with the type `blob`.\r\n\r\nFor new descriptor wallets, we will create a `SQLiteDatabase` instead of a `BerkeleyDatabase`. There is no requirement that all SQLite wallets are descriptor wallets, nor is there a requirement that all descriptor wallets be SQLite wallets. This allows for existing descriptor wallets to work as well as keeping open the option to migrate existing wallets to SQLite.\r\n\r\nWe keep the name `wallet.dat` for SQLite wallets. We are able to determine which database type to use by searching for specific magic bytes in the `wallet.dat` file. SQLite begins it's files with a null terminated string `SQLite format 3`. BDB has `0x00053162` at byte 12 (note that the byte order of this integer depends on the system endianness). So when we see that there is a `wallet.dat` file that we want to open, we check for the magic bytes to determine which database system to use.\r\n\r\nI decided to keep the `wallet.dat` naming to keep things like backup script to continue to function as they won't need to be modified to look for a different file name. It also simplifies a couple of things in the implementation and the tests as `wallet.dat` is something that is specifically being looked for. If we don't want this behavior, then I do have another branch which creates `wallet.sqlite` files instead, but I find that this direction is easier.",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45",
      "html_url": "https://github.com/bitcoin/bitcoin/milestone/45",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45/labels",
      "id": 4914019,
      "node_id": "MDk6TWlsZXN0b25lNDkxNDAxOQ==",
      "number": 45,
      "state": "closed",
      "title": "0.21.0",
      "description": "",
      "creator": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 0,
      "closed_issues": 132,
      "created_at": "2019-12-09T08:39:58Z",
      "updated_at": "2021-01-15T19:50:53Z",
      "closed_at": "2021-01-15T19:50:53Z"
    },
    "created_at": "2020-05-27T02:42:07Z",
    "updated_at": "2022-10-30T19:10:25Z",
    "closed_at": "2020-10-15T07:13:59Z",
    "mergeable_state": "unknown",
    "merged_at": "2020-10-15T07:13:59Z",
    "merge_commit_sha": "8ed37f6c8497c8ec9e919dab35f63201e5f75f11",
    "assignee": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "achow101:sqlite-wallet",
      "ref": "sqlite-wallet",
      "sha": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 45006379,
        "node_id": "MDEwOlJlcG9zaXRvcnk0NTAwNjM3OQ==",
        "name": "bitcoin",
        "full_name": "achow101/bitcoin",
        "owner": {
          "login": "achow101",
          "id": 3782274,
          "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/achow101",
          "html_url": "https://github.com/achow101",
          "followers_url": "https://api.github.com/users/achow101/followers",
          "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
          "organizations_url": "https://api.github.com/users/achow101/orgs",
          "repos_url": "https://api.github.com/users/achow101/repos",
          "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/achow101/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/achow101/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/achow101/bitcoin",
        "archive_url": "https://api.github.com/repos/achow101/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/achow101/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/achow101/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/achow101/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/achow101/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/achow101/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/achow101/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/achow101/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/achow101/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/achow101/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/achow101/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/achow101/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/achow101/bitcoin/events",
        "forks_url": "https://api.github.com/repos/achow101/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/achow101/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/achow101/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/achow101/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/achow101/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/achow101/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/achow101/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/achow101/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/achow101/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/achow101/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/achow101/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/achow101/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/achow101/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/achow101/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/achow101/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/achow101/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:achow101/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/achow101/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/achow101/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/achow101/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/achow101/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/achow101/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/achow101/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/achow101/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/achow101/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/achow101/bitcoin/hooks",
        "svn_url": "https://github.com/achow101/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 9,
        "stargazers_count": 35,
        "watchers_count": 35,
        "size": 243676,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-02T20:20:33Z",
        "created_at": "2015-10-27T00:20:28Z",
        "updated_at": "2023-07-28T14:25:30Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "99a1d572eabca89790216b3919a237e07063a376",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35476,
        "stargazers_count": 70608,
        "watchers_count": 70608,
        "size": 236222,
        "default_branch": "master",
        "open_issues_count": 672,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-02T20:20:41Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-08-02T18:21:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 934,
    "deletions": 80,
    "changed_files": 34,
    "commits": 26,
    "review_comments": 344,
    "comments": 61
  },
  "events": [
    {
      "event": "labeled",
      "id": 3376153481,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMzNzYxNTM0ODE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3376153481",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T02:42:58Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3376212091,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM3NjIxMjA5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3376212091",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T03:16:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3376215386,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM3NjIxNTM4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3376215386",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T03:18:37Z"
    },
    {
      "event": "commented",
      "id": 634403350,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDQwMzM1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634403350",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T03:19:02Z",
      "updated_at": "2020-05-27T03:19:02Z",
      "author_association": "MEMBER",
      "body": "I've dropped the amalgamation file",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-634403350",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3376218330,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM3NjIxODMzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3376218330",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T03:20:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3376272707,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM3NjI3MjcwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3376272707",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T03:51:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3376414309,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM3NjQxNDMwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3376414309",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T05:11:37Z"
    },
    {
      "event": "commented",
      "id": 634758099,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDc1ODA5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634758099",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T15:54:20Z",
      "updated_at": "2020-05-27T15:55:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "Pretty amazing work! Thanks for doing this.\r\nFor testing purposes, would it make sense to add logdb (#5686, simple implementation) in order to test and benchmark?\r\n\r\nConcept ACK on a BDB replacement for descriptor wallets.\r\nStill unsure wether sqlite or an internal format should be chosen. Maybe a comparison(-matrix) of internal vs. sqlite could be done?\r\n\r\nAs for concrete implementation steps, maybe it would make sense to PR the DB flexibility first, then additional storage engines later.",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-634758099",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3378961139,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM3ODk2MTEzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3378961139",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T16:17:51Z"
    },
    {
      "event": "commented",
      "id": 634780861,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDc4MDg2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634780861",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T16:25:46Z",
      "updated_at": "2020-05-27T16:25:46Z",
      "author_association": "MEMBER",
      "body": "> For testing purposes, would it make sense to add logdb (#5686, simple implementation) in order to test and benchmark?\r\n\r\nI don't think it really makes sense to add a database system that we aren't going to use.\r\n\r\n> Still unsure wether sqlite or an internal format should be chosen. Maybe a comparison(-matrix) of internal vs. sqlite could be done?\r\n\r\nI think there's two primary reasons to choose sqlite over an internal format.\r\n\r\n1. Review and implementation are much simpler The library already exists so implementation just means correctly using the API. Reviewers won't have to review a file format implementation and convince themselves that that format won't corrupt and is robust.\r\n\r\n2. Better guarantees of consistency and non-corruption. SQLite is very well tested and very widely used. I think they are able better guarantee that data will get written, won't get lost, and won't get corrupted, than we would be able to with an internal format.\r\n\r\n> As for concrete implementation steps, maybe it would make sense to PR the DB flexibility first, then additional storage engines later.\r\n\r\n#18971 does the DB class stuff that gives us this flexibility. This PR is adding in the storage engine and the logic for CWallet to choose which storage to use.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-634780861",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3379155683,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM3OTE1NTY4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3379155683",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T16:59:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3379565351,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM3OTU2NTM1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3379565351",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T18:41:23Z"
    },
    {
      "event": "commented",
      "id": 634887122,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDg4NzEyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634887122",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T19:21:45Z",
      "updated_at": "2020-05-27T19:21:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nNice work! Very readable code!",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-634887122",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "subscribed",
      "id": 3379734052,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNzk3MzQwNTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3379734052",
      "actor": {
        "login": "ollitsac107",
        "id": 62238884,
        "node_id": "MDQ6VXNlcjYyMjM4ODg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/62238884?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ollitsac107",
        "html_url": "https://github.com/ollitsac107",
        "followers_url": "https://api.github.com/users/ollitsac107/followers",
        "following_url": "https://api.github.com/users/ollitsac107/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ollitsac107/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ollitsac107/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ollitsac107/subscriptions",
        "organizations_url": "https://api.github.com/users/ollitsac107/orgs",
        "repos_url": "https://api.github.com/users/ollitsac107/repos",
        "events_url": "https://api.github.com/users/ollitsac107/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ollitsac107/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T19:28:16Z"
    },
    {
      "event": "commented",
      "id": 634903672,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDkwMzY3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634903672",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T19:50:17Z",
      "updated_at": "2020-10-14T23:38:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20094 (wallet: Unify wallet directory lock error message by hebasto)\n* #19502 (Bugfix: Wallet: Soft-fail exceptions within ListWalletDir file checks by luke-jr)\n* #19419 (wallet: let Listwalletdir do not iterate through our blocksdata. by Saibato)\n* #19101 (refactor: remove ::vpwallets and related global variables by ryanofsky)\n* #18095 (Fix crashes and infinite loop in ListWalletDir() by uhliksk)\n* #18077 (net: Add NAT-PMP port forwarding support by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-634903672",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T20:14:53Z",
      "updated_at": "2020-05-27T20:14:53Z",
      "source": {
        "issue": {
          "id": 622627618,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDIxNDU1Njgy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19041",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19041/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19041/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19041/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19041",
          "number": 19041,
          "state": "closed",
          "state_reason": null,
          "title": "ci: tsan with -stdlib=libc++-10",
          "body": "According to the [ThreadSanitizer docs](https://clang.llvm.org/docs/ThreadSanitizer.html#current-status):\r\n>  C++11 threading is supported with **llvm libc++**.\r\n\r\nFor example, the thread sanitizer build is currently not checking for double lock of mutexes.\r\n\r\nFixes (partially) https://github.com/bitcoin/bitcoin/issues/19038#issuecomment-632138003",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 12,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19041",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19041",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19041.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19041.patch"
          },
          "closed_at": "2020-06-03T13:56:09Z",
          "created_at": "2020-05-21T16:33:45Z",
          "updated_at": "2022-02-15T11:03:42Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3380011810,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM4MDAxMTgxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3380011810",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T20:47:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3380068896,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM4MDA2ODg5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3380068896",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T21:04:50Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T21:14:37Z",
      "updated_at": "2020-05-27T21:14:37Z",
      "source": {
        "issue": {
          "id": 614261149,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDE0ODUyNjM1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18907",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18907/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18907/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18907/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18907",
          "number": 18907,
          "state": "closed",
          "state_reason": null,
          "title": "walletdb: Don't remove database transaction logs and instead error",
          "body": "Instead of removing the database transaction logs and retrying the\r\nwallet loading, just return an error message to the user. Additionally,\r\nspeciically for DB_RUNRECOVERY, notify the user that this could be due\r\nto different BDB versions.\r\n\r\nKind of implements the suggestion from https://github.com/bitcoin/bitcoin/pull/18870#discussion_r421647964",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 14,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18907",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18907",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18907.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18907.patch"
          },
          "closed_at": "2020-07-22T07:02:14Z",
          "created_at": "2020-05-07T18:35:08Z",
          "updated_at": "2022-02-15T11:03:58Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T21:16:03Z",
      "updated_at": "2020-05-27T21:16:03Z",
      "source": {
        "issue": {
          "id": 613816472,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDE0NDkzOTU2",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18904",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18904/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18904/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18904/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18904",
          "number": 18904,
          "state": "closed",
          "state_reason": null,
          "title": "Don't call lsn_reset in periodic flush",
          "body": "Signed-off-by: Anthony Fieroni <bvbfan@abv.bg>",
          "user": {
            "login": "bvbfan",
            "id": 8323581,
            "node_id": "MDQ6VXNlcjgzMjM1ODE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8323581?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bvbfan",
            "html_url": "https://github.com/bvbfan",
            "followers_url": "https://api.github.com/users/bvbfan/followers",
            "following_url": "https://api.github.com/users/bvbfan/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/bvbfan/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/bvbfan/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/bvbfan/subscriptions",
            "organizations_url": "https://api.github.com/users/bvbfan/orgs",
            "repos_url": "https://api.github.com/users/bvbfan/repos",
            "events_url": "https://api.github.com/users/bvbfan/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/bvbfan/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 19,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18904",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18904",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18904.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18904.patch"
          },
          "closed_at": "2022-10-12T20:30:52Z",
          "created_at": "2020-05-07T06:48:14Z",
          "updated_at": "2022-10-12T20:31:20Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T21:23:54Z",
      "updated_at": "2020-05-27T21:23:54Z",
      "source": {
        "issue": {
          "id": 612152163,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDEzMTcxODAw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18870",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18870/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18870/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18870/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18870",
          "number": 18870,
          "state": "closed",
          "state_reason": null,
          "title": "build: Allow BDB between 4.8 and 5.3 without --with-incompatible-bdb",
          "body": "As noted in https://github.com/bitcoin/bitcoin/pull/18844#issuecomment-623004113, BDB versions 4.7 through 5.3 inclusive use the same database file format, so the wallet.dat files are compatible between these versions. The thing that is not compatible is the database transaction logs, but those are cleaned up on a clean wallet close. As such, allow people to build with those versions of BDB without needing to pass `--with-incompatible-bdb`. The docs have been updated to reflect this change. They now no longer mention that BDB 4.8 is required. The caveat about the transaction logs is mentioned.\r\n\r\nThis does not change the version of BDB used in the depends system, so we will still ship with BDB 4.8.\r\n\r\nThe search order for BDB was also changed to prefer system BDB and newer versions of BDB in general.\r\n\r\n***\r\n\r\nOne issue I noticed while testing this was that it configure would pick up my system BDB instead of the depends BDB. It's possible that this could effect gitian builds, which would be a bug. Someone more familiar with our build system should check that.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 15,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18870",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18870",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18870.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18870.patch"
          },
          "closed_at": "2020-07-10T15:28:00Z",
          "created_at": "2020-05-04T20:36:54Z",
          "updated_at": "2022-02-15T10:59:30Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T21:50:18Z",
      "updated_at": "2020-05-27T21:50:18Z",
      "source": {
        "issue": {
          "id": 607939706,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDA5ODE2ODQx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18792",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18792/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18792/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18792/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18792",
          "number": 18792,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Remove boost from PeriodicFlush",
          "body": "The `boost::this_thread::interruption_point()` in the code base currently block the replacement of `boost::thread` with `std::thread`. [1]\r\n\r\nRemove them from the wallet because they are either unused or useless.\r\n\r\nThe feature to interrupt a periodic flush is useless because all wallets have just been flushed https://github.com/bitcoin/bitcoin/blob/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332/src/init.cpp#L194 and another flush should be a noop. Also, they will be flushed again shortly after https://github.com/bitcoin/bitcoin/blob/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332/src/init.cpp#L285, so even if repeated flushes weren't a noop, doing 3 instead of 2 shouldn't matter too much at this point. Also, the wallet is flushed every two seconds in the worst case, so if this is an expensive operation, that period should be readjusted. (Or bdb should be removed altogether #18916)\r\n\r\n[1] Replacement of `boost::thread` with `std::thread` should happen because:\r\n\r\n* The boost thread dependency is slow to compile\r\n* Boost thread is less maintained than the standard lib\r\n* Boost thread is mostly redundant to the standard lib\r\n* Global interruption points via exceptions are hard to keep track of during review and easy to get wrong during runtime (e.g. accidental `catch (...)`)",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 23,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18792",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18792",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18792.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18792.patch"
          },
          "closed_at": "2020-06-02T14:35:57Z",
          "created_at": "2020-04-28T00:31:45Z",
          "updated_at": "2022-02-15T10:59:04Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T22:03:44Z",
      "updated_at": "2020-05-27T22:03:44Z",
      "source": {
        "issue": {
          "id": 604368916,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDA2OTc3Mjg0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18731",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18731/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18731/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18731/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18731",
          "number": 18731,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Make CCheckQueue RAII-styled",
          "body": "This PR:\r\n- makes `CCheckQueue` RAII-styled\r\n- gets rid of two global variables:\r\n  - `scriptcheckqueue`\r\n  - `g_parallel_script_checks`\r\n\r\nThis PR is based on #18710, therefore only the last two commits should be considered.",
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 20,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18731",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18731",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18731.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18731.patch"
          },
          "closed_at": "2022-04-22T14:31:40Z",
          "created_at": "2020-04-22T00:33:08Z",
          "updated_at": "2022-12-28T13:18:44Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T22:11:14Z",
      "updated_at": "2020-05-27T22:11:14Z",
      "source": {
        "issue": {
          "id": 603299146,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDA2MTEyNjEx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18710",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18710/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18710/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18710/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18710",
          "number": 18710,
          "state": "closed",
          "state_reason": null,
          "title": "Add local thread pool to CCheckQueue",
          "body": "This PR:\r\n- gets rid of `boost::thread_group` in the `CCheckQueue` class\r\n- allows thread safety annotation usage in the `CCheckQueue` class\r\n- is alternative to #14464 (https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-616618525, https://github.com/bitcoin/bitcoin/pull/18710#issuecomment-617291612)\r\n\r\nAlso, with this PR (I hope) it could be easier to resurrect a bunch of brilliant ideas from #9938.\r\n\r\nRelated: #17307",
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/47",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47/labels",
            "id": 5347322,
            "node_id": "MDk6TWlsZXN0b25lNTM0NzMyMg==",
            "number": 47,
            "state": "closed",
            "title": "22.0",
            "description": "",
            "creator": {
              "login": "MarcoFalke",
              "id": 6399679,
              "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
              "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/MarcoFalke",
              "html_url": "https://github.com/MarcoFalke",
              "followers_url": "https://api.github.com/users/MarcoFalke/followers",
              "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
              "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
              "repos_url": "https://api.github.com/users/MarcoFalke/repos",
              "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 124,
            "created_at": "2020-04-25T00:14:49Z",
            "updated_at": "2021-09-14T07:16:53Z",
            "closed_at": "2021-09-09T12:47:52Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 48,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18710",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18710",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18710.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18710.patch"
          },
          "closed_at": "2021-01-25T19:21:55Z",
          "created_at": "2020-04-20T14:51:38Z",
          "updated_at": "2022-08-16T17:03:20Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T22:24:53Z",
      "updated_at": "2020-05-27T22:24:53Z",
      "source": {
        "issue": {
          "id": 598539958,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDAyMzc2NzUz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18608",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18608/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18608/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18608/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18608",
          "number": 18608,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Remove CAddressBookData::destdata",
          "body": "This PR is replaced by #27224 (because of a permissions issue it was closed and locked and couldn't be reopened)\r\n\r\n---\r\n\r\n**This is based on #21353.** The non-base commits are:\r\n\r\n- [`7a05b1dee2f` refactor: Remove CAddressBookData::destdata](https://github.com/bitcoin/bitcoin/pull/18608/commits/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e)\r\n\r\n---\r\n\r\nThis is cleanup that doesn't change external behavior.\r\n\r\n- Removes awkward `StringMap` intermediate representation\r\n- Deals with receive request \"rr\" keys in walletdb.cpp instead of all over qt, wallet, and interfaces code\r\n- Deals with destination \"used\" keys in walletdb.cpp instead of all over wallet code\r\n- Adds test coverage\r\n- Reduces code (+85/-138 lines)\r\n- Reduces memory usage\r\n\r\nThis PR doesn't change externally observable behavior. Internally, only change in behavior is that EraseDestData deletes directly from database because the `StringMap` is gone. This is more direct and efficient because it uses a single btree lookup and scan instead of multiple lookups\r\n\r\nMotivation for this cleanup is making changes like #18550, #18192, #13756 easier to reason about and less likely to result in unintended behavior and bugs\r\n\r\n<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18608",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18608",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18608.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18608.patch"
          },
          "closed_at": "2021-03-03T20:13:11Z",
          "created_at": "2020-04-12T18:05:22Z",
          "updated_at": "2023-03-27T18:41:52Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T22:56:16Z",
      "updated_at": "2020-05-27T22:56:16Z",
      "source": {
        "issue": {
          "id": 581753448,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Mzg4NzY5NzUw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18354",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18354/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18354/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18354/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18354",
          "number": 18354,
          "state": "closed",
          "state_reason": null,
          "title": "Use shared pointers only in validation interface",
          "body": "This pull request fully replace #18279 it fix 3 issues with wallet\r\n1. Crash in wallet destructor while it tries to delete mutex while it's hold by notification thread\r\n2. Crash in notification disconnect due to notification callback is set to nullptr before unregister interface is done\r\n3. Ensure unregister interface has no more background callbacks before returning to notification disconnect",
          "user": {
            "login": "bvbfan",
            "id": 8323581,
            "node_id": "MDQ6VXNlcjgzMjM1ODE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8323581?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bvbfan",
            "html_url": "https://github.com/bvbfan",
            "followers_url": "https://api.github.com/users/bvbfan/followers",
            "following_url": "https://api.github.com/users/bvbfan/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/bvbfan/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/bvbfan/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/bvbfan/subscriptions",
            "organizations_url": "https://api.github.com/users/bvbfan/orgs",
            "repos_url": "https://api.github.com/users/bvbfan/repos",
            "events_url": "https://api.github.com/users/bvbfan/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/bvbfan/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64585,
              "node_id": "MDU6TGFiZWw2NDU4NQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Bug",
              "name": "Bug",
              "color": "FBBAAB",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 20,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18354",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18354",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18354.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18354.patch"
          },
          "closed_at": "2022-02-22T10:56:18Z",
          "created_at": "2020-03-15T17:27:23Z",
          "updated_at": "2023-02-22T10:14:10Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T23:33:18Z",
      "updated_at": "2020-05-27T23:33:18Z",
      "source": {
        "issue": {
          "id": 560626660,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzcxNTgzMzk4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18077",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18077/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18077/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18077/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18077",
          "number": 18077,
          "state": "closed",
          "state_reason": null,
          "title": "net: Add NAT-PMP port forwarding support",
          "body": "Close #11902\r\nThis PR is an alternative to:\r\n- #12288\r\n- #15717\r\n\r\nTo compile with NAT-PMP support on Ubuntu [`libnatpmp-dev`](https://packages.ubuntu.com/source/bionic/libnatpmp) should be available.\r\n\r\nLog excerpt:\r\n```\r\n2020-02-05T20:12:28Z [mapport] NAT-PMP: public address = 95.164.65.194\r\n2020-02-05T20:12:28Z [mapport] AddLocal(95.164.65.194:18333,3)\r\n2020-02-05T20:12:28Z [mapport] NAT-PMP: port mapping successful.\r\n```\r\n\r\nSee: [`libnatpmp`](https://miniupnp.tuxfamily.org/libnatpmp.html)\r\n\r\n---\r\n\r\nSome follow-ups are out of this PR's scope:\r\n- mention NAT-PMP library in the version message\r\n- ~integrate NAT-PMP into the GUI~ (already [added](https://github.com/bitcoin/bitcoin/pull/18077#issuecomment-589405068))",
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignee": {
            "login": "dongcarl",
            "id": 3445290,
            "node_id": "MDQ6VXNlcjM0NDUyOTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dongcarl",
            "html_url": "https://github.com/dongcarl",
            "followers_url": "https://api.github.com/users/dongcarl/followers",
            "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
            "organizations_url": "https://api.github.com/users/dongcarl/orgs",
            "repos_url": "https://api.github.com/users/dongcarl/repos",
            "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dongcarl/received_events",
            "type": "User",
            "site_admin": false
          },
          "assignees": [
            {
              "login": "dongcarl",
              "id": 3445290,
              "node_id": "MDQ6VXNlcjM0NDUyOTA=",
              "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/dongcarl",
              "html_url": "https://github.com/dongcarl",
              "followers_url": "https://api.github.com/users/dongcarl/followers",
              "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
              "organizations_url": "https://api.github.com/users/dongcarl/orgs",
              "repos_url": "https://api.github.com/users/dongcarl/repos",
              "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/dongcarl/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/47",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47/labels",
            "id": 5347322,
            "node_id": "MDk6TWlsZXN0b25lNTM0NzMyMg==",
            "number": 47,
            "state": "closed",
            "title": "22.0",
            "description": "",
            "creator": {
              "login": "MarcoFalke",
              "id": 6399679,
              "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
              "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/MarcoFalke",
              "html_url": "https://github.com/MarcoFalke",
              "followers_url": "https://api.github.com/users/MarcoFalke/followers",
              "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
              "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
              "repos_url": "https://api.github.com/users/MarcoFalke/repos",
              "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 124,
            "created_at": "2020-04-25T00:14:49Z",
            "updated_at": "2021-09-14T07:16:53Z",
            "closed_at": "2021-09-09T12:47:52Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 79,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18077",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18077",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18077.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18077.patch"
          },
          "closed_at": "2021-01-07T18:42:38Z",
          "created_at": "2020-02-05T21:02:12Z",
          "updated_at": "2022-08-16T17:11:57Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-28T04:57:58Z",
      "updated_at": "2020-05-28T04:57:58Z",
      "source": {
        "issue": {
          "id": 626175605,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDI0MjE4MzI0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19085",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19085/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19085/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19085/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19085",
          "number": 19085,
          "state": "closed",
          "state_reason": null,
          "title": "Refactor: clean up PeriodicFlush()",
          "body": "`PeriodicFlush()` is much more convoluted than it needs to be: it has triple nesting, local variables counting refs and return values, and increments the `mapFileUseCount` iterator unnecessarily. Removing all of that makes the function much easier to understand.",
          "user": {
            "login": "jnewbery",
            "id": 1063656,
            "node_id": "MDQ6VXNlcjEwNjM2NTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jnewbery",
            "html_url": "https://github.com/jnewbery",
            "followers_url": "https://api.github.com/users/jnewbery/followers",
            "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
            "organizations_url": "https://api.github.com/users/jnewbery/orgs",
            "repos_url": "https://api.github.com/users/jnewbery/repos",
            "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jnewbery/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19085",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19085",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19085.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19085.patch"
          },
          "closed_at": "2020-07-09T10:56:20Z",
          "created_at": "2020-05-28T03:01:07Z",
          "updated_at": "2022-02-15T10:59:34Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-28T08:36:01Z",
      "updated_at": "2020-05-28T08:36:01Z",
      "source": {
        "issue": {
          "id": 408826356,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjUxOTQ4MjYz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15382",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15382/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15382/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15382/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/15382",
          "number": 15382,
          "state": "closed",
          "state_reason": null,
          "title": "util: add RunCommandParseJSON",
          "body": "Prerequisite for external signer support in #16546. Big picture overview in [this gist](https://gist.github.com/Sjors/29d06728c685e6182828c1ce9b74483d).\r\n\r\nThis adds a new dependency [boost process](https://github.com/boostorg/process/tree/boost-1.64.0). This is part of Boost since 1.64 which is part of `depends`. Because the minimum Boost version is 1.47, this functionality is skipped for older versions of Boost.\r\n\r\nUse `./configure --with-boost-process` to opt in, which checks for the presence of Boost::Process.\r\n\r\nWe add `UniValue runCommandParseJSON(const std::string& strCommand)` to `system.{h,cpp}` which calls an arbitrary command and processes the JSON returned by it. This is currently only called by the test suite.\r\n\r\n~For testing purposes this adds a new regtest-only RPC method `runcommand`, as well as `test/mocks/command.py` used by functional tests.~ (this is no longer the case)\r\n\r\nTODO:\r\n- [ ] review boost process in #15440",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 72,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15382",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/15382",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/15382.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/15382.patch"
          },
          "closed_at": "2020-08-05T11:45:53Z",
          "created_at": "2019-02-11T15:09:31Z",
          "updated_at": "2022-08-18T19:56:48Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 635262568,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNTI2MjU2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635262568",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-28T10:41:25Z",
      "updated_at": "2020-05-28T10:42:37Z",
      "author_association": "MEMBER",
      "body": "CONCEPT ACK\r\n :tada: :partying_face: :tada: \r\nVery happy to move on from BerkeleyDB and I've always liked sqlite as a versatile but still minimalistic replacement.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-635262568",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3384623089,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM4NDYyMzA4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3384623089",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-28T20:55:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3384859679,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM4NDg1OTY3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3384859679",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-28T22:14:26Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-29T06:45:30Z",
      "updated_at": "2020-05-29T06:45:30Z",
      "source": {
        "issue": {
          "id": 626848421,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDI0NzYyNzE2",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19101",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19101/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19101/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19101/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19101",
          "number": 19101,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: remove ::vpwallets and related global variables",
          "body": "Get rid of global wallet list variables by moving them to WalletContext struct\r\n\r\n- [`cs_wallets`](https://github.com/bitcoin/bitcoin/blob/e638acf6970394f8eb1957366ad2d39512f33b31/src/wallet/wallet.cpp#L56) is now [`WalletContext::wallet_mutex`](https://github.com/ryanofsky/bitcoin/blob/4be544c7ec08a81952fd3f4349151cbb8bdb60e8/src/wallet/context.h#L37)\r\n- [`vpwallets`](https://github.com/bitcoin/bitcoin/blob/e638acf6970394f8eb1957366ad2d39512f33b31/src/wallet/wallet.cpp#L57) is now [`WalletContext::wallets`](https://github.com/ryanofsky/bitcoin/blob/4be544c7ec08a81952fd3f4349151cbb8bdb60e8/src/wallet/context.h#L38)\r\n- [`g_load_wallet_fns`](https://github.com/bitcoin/bitcoin/blob/e638acf6970394f8eb1957366ad2d39512f33b31/src/wallet/wallet.cpp#L58) is now [`WalletContext::wallet_load_fns`](https://github.com/ryanofsky/bitcoin/blob/4be544c7ec08a81952fd3f4349151cbb8bdb60e8/src/wallet/context.h#L39)",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 13,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19101",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19101",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19101.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19101.patch"
          },
          "closed_at": "2021-08-19T01:42:42Z",
          "created_at": "2020-05-28T22:10:51Z",
          "updated_at": "2023-01-02T10:06:09Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-29T06:48:33Z",
      "updated_at": "2020-05-29T06:48:33Z",
      "source": {
        "issue": {
          "id": 626825457,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDI0NzQ0MDA3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19099",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19099/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19099/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19099/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19099",
          "number": 19099,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Move wallet methods out of chain.h and node.h",
          "body": "Add WalletClient interface so node interface is cleaner and don't need wallet-specific methods.\r\n\r\nThe new NodeContext::wallet_client pointer will also be needed to eliminate global wallet variables like ::vpwallets in #19101, because createWallet(), loadWallet(), getWallets(), etc methods called by the GUI need a way to get a reference to the list of open wallets if it is no longer a global variable.",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19099",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19099",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19099.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19099.patch"
          },
          "closed_at": "2020-08-31T08:14:37Z",
          "created_at": "2020-05-28T21:25:08Z",
          "updated_at": "2022-02-15T10:36:48Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-29T06:50:04Z",
      "updated_at": "2020-05-29T06:50:04Z",
      "source": {
        "issue": {
          "id": 626812473,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDI0NzMzMTQ3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19098",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19098/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19098/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19098/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19098",
          "number": 19098,
          "state": "closed",
          "state_reason": null,
          "title": "test: Remove duplicate NodeContext hacks",
          "body": "Qt tests currently are currently using two NodeContext structs at the same time, one in interfaces::NodeImpl::m_context, and the other in BasicTestingSetup::m_node, and the tests have hacks transferring state between them.\r\n\r\nFix this by getting rid of the NodeImpl::m_context struct and making it a pointer. This way a common BitcoinApplication object can be used for all qt tests, but they can still have their own testing setups.\r\n\r\nNon-test code is changing but non-test behavior is still the same as before.\r\n\r\nMotivation for this PR is to be able to remove the \"std::move(test.m_node.connman)\" and mempool hacks for swapping individual NodeContext members in Qt tests, because followup PR #19099 adds yet another member (wallet_client) that needs to be swapped. After this change, the whole NodeContext struct can be swapped instead of individual members, so the workarounds are less fragile and invasive.",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19098",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19098",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19098.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19098.patch"
          },
          "closed_at": "2020-08-07T06:09:27Z",
          "created_at": "2020-05-28T21:02:58Z",
          "updated_at": "2022-02-15T10:34:39Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-01T06:42:21Z",
      "updated_at": "2020-06-01T06:42:21Z",
      "source": {
        "issue": {
          "id": 598783519,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDAyNTYxMDY3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18618",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18618/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18618/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18618/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18618",
          "number": 18618,
          "state": "closed",
          "state_reason": null,
          "title": "gui: Drop RecentRequestsTableModel dependency to WalletModel",
          "body": "",
          "user": {
            "login": "promag",
            "id": 3534524,
            "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/promag",
            "html_url": "https://github.com/promag",
            "followers_url": "https://api.github.com/users/promag/followers",
            "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
            "organizations_url": "https://api.github.com/users/promag/orgs",
            "repos_url": "https://api.github.com/users/promag/repos",
            "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/promag/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18618",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18618",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18618.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18618.patch"
          },
          "closed_at": "2020-07-09T13:08:02Z",
          "created_at": "2020-04-13T09:30:30Z",
          "updated_at": "2022-02-15T10:59:35Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 636923373,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNjkyMzM3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/636923373",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-01T15:28:04Z",
      "updated_at": "2020-06-01T15:29:25Z",
      "author_association": "MEMBER",
      "body": "Concept ACK. I'm able to build and run the test suite (including `feature_backwards_compatibility.py`) on macOS 10.15.4 with Homebrew `brew install sqlite3` (don't forget to add). I'm also able to build with `/depends`. I'm able to load an existing descriptor wallet (bdb) and create a new one.\r\n\r\nIs there a particular reason to stick to `.dat` as the file extension, rather than `.sqlite`? If you do the latter, `listwalletdir` and the Open Wallet GUI need a trivial change.\r\n\r\nWould it make sense to switch some of the records over to a format that's more easy to inspect with a SQLite viewer? As well as use tables like \"transactions\"? Or would that make this PR far too complicated?",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-636923373",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "commented",
      "id": 636939984,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNjkzOTk4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/636939984",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-01T15:58:45Z",
      "updated_at": "2020-06-01T15:58:45Z",
      "author_association": "MEMBER",
      "body": "> Is there a particular reason to stick to `.dat` as the file extension, rather than `.sqlite`? If you do the latter, `listwalletdir` and the Open Wallet GUI need a trivial change.\r\n\r\nThere are 2 reasons. The first is that it's easier on review on implementation to stick to one filename. As you mentioned, if I make it `.sqlite`, `listwalletdir` and other places need to be changed. There are several places throughout the codebase where we specifically look for `wallet.dat` and not changing those to also use `wallet.sqlite` could be very bad. Additionally, some of those places may need to know whether they are looking for `wallet.dat` or `wallet.sqlite` so they would need access to whether a wallet is a descriptor wallet. They may need to know what kind of storage to look for which exposes more information than we currently already do. It's much simpler to just keep it `wallet.dat`. This avoids issues where the wrong filename could be used and makes review simpler.\r\n\r\nThe second reason is that there are already lots of tooling, documentation, and discussion that use `wallet.dat`. Things like backup scripts or instructions telling people how to backup their wallet won't be invalidated as we keep the same naming. For the most part, the end user doesn't care about how the data is being stored within the file, they just need to know to preserve the `wallet.dat` file. So by keeping the naming, all of these things stay the same and make it less likely for people to lose their money.\r\n\r\nThere are, of course, a few cases where tooling does need to be updated because of the format change. But this tooling is all for manual inspection of the wallet.dat file and most users aren't using that tooling.\r\n\r\n> Would it make sense to switch some of the records over to a format that's more easy to inspect with a SQLite viewer? As well as use tables like \"transactions\"? Or would that make this PR far too complicated?\r\n\r\nI would like to do that in the future. But I think that is too complicated for right now.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-636939984",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3394565699,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM5NDU2NTY5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3394565699",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-01T19:30:45Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-02T01:16:45Z",
      "updated_at": "2020-06-02T01:16:45Z",
      "source": {
        "issue": {
          "id": 628769195,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDI2MjQ3OTMy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19137",
          "number": 19137,
          "state": "closed",
          "state_reason": null,
          "title": "wallettool: Add dump and createfromdump commands",
          "body": "Adds two commands to the `bitcoin-wallet` tool: `dump` and `createfromdump`. These commands will be useful for a wallet storage migration in the future. It is also generally useful to have a storage agnostic dump like this. These commands are similar to BDB's `db_dump` and `db_load` tools. This can also be useful for manual construction of a wallet file for tests.\r\n\r\n`dump` outputs every key-value pair from the wallet as comma separated hex. Each key-value pair is on its own line with the key and value in hex separated by a comma. This is output to the file specified by the new `-dumpfile` option.\r\n\r\n`createfromdump` takes a file produced by `dump` and creates a new wallet file with exactly the records specified in that file.\r\n\r\nA new option `-dumpfile` is added to the wallet tool. When used with `dump`, the records will be written to the specified file. When used with `createfromdump`, the file is read and the key-value pairs constructed from it. `createfromdump` requires `-dumpfile`.\r\n\r\nA simple round-trip test is added to the `tool_wallet.py`.\r\n\r\nThis PR is based on #19334,",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 231994551,
              "node_id": "MDU6TGFiZWwyMzE5OTQ1NTE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Scripts%20and%20tools",
              "name": "Scripts and tools",
              "color": "ffffee",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/47",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47/labels",
            "id": 5347322,
            "node_id": "MDk6TWlsZXN0b25lNTM0NzMyMg==",
            "number": 47,
            "state": "closed",
            "title": "22.0",
            "description": "",
            "creator": {
              "login": "MarcoFalke",
              "id": 6399679,
              "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
              "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/MarcoFalke",
              "html_url": "https://github.com/MarcoFalke",
              "followers_url": "https://api.github.com/users/MarcoFalke/followers",
              "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
              "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
              "repos_url": "https://api.github.com/users/MarcoFalke/repos",
              "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 124,
            "created_at": "2020-04-25T00:14:49Z",
            "updated_at": "2021-09-14T07:16:53Z",
            "closed_at": "2021-09-09T12:47:52Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 37,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19137",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19137.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19137.patch"
          },
          "closed_at": "2020-12-17T14:19:41Z",
          "created_at": "2020-06-01T22:30:05Z",
          "updated_at": "2022-02-15T11:09:18Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-02T02:09:42Z",
      "updated_at": "2020-06-02T02:09:42Z",
      "source": {
        "issue": {
          "id": 626849610,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDI0NzYzNzAx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19102",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19102/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19102/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19102/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19102",
          "number": 19102,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Introduce and use DummyDatabase instead of dummy BerkeleyDatabase",
          "body": "In the unit tests, we use a dummy `WalletDatabase` which does nothing and always returns true. This is currently implemented by creating a `BerkeleyDatabase` in dummy mode. This PR instead adds a `DummyDatabase` class which does nothing and never fails for use in the tests. `CreateDummyWalletDatabase` is changed to return this `DummyDatabase` and `BerkeleyDatabase` is cleaned up to remove all of the checks for `IsDummy`.\r\n\r\nBased on `WalletDatabase` abstract class introduced in #19334 ",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19102",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19102",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19102.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19102.patch"
          },
          "closed_at": "2020-07-30T15:08:40Z",
          "created_at": "2020-05-28T22:13:33Z",
          "updated_at": "2022-02-15T11:15:21Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3395694910,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM5NTY5NDkxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3395694910",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-02T03:31:41Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-02T04:07:26Z",
      "updated_at": "2020-06-02T04:07:26Z",
      "source": {
        "issue": {
          "id": 617830654,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDE3Njc1NzY2",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18971",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18971/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18971/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18971/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18971",
          "number": 18971,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Refactor the classes in wallet/db.{cpp/h}",
          "body": "The data storage layer of the wallet is fairly complicated and not well encapsulated or modularized. This makes it difficult for us to introduce new data storage methods. So this PR refactors it such that there is a clear way to introduce other storage options. This is also intended to clean up the logic of the database layer so that it is easier to follow and reason about.\r\n\r\nIn the database, there are 3 classes: `BerkeleyBatch`, `BerkeleyDatabase`, and `BerkeleyEnvironment`. `BerkeleyDatabase` is typenamed to `WalletDatabase`. The goal is to introduce two abstract classes: `WalletDatabase` and `DatabaseBatch`. These will be implemented by `BerkeleyDatabase` and `BerkeleyBatch`. This abstract classes can be inherited by other storage methods. All of the database specific things should be hidden in those classes.\r\n\r\nTo achieve this, we move the database handling things in `BerkeleyBatch` and turn it purely into a data accessor for the `BerkeleyDatabase`. Particularly, various static functions that operated on a `BerkeleyDatabase` are changed to be member functions of `BerkeleyDatabase`. `Read`, `Write`, `Erase`, and `Exists` are refactored to have separate functions that can be overridden by other classes. Instead of `GetCursor` returning a BDB specific `Dbc` object, new `CreateCursor` and `CloseCursor` functions are added and the cursor is handled internally within the `BerkeleyBatch`. We are then able to introduce the `DatabaseBatch` abstract class.\r\n\r\nFunctionality is further moved out of `BerkeleyBatch` into `BerkeleyDatabase`. Notably the `Db` handle creation is moved from `BerkeleyBatch`'s constructor and to a new `Open` function in `BerkeleyDatabase`. `BerkeleyDatabase` will also handle closing with a new `Close` function instead of having this be part of `Flush`.\r\n\r\nAdditionally, the existence of `BerkeleyEnvironment` is hidden inside of `BerkeleyDatabase`. `mapFileUseCount` is removed. Instead `WalletDatabase` will track it's use count with `m_refcount`. This is incremented by newly introduced `AddRef` and `RemoveRef` functions. `m_refcount` is used to ensure that the database and environment are not closed while the database may still be in use.\r\n\r\nInstead of each `BerkeleyEnvironment` tracking the fileids of the databases in that environment, a global map `g_fileids` is used. Since we were already going through every open fileid for the uniqeness check, it doesn't matter what `BerkeleyEnvironment` has a database with a particular fileid. All we care about is that there is a database in any of the environments that has the same fileid of the database that is currently being opened.\r\n\r\nLastly, `BerkeleyBatch, `BerkeleyDatabase`, and `BerkeleyEnvironment` are moved into new files `wallet/bdb.{cpp/h}`. `WalletDatabase` and `DatabaseBatch` are in `wallet/db.{cpp/h}`. This just gives better organization of the code so they aren't all mixed together.\r\n\r\n***\r\n\r\nI've started breaking this down into separate PRs. Some of the simpler stuff is moved up to the front so they can be merged first.\r\n\r\n* [x] Mostly simple moveonly things: #19290\r\n  * walletdb: Make SpliWalletFilePath non-static\r\n  * walletdb: Add IsBDBWalletLoaded to look for BDB wallets specifically\r\n  * walletdb: move IsWalletLoaded to walletdb.cpp\r\n  * walletdb: moveonly: Move BerkeleyBatch Cursor and Txn funcs to cpp\r\n  * walletdb: Move BDB specific things into bdb.{cpp/h}\r\n\r\nThese PRs are independent of each other and can be merged out of order after #19290 is merged\r\n* [x] Refactor Read, Write, Erase, Exists: #19292\r\n  * walletdb: refactor Read, Write, Erase, and Exists into non-template func\r\n* [x] Handle cursor internally: #19308\r\n  * walletdb: Handle cursor internally\r\n* [x] Make Create, CreateMock, and CreateDummy standalone: #19310\r\n  * Add Create*WalletDatabase functions\r\n  * scripted-diff: Replace WalletDatabase::Create* with CreateWalletDatabase\r\n  * Remove WalletDatabase::Create, CreateMock, and CreateDummy\r\n* [x] Move BerkeleyBatch static functions: #19324\r\n  * walletdb: Combine VerifyDatabaseFile and VerifyEnvironment\r\n  * walletdb: Move PeriodicFlush into WalletDatabase\r\n  * walletdb: Move Rewrite into BerkeleyDatabase\r\n\r\nThese PRs require the previous listed to be merged first and need to be merged in order\r\n* [x] Introduce `DatabaseBatch`: #19325\r\n  * walletdb: Refactor DatabaseBatch abstract class from BerkeleyBatch\r\n  * walletdb: Add MakeBatch function to BerkeleyDatabase and use it\r\n* [x] Introduce `WalletDatabase`: #19334\r\n  * walletdb: Move BerkeleyDatabase::Flush(true) to Close()\r\n  * walletdb: Introduce AddRef and RemoveRef functions\r\n  * walletdb: Add BerkeleyDatabase::Open dummy function\r\n  * walletdb: Introduce WalletDatabase abstract class\r\n* [ ] Cleanup the separation: #19335\r\n  * walletdb: track database file use as m_refcount within BerkeleyDatabase\r\n  * walletdb: Move Db->open to BerkeleyDatabase::Open\r\n  * walletdb: Use a global g_fileids instead of m_fileids for each env\r\n  * walletdb: Remove BerkeleyBatch friend class from BerkeleyDatabase\r\n\r\nI will continue to break this down as things get merged.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 21,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18971",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18971",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18971.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18971.patch"
          },
          "closed_at": "2020-06-20T02:33:14Z",
          "created_at": "2020-05-14T00:04:15Z",
          "updated_at": "2022-08-30T14:09:27Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3398574657,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM5ODU3NDY1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3398574657",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-02T16:46:34Z"
    },
    {
      "event": "commented",
      "id": 638366578,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzODM2NjU3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/638366578",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-03T18:03:26Z",
      "updated_at": "2020-06-03T18:03:26Z",
      "author_association": "MEMBER",
      "body": "> I don't think it really makes sense to add a database system that we aren't going to use.\r\n\r\nMaybe it's time to use logdb.\r\n\r\n>Review and implementation are much simpler\r\n\r\nRealistically, this should be phrased \"review and implementation are behind closed doors by another team, and non-transparent\".\r\n\r\nWhile SQLite has a free license, it is not open development. I'm not sure if their review standards are even documented.\r\n\r\n> I've always liked sqlite as a versatile but still minimalistic\r\n\r\nNot sure SQLite counts as minimalistic... :p",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-638366578",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3426930042,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQyNjkzMDA0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3426930042",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-09T21:33:33Z"
    },
    {
      "event": "commented",
      "id": 642914167,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjkxNDE2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642914167",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-11T20:33:08Z",
      "updated_at": "2020-06-11T20:33:08Z",
      "author_association": "MEMBER",
      "body": "Concept ACK. Awesome.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-642914167",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3450646643,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQ1MDY0NjY0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3450646643",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-16T19:59:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3450677529,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQ1MDY3NzUyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3450677529",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-16T20:09:05Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-16T22:28:27Z",
      "updated_at": "2020-06-16T22:28:27Z",
      "source": {
        "issue": {
          "id": 638159896,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDM0MDA0ODA3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19267",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19267/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19267/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19267/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19267",
          "number": 19267,
          "state": "closed",
          "state_reason": null,
          "title": "ci: Upgrade most ci configs to focal",
          "body": "Generally developers compile with recent compilers, so bumping the ci configs to a recent OS should be uncontroversial. Older OSes (especially with compiler sanitizers) need workarounds that can be dropped by running on a more recent OS.\r\n\r\nThis pull changes the asan sanitizer and the experimental multiprocess build to use focal.\r\nAlso, it runs the no_wallet config on xenial to test against python 3.5, according to `doc/dependencies.md`.\r\n\r\nFinally, all configs that mimic gitian (win and mac) will stay at bionic.",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19267",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19267",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19267.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19267.patch"
          },
          "closed_at": "2020-06-19T16:54:13Z",
          "created_at": "2020-06-13T13:12:01Z",
          "updated_at": "2022-02-15T10:45:47Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-16T22:48:04Z",
      "updated_at": "2020-06-16T22:48:04Z",
      "source": {
        "issue": {
          "id": 636944749,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDMzMDE5Nzc1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19245",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19245/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19245/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19245/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19245",
          "number": 19245,
          "state": "closed",
          "state_reason": null,
          "title": "Replace boost::filesystem with std::filesystem",
          "body": "## Introduction\r\n\r\nC++17 has introduced the filesystem library. [cppreference.com](https://en.cppreference.com/w/cpp/filesystem) describes very well the origin of the library:\r\n\r\n> The filesystem library was originally developed as boost.filesystem, was published as the technical specification ISO/IEC TS 18822:2015, and finally merged to ISO C++ as of C++17. The boost implementation is currently available on more compilers and platforms than the C++17 library.\r\n\r\nThis draft PR was created to gain feedback and examine what would be necessary to switch from `boost::filesystem` to `std::filesystem` in bitcoin codebase.\r\n\r\nBitcoin codebase contains `src/fs.h` which is a wrapper for the [currently used filesystem library](https://github.com/bitcoin/bitcoin/blob/6762a627ecb89ba8d4ed81a049a5d802e6dd75c2/src/fs.h#L18). The first impression is that one may just replace `namespace fs = boost::filesystem;` with `namespace fs = std::filesystem;` and all will be good. Unfortunately, there are some differences between the [Boost's filesystem library](https://www.boost.org/doc/libs/1_70_0/libs/filesystem/doc/reference.html) and the [c++17 filesystem library](https://en.cppreference.com/w/cpp/filesystem). A nice summary by Davis Herring can be read [here](https://stackoverflow.com/questions/40899267/how-similar-are-boost-filesystem-and-the-c-standard-filesystem-library).\r\n\r\n## Differences between filesystem implementations that affects Bitcoin code\r\n\r\n1. `boost::filesystem::system_complete()` was renamed to `std::filesystem::absolute()` \\[[source](https://stackoverflow.com/a/46271698)\\]\r\n\r\n2. [boost::filesystem::absolute()](https://www.boost.org/doc/libs/1_70_0/libs/filesystem/doc/reference.html#absolute) has second `const path& base` parameter which was dropped in [std::filesystem::absolute](https://en.cppreference.com/w/cpp/filesystem/absolute) (see [reasoning](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0492r2.html#US78)).\r\n\r\n     Each such instance like [this one](https://github.com/bitcoin/bitcoin/blob/master/src/rpc/blockchain.cpp#L2284) can be fixed by changing:\r\n\r\n     `fs::path path = fs::absolute(request.params[0].get_str(), GetDataDir());`\r\n\r\n     to\r\n\r\n    `fs::path path = fs::absolute(GetDataDir() / request.params[0].get_str());` where `/` is function call of `operator/` function.\r\n\r\n     Note: Notably `path(\"foo\") / \"c:/bar\"` yields `c:/bar`. However, that's how `boost::filesystem::absolute(p, base_dir)` behaves too.\r\n\r\n3. [boost::filesystem::path::imbue()](https://www.boost.org/doc/libs/1_70_0/libs/filesystem/doc/reference.html#path-imbue) is not present in `std::filesystem::path`.\r\n\r\n4. [boost::filesystem::unique_path()](https://www.boost.org/doc/libs/1_70_0/libs/filesystem/doc/reference.html#unique_path) is not present in `std::filesystem`.\r\n\r\n5. [boost::filesystem::equivalent(path1, path2)](https://github.com/boostorg/filesystem/blob/812cb9bad3bcbb2161c7cd2c1132b51c4b29c4b9/src/operations.cpp#L1241) differs from [std::filesystem::equivalent(path1, path2)](https://github.com/llvm/llvm-project/blob/00b161b8971bc6d3cb55f13502288b8fe0dbaa42/libcxx/src/filesystem/operations.cpp#L917) as the later reports *not supported* error if one of the files does not exist whereas Boost returns `false`.\r\n    * See also [cppreference](https://en.cppreference.com/w/cpp/filesystem/equivalent).\r\n\r\n## Support for C++17 `<filesystem`>\r\n\r\n* Clang 7+ (see [[Phoronix](https://www.phoronix.com/scan.php?page=news_item&px=Filesystem-Lands-LLVM-Libcpp)][[git commit](https://github.com/llvm-mirror/libcxx/commit/a0866c5fb5020d15c69deda94d32a7f982b88dc9)])\r\n* GCC 8.1+ ([[GCC status page](https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2017)] [[git commit](https://github.com/gcc-mirror/gcc/commit/3b90ed62fb848046ed7ddef07df7c806e7f3fadb)])\r\n  * GCC 8.x requires linking with `-lstdc++fs`.\r\n\r\n## Issues & PRs that may be linked with this PR\r\n\r\nhttps://github.com/bitcoin/bitcoin/issues/13103, https://github.com/bitcoin/bitcoin/pull/13787, https://github.com/google/leveldb/pull/760, https://github.com/bitcoin/bitcoin/pull/6093\r\n\r\n## TODO\r\n\r\n* [x] Remove Boost's filesystem from https://github.com/bitcoin/bitcoin/blob/master/configure.ac (help is welcome)\r\n  * Relevant PR: https://github.com/bitcoin/bitcoin/pull/7302 & https://github.com/bitcoin/bitcoin/commit/76ac35f36d87078da62f95b4a1167ec296e37363\r\n  * Done in #19667.\r\n* [ ] [Am I missing `-lstdc++fs`](https://www.bfilipek.com/2019/05/boost-to-stdfs.html)?\r\n* [ ] What about https://github.com/bitcoin/bitcoin/pull/19933?\r\n* [ ] Address this change https://github.com/bitcoin/bitcoin/pull/19960\r\n* [ ] `unicodepath` test in  `src/test/dbwrapper_tests.cpp` seems to require some UTF-8 locale.\r\n  * See also https://github.com/bitcoin/bitcoin/blob/ae9ee5bdb18c5babbfa2875ab694df118d6a1c1b/src/util/system.cpp#L1249\r\n  * https://github.com/microsoft/STL/blob/2aa944beba9af1d72537fd5e35d402c8b830a5dc/stl/src/filesystem.cpp#L266 - C++17 in Microsoft C++ standard library\r\n  * https://docs.microsoft.com/en-us/cpp/standard-library/filesystem?view=msvc-160\r\n  * https://docs.microsoft.com/en-us/cpp/standard-library/file-system-navigation?view=msvc-160\r\n\r\n## Inspiration\r\n\r\n* https://github.com/ceptontech/filesystem\r\n* https://github.com/ceztko/u8filesystem",
          "user": {
            "login": "kiminuo",
            "id": 58662979,
            "node_id": "MDQ6VXNlcjU4NjYyOTc5",
            "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kiminuo",
            "html_url": "https://github.com/kiminuo",
            "followers_url": "https://api.github.com/users/kiminuo/followers",
            "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
            "organizations_url": "https://api.github.com/users/kiminuo/orgs",
            "repos_url": "https://api.github.com/users/kiminuo/repos",
            "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/kiminuo/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19245",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19245",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19245.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19245.patch"
          },
          "closed_at": "2020-12-22T14:30:23Z",
          "created_at": "2020-06-11T11:39:49Z",
          "updated_at": "2023-01-12T13:46:57Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-16T23:09:41Z",
      "updated_at": "2020-06-16T23:09:41Z",
      "source": {
        "issue": {
          "id": 635090799,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDMxNTIwMjQw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19216",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19216/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19216/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19216/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19216",
          "number": 19216,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Remove first parameter to ScanForWalletTransactions start_hash",
          "body": "Every caller looks up the block hash from a block height immediately before\r\ncalling.",
          "user": {
            "login": "pstratem",
            "id": 620611,
            "node_id": "MDQ6VXNlcjYyMDYxMQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pstratem",
            "html_url": "https://github.com/pstratem",
            "followers_url": "https://api.github.com/users/pstratem/followers",
            "following_url": "https://api.github.com/users/pstratem/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/pstratem/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/pstratem/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
            "organizations_url": "https://api.github.com/users/pstratem/orgs",
            "repos_url": "https://api.github.com/users/pstratem/repos",
            "events_url": "https://api.github.com/users/pstratem/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/pstratem/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19216",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19216",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19216.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19216.patch"
          },
          "closed_at": "2021-08-18T08:00:49Z",
          "created_at": "2020-06-09T03:56:33Z",
          "updated_at": "2022-08-18T18:33:10Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-17T05:06:01Z",
      "updated_at": "2020-06-17T05:06:01Z",
      "source": {
        "issue": {
          "id": 476978200,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzA0Mzk2Nzg2",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16549",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16549/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16549/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16549/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16549",
          "number": 16549,
          "state": "closed",
          "state_reason": null,
          "title": "UI external signer support (e.g. hardware wallet)",
          "body": "Big picture overview in [this gist](https://gist.github.com/Sjors/29d06728c685e6182828c1ce9b74483d).\r\n\r\nThis PR adds GUI support for external signers. It consists of 7 commits on top of #16546 (RPC).\r\n\r\nThe UX isn't amazing - especially the blocking calls - but it works.\r\n\r\nFirst we adds a GUI setting for the signer script (e.g. path to HWI):\r\n\r\n<img width=\"625\" alt=\"Schermafbeelding 2019-08-05 om 19 32 59\" src=\"https://user-images.githubusercontent.com/10217/62483415-e1ff1680-b7b7-11e9-97ca-8d2ce54ca1cb.png\">\r\n\r\nThen we add an external signer checkbox to the wallet creation dialog:\r\n\r\n<img width=\"374\" alt=\"Schermafbeelding 2019-11-07 om 19 17 23\" src=\"https://user-images.githubusercontent.com/10217/68416387-b57ee000-0194-11ea-9730-127d60273008.png\">\r\n\r\nIt's checked by default if HWI detects a device. It also grabs the name. It then creates a fresh wallet and imports the keys.\r\n\r\nYou can verify an address on the device (blocking...):\r\n<img width=\"673\" alt=\"Schermafbeelding 2019-08-05 om 19 29 22\" src=\"https://user-images.githubusercontent.com/10217/62483560-43bf8080-b7b8-11e9-9902-8a036116dc4b.png\">\r\n\r\nSending, including coin selection, Just Works(tm) as long the device is present. It's a bit weird though: the device will prompt for signing first and the QT confirmation dialog appears after.\r\n\r\nExternal signer support is enabled by default when the GUI is configured and Boost::Process is present.",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 11,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16549",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16549",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16549.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16549.patch"
          },
          "closed_at": "2020-06-18T18:13:06Z",
          "created_at": "2019-08-05T17:38:26Z",
          "updated_at": "2022-08-16T17:20:17Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-17T05:08:20Z",
      "updated_at": "2020-06-17T05:08:20Z",
      "source": {
        "issue": {
          "id": 476597057,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzA0MDk3NTEw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16546",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16546/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16546/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16546/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16546",
          "number": 16546,
          "state": "closed",
          "state_reason": null,
          "title": "External signer support - Wallet Box edition",
          "body": "Big picture overview in [this gist](https://gist.github.com/Sjors/29d06728c685e6182828c1ce9b74483d).\r\n\r\nThis PR lets `bitcoind` call an arbitrary command `-signer=<cmd>`, e.g. a hardware wallet driver,  where it can fetch public keys, ask to display an address, and sign a transaction (using PSBT under the hood).\r\n\r\nIt's design to work with https://github.com/bitcoin-core/HWI, which supports multiple hardware wallets. Any command with the same arguments and return values will work. It simplifies the manual procedure described [here](https://github.com/bitcoin-core/HWI/blob/master/docs/bitcoin-core-usage.md).\r\n\r\nUsage is documented in [doc/external-signer.md](\r\nhttps://github.com/Sjors/bitcoin/blob/2019/08/hww-box2/doc/external-signer.md), which also describes what protocol a different signer binary should conform to.\r\n\r\nUse `--enable-external-signer` to opt in, requires Boost::Process:\r\n\r\n```\r\nOptions used to compile and link:\r\n  with wallet     = yes\r\n  with gui / qt   = no\r\n  external signer = yes\r\n```\r\n\r\nIt adds the following RPC methods:\r\n* `enumeratesigners`: asks <cmd> for a list of signers (e.g. devices) and their master key fingerprint\r\n* `signerdisplayaddress <address>`:  asks <cmd> to display an address\r\n\r\nIt enhances the following RPC methods:\r\n* `createwallet`: takes an additional `external_signer` argument and fetches keys from device\r\n* `send`: automatically sends transaction to device and waits \r\n\r\nUsage TL&DR:\r\n* clone HWI repo somewhere and launch `bitcoind -signer=../HWI/hwi.py`\r\n* check if you can see your hardware device: `bitcoin-cli enumeratesigners`\r\n* create wallet and auto import keys `bitcoin-cli createwallet \"hww\" true true \"\" true true true`\r\n* display address on device: `bitcoin-cli signerdisplayaddress ...`\r\n* to spend, use `send` RPC and approve transaction on device\r\n\r\nPrerequisites:\r\n- [x] #21127 load wallet flags before everything else\r\n- [x] #21182 remove mostly pointless BOOST_PROCESS macro\r\n\r\nPotentially useful followups:\r\n- GUI support: bitcoin-core/gui#4\r\n- bumpfee support\r\n- (automatically) verify (a subset of) keys on the device after import, through message signing",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/47",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47/labels",
            "id": 5347322,
            "node_id": "MDk6TWlsZXN0b25lNTM0NzMyMg==",
            "number": 47,
            "state": "closed",
            "title": "22.0",
            "description": "",
            "creator": {
              "login": "MarcoFalke",
              "id": 6399679,
              "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
              "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/MarcoFalke",
              "html_url": "https://github.com/MarcoFalke",
              "followers_url": "https://api.github.com/users/MarcoFalke/followers",
              "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
              "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
              "repos_url": "https://api.github.com/users/MarcoFalke/repos",
              "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 124,
            "created_at": "2020-04-25T00:14:49Z",
            "updated_at": "2021-09-14T07:16:53Z",
            "closed_at": "2021-09-09T12:47:52Z"
          },
          "locked": true,
          "comments": 38,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16546",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16546",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16546.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16546.patch"
          },
          "closed_at": "2021-02-23T16:57:10Z",
          "created_at": "2019-08-04T21:42:31Z",
          "updated_at": "2021-06-11T05:32:48Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-17T23:13:54Z",
      "updated_at": "2020-06-17T23:13:54Z",
      "source": {
        "issue": {
          "id": 640591179,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDM1OTcyNzYx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19310",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19310/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19310/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19310/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19310",
          "number": 19310,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: BerkeleyDatabase make BerkeleyDatabase::Create, CreateMock, and CreateDummy non-static functions",
          "body": "Instead of having `Create`, `CreateMock`, and `CreateDummy` being static functions in `BerkeleyDatabase`, move these to standalone functions in `walletdb.cpp`. This prepares us for having different `WalletDatabase` classes.\r\n\r\nPart of #18971. This was originally one commit but has been split into 3 to make it (hopefully) easier to review.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19310",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19310",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19310.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19310.patch"
          },
          "closed_at": "2020-06-18T20:31:38Z",
          "created_at": "2020-06-17T16:45:33Z",
          "updated_at": "2022-02-15T10:32:43Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-17T23:18:08Z",
      "updated_at": "2020-06-17T23:18:08Z",
      "source": {
        "issue": {
          "id": 640588447,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDM1OTcwNzYy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19308",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19308/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19308/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19308/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19308",
          "number": 19308,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: BerkeleyBatch Handle cursor internally",
          "body": "Instead of returning a Dbc (BDB cursor object) and having the caller deal with the cursor, make BerkeleyBatch handle the cursor internally.\r\n\r\nSplit from #18971\r\n",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19308",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19308",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19308.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19308.patch"
          },
          "closed_at": "2020-07-01T14:00:58Z",
          "created_at": "2020-06-17T16:41:54Z",
          "updated_at": "2022-08-30T14:09:27Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-17T23:37:07Z",
      "updated_at": "2020-06-17T23:37:07Z",
      "source": {
        "issue": {
          "id": 639291435,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDM0OTExMjc3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19292",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19292/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19292/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19292/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19292",
          "number": 19292,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Refactor BerkeleyBatch Read, Write, Erase, and Exists functions into non-template functions",
          "body": "In order to override these later, the specific details of how the Read, Write, Erase, and Exists functions interact with the actual database file need to go into functions that are not templated.\r\n\r\nThe functions `ReadKey`, `WriteKey`, `EraseKey`, and `HasKey` are introduced to handle the actual interaction with the database.\r\n\r\nThis is mostly a moveonly.\r\n\r\nBased on #19290 ",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19292",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19292",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19292.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19292.patch"
          },
          "closed_at": "2020-06-18T14:28:01Z",
          "created_at": "2020-06-16T00:57:22Z",
          "updated_at": "2022-02-15T10:45:48Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3459967806,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQ1OTk2NzgwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3459967806",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T20:37:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3460524388,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQ2MDUyNDM4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3460524388",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T00:39:18Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T02:29:39Z",
      "updated_at": "2020-06-19T02:29:39Z",
      "source": {
        "issue": {
          "id": 641547415,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDM2NzYxNDI4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19325",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19325/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19325/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19325/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19325",
          "number": 19325,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Refactor BerkeleyDatabase to introduce DatabaseBatch abstract class",
          "body": "In order to support alternative database systems, we need to have a generic `Batch` class. This PR adds a `DatabaseBatch` abstract class which is implemented by `BerkeleyBatch`. `DatabaseBatch` is now the class that is used by `WalletBatch` to interact with the database. To be able to get the correct type of `DatabaseBatch`, `BerkeleyDatabase` now has a `MakeBatch` function which returns a newly constructed `std::unique_ptr<DatabaseBatch>`. For `BerkeleyDatabase`, that will be `std::unique_ptr<BerkeleyBatch>`.\r\n\r\nThe `Read`, `Write`, `Erase`, and `Exists` template functions are moved from `BerkeleyBatch`.\r\n\r\nPart of #18971\r\n\r\nRequires #19308 and #19324",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19325",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19325",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19325.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19325.patch"
          },
          "closed_at": "2020-07-14T14:23:14Z",
          "created_at": "2020-06-18T21:02:46Z",
          "updated_at": "2022-02-15T10:33:41Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T02:31:45Z",
      "updated_at": "2020-06-19T02:31:45Z",
      "source": {
        "issue": {
          "id": 641547336,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDM2NzYxMzY0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19324",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19324/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19324/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19324/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19324",
          "number": 19324,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Move BerkeleyBatch static functions to BerkeleyDatabase",
          "body": "The `BerkeleyBatch` class has 4 static functions that operate on `BerkeleyDatabase` or `BerkeleyEnvironment`. It doesn't make sense for these to be standalone nor for them to be static functions. So instead, move them from `BerkeleyBatch` into `BerkeleyDatabase` and make them member functions instead of static.\r\n\r\n`BerkeleyBatch::VerifyEnvironment` and `BerkeleyBatch::VerifyDatabaseFile` are combined into a single `BerkeleyDatabase::Verify` function that operates on that `BerkeleyDatabase` object.\r\n\r\n`BerkeleyBatch::Rewrite` and `BerkeleyBatch::PeriodicFlush` both took a `BerkeleyDatabase` as an argument and did stuff on it. So we just make it a member function so it doesn't need to take a database as an argument.\r\n\r\nPart of #18971",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19324",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19324",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19324.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19324.patch"
          },
          "closed_at": "2020-07-05T22:07:57Z",
          "created_at": "2020-06-18T21:02:38Z",
          "updated_at": "2022-02-15T10:46:16Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T02:40:01Z",
      "updated_at": "2020-06-19T02:40:01Z",
      "source": {
        "issue": {
          "id": 641269415,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDM2NTI0NjE3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19320",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19320/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19320/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19320/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19320",
          "number": 19320,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Replace CDataStream& with CDataStream&& where appropriate",
          "body": "The keys and values are only to be used once because their memory is set\r\nto zero. Make that explicit by moving the bytes into the lower level\r\nmethods.",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19320",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19320",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19320.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19320.patch"
          },
          "closed_at": "2020-07-08T23:03:13Z",
          "created_at": "2020-06-18T14:47:32Z",
          "updated_at": "2022-02-15T10:33:30Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T13:27:51Z",
      "updated_at": "2020-06-19T13:27:51Z",
      "source": {
        "issue": {
          "id": 632032077,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDI4ODI1MzU4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19183",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19183/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19183/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19183/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19183",
          "number": 19183,
          "state": "closed",
          "state_reason": null,
          "title": "[WIP DONOTMERGE] Replace boost with C++17 (std::shared_mutex)",
          "body": "",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 14,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19183",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19183",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19183.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19183.patch"
          },
          "closed_at": "2021-01-12T05:59:31Z",
          "created_at": "2020-06-05T22:49:08Z",
          "updated_at": "2022-08-16T17:11:33Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3462969790,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQ2Mjk2OTc5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3462969790",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T15:36:54Z"
    },
    {
      "event": "added_to_project",
      "id": 3463702218,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQzNDYzNzAyMjE4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3463702218",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T19:46:16Z",
      "project_card": {
        "id": 40413136,
        "url": "https://api.github.com/projects/columns/cards/40413136",
        "project_id": 4755961,
        "project_url": "https://api.github.com/projects/4755961",
        "column_name": "Design"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3464301149,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQ2NDMwMTE0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3464301149",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-20T02:44:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3470015808,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQ3MDAxNTgwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3470015808",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-22T20:20:01Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3473757961,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQ3Mzc1Nzk2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3473757961",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-23T16:19:13Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-23T20:20:13Z",
      "updated_at": "2020-06-23T20:20:13Z",
      "source": {
        "issue": {
          "id": 642289947,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDM3MzUyMDY3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19334",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19334/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19334/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19334/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19334",
          "number": 19334,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Introduce WalletDatabase abstract class",
          "body": "A `WalletDatabase` abstract class is created from `BerkeleyDatabase` and is implemented by `BerkeleyDatabase`. First, to get to the point that this is possible, 4 functions need to be added to `BerkeleyDatabase`: `AddRef`, `RemoveRef`, `Open`, and `Close`.\r\n\r\nFirst the increment and decrement of `mapFileUseCount` is refactored into separate functions `AddRef` and `RemoveRef`.\r\n\r\n`Open` is introduced as a dummy function. This will raise an exception so that it always fails.\r\n\r\n`Close` is refactored from `Flush`. The `shutdown` argument in `Flush` is removed and instead `Flush(true)` is now the `Close` function.\r\n\r\nSplit from #18971\r\n\r\nRequires #19325",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19334",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19334",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19334.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19334.patch"
          },
          "closed_at": "2020-07-23T03:23:14Z",
          "created_at": "2020-06-20T02:21:42Z",
          "updated_at": "2022-02-15T10:46:43Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3503243237,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzUwMzI0MzIzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3503243237",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-01T16:22:41Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-01T17:49:47Z",
      "updated_at": "2020-07-01T17:49:47Z",
      "source": {
        "issue": {
          "id": 647927250,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDQxODMwMzIx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19419",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19419/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19419/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19419/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19419",
          "number": 19419,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: let Listwalletdir do not iterate through our blocksdata.",
          "body": "Fix: While fiddling with wallets, I noticed that if datadir == walltetsdir an unsynced node can become quite unresponsive.\r\n\r\nif no \"wallets\" dir is in datadir ( i.e. exiting old node ) \r\nwe would have iterate trough our own node files\r\nto find wallets, that consumes time and could cause an unresponsive node.\r\n\r\n",
          "user": {
            "login": "Saibato",
            "id": 34917548,
            "node_id": "MDQ6VXNlcjM0OTE3NTQ4",
            "avatar_url": "https://avatars.githubusercontent.com/u/34917548?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Saibato",
            "html_url": "https://github.com/Saibato",
            "followers_url": "https://api.github.com/users/Saibato/followers",
            "following_url": "https://api.github.com/users/Saibato/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Saibato/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Saibato/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Saibato/subscriptions",
            "organizations_url": "https://api.github.com/users/Saibato/orgs",
            "repos_url": "https://api.github.com/users/Saibato/repos",
            "events_url": "https://api.github.com/users/Saibato/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Saibato/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 749416508,
              "node_id": "MDU6TGFiZWw3NDk0MTY1MDg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Up%20for%20grabs",
              "name": "Up for grabs",
              "color": "99a810",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19419",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19419",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19419.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19419.patch"
          },
          "closed_at": "2020-10-16T04:57:12Z",
          "created_at": "2020-06-30T07:12:56Z",
          "updated_at": "2022-02-15T11:15:31Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3517221183,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzUxNzIyMTE4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3517221183",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-06T18:47:56Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-06T19:24:32Z",
      "updated_at": "2020-07-06T19:24:32Z",
      "source": {
        "issue": {
          "id": 651746746,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDQ0OTQyNjEy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19457",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19457/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19457/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19457/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19457",
          "number": 19457,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Cleanup wallettool salvage and walletdb extraneous declarations",
          "body": "Followup to #19324 addressing some comments.\r\n\r\nRemoves the `SalvageWallet` function in wallettool and instead directly calls `RecoverDatabaseFile` as suggested in https://github.com/bitcoin/bitcoin/pull/19324#discussion_r450379596\r\n\r\nRemoves the `LogPrintf`s and `tfm::format`s in `RecoverDatabaseFile` as noted in https://github.com/bitcoin/bitcoin/pull/19324#discussion_r448027237\r\n\r\nRemoves the declarations of `VerifyEnvironment` and `VerifyDatabaseFile` that were forgotten in `walletdb.h` as noted in https://github.com/bitcoin/bitcoin/pull/19324#issuecomment-654389079",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19457",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19457",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19457.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19457.patch"
          },
          "closed_at": "2020-08-14T13:15:10Z",
          "created_at": "2020-07-06T18:46:19Z",
          "updated_at": "2022-02-15T10:47:16Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-07T21:06:18Z",
      "updated_at": "2020-07-07T21:06:18Z",
      "source": {
        "issue": {
          "id": 652547610,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDQ1NTk1Mjk3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19461",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19461/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19461/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19461/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19461",
          "number": 19461,
          "state": "open",
          "state_reason": null,
          "title": "multiprocess: Add bitcoin-gui -ipcconnect option",
          "body": "This PR is part of the [process separation project](https://github.com/bitcoin/bitcoin/projects/10).\r\n\r\n---\r\n\r\n**This is based on #10102 + #19460.** The non-base commits are:\r\n\r\n- [`5f91aa3d8b47` multiprocess: Add bitcoin-gui -ipcconnect option](https://github.com/bitcoin/bitcoin/pull/19461/commits/5f91aa3d8b47cee97e625c3b5689a37dbd941eff)\r\n\r\n---\r\n\r\nBuilding on #10102, this adds an `-ipcconnect` option to `bitcoin-gui` that connects the GUI to an existing `bitcoin-node` process already running in the background instead of spawning a new `bitcoin-node` process. This allows the GUI to be started and stopped independently of the node. By default with this change, `bitcoin-gui` will check if a `<datadir>/sockets/node.sock` socket exists and try to connect to that. If that doesn't work, it will spawn a new node process and start up the same way it did before this PR.\r\n\r\nThe default `bitcoin-gui` connect option is `-ipcconnect=auto`, which tries to connect if possible as described above, and spawns a new `bitcoin-node` process if not possible. Other supported options are `-noipcconnect` to never connect to an existing node and always spawn a new one, `-ipcconnect` to require a connection and fail if it can't be established, and `-ipcconnect=unix:<socket>` to require a connection and use a custom socket path.\r\n\r\nWith this PR, basic functionality works and gui instances can connect and disconnect from a running node. But there are rough edges: If a gui process doesn't shut down cleanly, the node can see unhandled IpcExceptions, and if node command line options are passed to `bitcoin-gui` and `bitcoin-gui` connects to an exiting bitcoin-node process instead of spawning a new one, the node options will be silently ignored. \r\n\r\nThese changes require multiprocess support and this PR has no effect unless bitcoin is configured with `--enable-multiprocess` as described in [doc/multiprocess.md](https://github.com/bitcoin/bitcoin/blob/master/doc/multiprocess.md)",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19461",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19461",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19461.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19461.patch"
          },
          "created_at": "2020-07-07T19:00:11Z",
          "updated_at": "2023-05-30T16:04:49Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-07T21:07:17Z",
      "updated_at": "2020-07-07T21:07:17Z",
      "source": {
        "issue": {
          "id": 652543635,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDQ1NTkyMDUz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19460",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19460/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19460/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19460/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19460",
          "number": 19460,
          "state": "open",
          "state_reason": null,
          "title": "multiprocess: Add bitcoin-wallet -ipcconnect option",
          "body": "This PR is part of the [process separation project](https://github.com/bitcoin/bitcoin/projects/10).\r\n\r\n---\r\n\r\n**This is based on #10102.** The non-base commits are:\r\n\r\n- [`bbefbd3c199b` multiprocess: Add -ipcconnect and -ipcbind options](https://github.com/bitcoin/bitcoin/pull/19460/commits/bbefbd3c199b189188d6427b4564b17477c6d50e)\r\n\r\n---\r\n\r\nBuilding on #10102, this adds an `-ipcconnect` option to `bitcoin-wallet` and an `-ipcbind` option to `bitcoin-node` (both enabled by default in multiprocess builds) so bitcoin node will listen on a `<datadir>/sockets/node.sock` unix socket, and `bitcoin-wallet` will connect to it.\r\n\r\nThe idea is that `bitcoin-wallet` can be extended in the future to have some online functionality. For example, there could be a `bitcoin-wallet sync` command that will update balances and sync latest transactions to an unloaded wallet, or a `bitcoin-wallet serve` subcommand that loads a wallet and serves RPC requests, or a `bitcoin-wallet shell` subcommand that allows running RPC methods interactively like the GUI console, or just general support for `bitcoin-wallet <rpc method> <rpc params>` invocations suggested https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-455187379.\r\n\r\nThis PR is small and doesn't do much. The only visible change is that `bitcoin-wallet` now checks whether a node socket exists on startup and prints \"Connected to IPC address\" if it can connect it it.\r\n\r\nThe default `bitcoin-wallet` connect option is `-ipcconnect=auto`, which connects if possible as described above, and proceeds offline if not possible. Other supported options are `-noipcconnect` to disable ipc, `-ipcconnect` to require a connection and fail if it can't be established, and `-ipcconnect=unix:<socket>` to require a connection and use a custom socket path.\r\n\r\nThese changes require multiprocess support and this PR has no effect unless bitcoin is configured with `--enable-multiprocess` as described in [doc/multiprocess.md](https://github.com/bitcoin/bitcoin/blob/master/doc/multiprocess.md)\r\n",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19460",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19460",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19460.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19460.patch"
          },
          "created_at": "2020-07-07T18:53:19Z",
          "updated_at": "2023-05-30T16:04:55Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-08T11:26:46Z",
      "updated_at": "2020-07-08T11:26:46Z",
      "source": {
        "issue": {
          "id": 653194519,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDQ2MTU4NTY3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19466",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19466/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19466/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19466/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19466",
          "number": 19466,
          "state": "closed",
          "state_reason": null,
          "title": "Use operator/ in fs::absolute to prepare for C++17",
          "body": "This PR contains only two commits cherry-picked from #19245 as suggested [here](https://github.com/bitcoin/bitcoin/pull/19245#issuecomment-642735541). Motivations for the changes are in the commit messages.\r\n\r\nCheers!",
          "user": {
            "login": "kiminuo",
            "id": 58662979,
            "node_id": "MDQ6VXNlcjU4NjYyOTc5",
            "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kiminuo",
            "html_url": "https://github.com/kiminuo",
            "followers_url": "https://api.github.com/users/kiminuo/followers",
            "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
            "organizations_url": "https://api.github.com/users/kiminuo/orgs",
            "repos_url": "https://api.github.com/users/kiminuo/repos",
            "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/kiminuo/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19466",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19466",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19466.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19466.patch"
          },
          "closed_at": "2020-07-09T10:40:14Z",
          "created_at": "2020-07-08T10:52:23Z",
          "updated_at": "2022-02-15T10:46:43Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3530502486,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzUzMDUwMjQ4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3530502486",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-09T16:24:33Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-11T20:15:00Z",
      "updated_at": "2020-07-11T20:15:00Z",
      "source": {
        "issue": {
          "id": 642290988,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDM3MzUyODQ5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19335",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19335/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19335/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19335/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19335",
          "number": 19335,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Cleanup and separate BerkeleyDatabase and BerkeleyBatch",
          "body": "`BerkeleyBatch` and `BerkeleyDatabase` are kind of messy. The goal of this is to clean up them up so that they are logically separated.\r\n\r\n`BerkeleyBatch` currently handles the creation of the `BerkeleyDatabase`'s `Db` handle. This is instead moved into `BerkeleyDatabase` and is called by `BerkeleyBatch`.\r\n\r\nInstead of having `BerkeleyEnvironment` track each database's usage, have `BerkeleyDatabase` track this usage itself with the `m_refcount` variable that is present in `WalletDatabase`.\r\n\r\nLastly, instead of having each `BerkeleyEnvironment` store the fileids of the databases open in it, have a global `g_fileids` to track those fileids. We were already checking fileid uniqueness globally (by checking the fileids in every environment when opening a database) so it's cleaner to do this with a global variable.\r\n\r\nAll of these changes allow us to make `BerkeleyBatch` and `BerkeleyDatabase` no longer be friend classes.\r\n\r\nThe diff of this PR is currently the same as in ##18971\r\n\r\nRequires #19334",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19335",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19335",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19335.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19335.patch"
          },
          "closed_at": "2020-07-29T16:24:54Z",
          "created_at": "2020-06-20T02:29:17Z",
          "updated_at": "2022-02-15T10:46:40Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-13T05:52:52Z",
      "updated_at": "2020-07-13T05:52:52Z",
      "source": {
        "issue": {
          "id": 655547595,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDQ4MDA3ODIz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19502",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19502/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19502/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19502/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19502",
          "number": 19502,
          "state": "closed",
          "state_reason": null,
          "title": "Bugfix: Wallet: Soft-fail exceptions within ListWalletDir file checks",
          "body": "Previously, an exception would be thrown, which could kill the node in some circumstances.\r\n\r\nIncludes test changes to cause failure.\r\n\r\nReview with `?w=1`",
          "user": {
            "login": "luke-jr",
            "id": 1095675,
            "node_id": "MDQ6VXNlcjEwOTU2NzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/luke-jr",
            "html_url": "https://github.com/luke-jr",
            "followers_url": "https://api.github.com/users/luke-jr/followers",
            "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
            "organizations_url": "https://api.github.com/users/luke-jr/orgs",
            "repos_url": "https://api.github.com/users/luke-jr/repos",
            "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/luke-jr/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/45",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45/labels",
            "id": 4914019,
            "node_id": "MDk6TWlsZXN0b25lNDkxNDAxOQ==",
            "number": 45,
            "state": "closed",
            "title": "0.21.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 132,
            "created_at": "2019-12-09T08:39:58Z",
            "updated_at": "2021-01-15T19:50:53Z",
            "closed_at": "2021-01-15T19:50:53Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 11,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19502",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19502",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19502.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19502.patch"
          },
          "closed_at": "2020-11-12T00:27:53Z",
          "created_at": "2020-07-13T03:05:49Z",
          "updated_at": "2022-02-15T10:37:51Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3544706691,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzU0NDcwNjY5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3544706691",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-14T15:28:54Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-20T08:16:23Z",
      "updated_at": "2020-07-20T08:16:23Z",
      "source": {
        "issue": {
          "id": 661506016,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDUzMTcwODM0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19558",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19558/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19558/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19558/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19558",
          "number": 19558,
          "state": "closed",
          "state_reason": null,
          "title": "build: split pthread flags out of ldflags and dont use when building libconsensus",
          "body": "TLDR: Split pthread flags out of ldflags, and stop using them when building libconsensus.\r\n\r\nBuilding libconsensus on Linux using Clang currently warns. i.e:\r\n```bash\r\n./autogen.sh\r\n./configure --disable-tests --disable-bench --with-utils=no --with-daemon=no --with-gui=no --disable-wallet --with-libs=yes CC=clang CXX=clang++\r\nmake V=1 -j6\r\n... -Wl,-z -Wl,relro -Wl,-z -Wl,now   -pthread -Wl,-soname -Wl,libbitcoinconsensus.so.0 -o .libs/libbitcoinconsensus.so.0.0.0\r\nclang: warning: argument unused during compilation: '-pthread' [-Wunused-command-line-argument]\r\nclang: warning: argument unused during compilation: '-pthread' [-Wunused-command-line-argument]\r\n```\r\n\r\nBesides wanting to quiet the warnings, after digging into this it seemed we could clean up how we are passing around the pthread flags. I also learnt a bit more about how libtools builds shared libraries, and that passing `-pthread` on the link line wouldn't be enough to link against pthreads anyways, due to libtools usage of -nostdlib (see [related discussion where we build DLLs](https://github.com/bitcoin/bitcoin/blob/476436b2dec254bb988f8c7a6cbec1d7bb7cecfd/configure.ac#L603)).\r\n\r\nThis can be demonstrated with a patch to libconsensus:\r\n```patch\r\ndiff --git a/src/script/bitcoinconsensus.cpp b/src/script/bitcoinconsensus.cpp\r\nindex 15e204062..10bf3582f 100644\r\n--- a/src/script/bitcoinconsensus.cpp\r\n+++ b/src/script/bitcoinconsensus.cpp\r\n@@ -10,6 +10,8 @@\r\n #include <script/interpreter.h>\r\n #include <version.h>\r\n \r\n+#include <pthread.h>\r\n+\r\n namespace {\r\n \r\n /** A class that deserializes a single CTransaction one time. */\r\n@@ -127,3 +129,10 @@ unsigned int bitcoinconsensus_version()\r\n     // Just use the API version for now\r\n     return BITCOINCONSENSUS_API_VER;\r\n }\r\n+\r\n+void *func_pthread(void *x) { return x; }\r\n+\r\n+void f() {\r\n+\tpthread_t t;\r\n+\tpthread_create(&t,0,func_pthread,0);\r\n+}\r\n```\r\n\r\nAfter building,  you'll find you have a `libbitcoinconsensus.so` using pthread symbols, but which isn't linked against libpthread:\r\n```bash\r\nldd -r src/.libs/libbitcoinconsensus.so\r\n\tlinux-vdso.so.1 (0x00007ffe49378000)\r\n\tlibstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f553cee7000)\r\n\tlibm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f553cda2000)\r\n\tlibgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f553cd88000)\r\n\tlibc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f553cbc5000)\r\n\t/lib64/ld-linux-x86-64.so.2 (0x00007f553d15d000)\r\nundefined symbol: pthread_create\t(src/.libs/libbitcoinconsensus.so)\r\n```\r\n\r\nThis libtool behaviour has been known about for some time, i.e this [thread from 2005](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=25460),  describes the same issue. The suggestion from libtool maintainers at the time is to add `-lpthread` to LDFLAGS.\r\n\r\nAlso worth noting is that some of the users in those threads were also using the `AX_PTHREADS` macro, same as us, to determine how to compile with/link against pthreads. This macro has [recently been updated](https://git.savannah.gnu.org/gitweb/?p=autoconf-archive.git;a=commitdiff;h=2fb904589643eb6ca6122f834891b58d1d51b347), with reference to this issue. You can compare the output from the version we currently use, to the new version:\r\n```bash\r\n# our ax_pthread macro:\r\n  PTHREAD_CFLAGS = -pthread\r\n  PTHREAD_LIBS  = \r\n  PTHREAD_CC    = gcc / clang\r\n\r\n# the new ax_pthread macro\r\n  PTHREAD_CFLAGS = -pthread\r\n  PTHREAD_LIBS  = -lpthread\r\n  PTHREAD_CC    = gcc / clang\r\n```\r\n\r\nNote that as part of this PR I've also added `PTHREAD_LIBS` to the split out flags. Although we weren't using it anywhere previously (and wouldn't have seemed to matter for the most part, given it was likely empty for most builders), the macro assumes it's use. i.e:\r\n> NOTE: You are assumed to not only compile your program with these flags,\r\n> but also to link with them as well. For example, you might link with\r\n> $PTHREAD_CC $CFLAGS $PTHREAD_CFLAGS $LDFLAGS ... $PTHREAD_LIBS $LIBS",
          "user": {
            "login": "fanquake",
            "id": 863730,
            "node_id": "MDQ6VXNlcjg2MzczMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fanquake",
            "html_url": "https://github.com/fanquake",
            "followers_url": "https://api.github.com/users/fanquake/followers",
            "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
            "organizations_url": "https://api.github.com/users/fanquake/orgs",
            "repos_url": "https://api.github.com/users/fanquake/repos",
            "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/fanquake/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 12,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19558",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19558",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19558.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19558.patch"
          },
          "closed_at": "2020-09-15T11:04:56Z",
          "created_at": "2020-07-20T08:01:22Z",
          "updated_at": "2022-02-15T10:47:33Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3578328962,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzU3ODMyODk2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3578328962",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-23T03:49:27Z"
    },
    {
      "event": "ready_for_review",
      "id": 3578329605,
      "node_id": "MDE5OlJlYWR5Rm9yUmV2aWV3RXZlbnQzNTc4MzI5NjA1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3578329605",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-23T03:49:56Z"
    },
    {
      "event": "commented",
      "id": 662805756,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2MjgwNTc1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/662805756",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-23T03:50:24Z",
      "updated_at": "2020-07-23T03:50:24Z",
      "author_association": "MEMBER",
      "body": "Since #19334 has been merged, this is now ready for review.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-662805756",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "reviewed",
      "id": 455162194,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MTYyMTk0",
      "url": null,
      "actor": null,
      "commit_id": "6e7ef52e359e55bc82a30207a701995f0ca255d7",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Started reviewing commit by commit (will update list below with progress), but also have looked over the final diff. Change is surprisingly simple and clean.\r\n\r\nIf it's available, I'd be curious to see a diff of the additional changes that switch `wallet.dat` to `wallet.sqlite` and how complicated they are. Do we know how current & previous versions of bitcoins react if they load a `wallet.dat` file that doesn't contain berkeley db data? Hopefully they show a sensible error instead of crashing obscurely or doing something worse like modifying the file.\r\n\r\n- [X] b64e40310742e3975ae704a801ccafa73d8617bf wallet: Don't Verify if database location doesn't exist (1/31)\r\n- [X] 6e7ef52e359e55bc82a30207a701995f0ca255d7 Change WalletLocation::Exists to check for wallet file existence (2/31)\r\n- [X] 31243f5482bb1c8a71affbe7ced6653a09bd6829 Add libsqlite3 (3/31)\r\n- [X] 786f79916a09727404de376882e4bf704f620362 Add sqlite to travis and depends (4/31)\r\n- [X] 88e1bacfb7c5e9633239a35ad29cd71eb6f473fd Add SQLiteDatabase and SQLiteBatch dummy classes (5/31)\r\n- [X] b2f2e7171861fe2998f2c27af44b65b0e1f558aa Implement SQLiteDatabaseVersion (6/31)\r\n- [X] 08847ca4de58c112da4b6455230f7b454afa543c Constructors, destructors, and relevant private fields for SQLiteDatabase/Batch (7/31)\r\n- [X] d038d04a4e3e0522a51cf0d39110749f8395f61a Introduce g_file_paths (8/31)\r\n- [X] b52981b011d449d9374aabc54ae42d2ca9107e05 Add/Remove m_file_path to/from g_file_paths in con/destructor (9/31)\r\n- [X] a9a07df70f2ea2ca85f5680349194127eef9739b Implement IsSQLiteWalletLoaded (10/31)\r\n- [X] 5c78c9094a0158e4d466b696a3bbbcbd35b51b15 Initialize and Shutdown sqlite3 globals (11/31)\r\n- [ ] a321a2641ec99903a65ed313b133204e44e073a1 Setup SQLite error logging (12/31)\r\n- [ ] 3e2ce083f1e538ae4e7d442a2195f811ffa75e3b Implement SQLiteDatabase::Open (13/31)\r\n- [ ] bce13091a4f3160ac78235bc9bb5cf90d50fa125 Implement SQLiteDatabase::Close (14/31)\r\n- [ ] a9a2b2bec632c1e3aa27bea735ebe1b344914b80 Implement SQLiteBatch::Close (15/31)\r\n- [ ] 29f7a044972a92c2f4c988e10fc5e855cfa25b9a sqlitedb: Create and lock the wallet directory (16/31)\r\n- [ ] 3e2423fa7b9fccf56a7d53c4fecb08825f9e55df Implement SQLiteDatabase::RemoveRef and AddRef and add m_ref_count (17/31)\r\n- [ ] 18d921ffb93e5b2b2c3509fd689f8b51cd4a8347 Add SetupSQLStatements (18/31)\r\n- [ ] 071d7326703ee5eccd9aa33a6cad9f6787aa2e5d Implement SQLiteBatch::ReadKey, WriteKey, EraseKey, and HasKey (19/31)\r\n- [ ] 8b6f00df0e9a4c6411124910f09c8690fcab7e3e Implement SQLiteBatch::StartCursor, ReadAtCursor, and CloseCursor (20/31)\r\n- [ ] feb32f64d408da672b0c5249c94fca2b614e6ad4 Implement SQLiteDatabase::Backup (21/31)\r\n- [ ] 92aebab51bf03587c3f389771b8da808e5a1d675 Implement SQLiteDatabase::TxnBegin, TxnCommit, and TxnAbort (22/31)\r\n- [ ] ace969a38c1fd5d3c03a82bb36b7c20e641050e8 Implement SQLiteDatabase::Flush, PeriodicFlush, and ReloadDbEnv as No-ops (23/31)\r\n- [ ] 75ca8bac4db69fed4ac04ec9484fc94988e13dac Implement SQLiteDatabase::Rewrite (24/31)\r\n- [ ] cf8873757806a65868d0452545866df7fba8a54c Implement SQLiteDatabase::Verify (25/31)\r\n- [ ] 0ec07243dd8168b4d8f32692d9340085d17d46e4 Implement SQLiteDatabase::MakeBatch (26/31)\r\n- [ ] 3d50995df3b0086caec3463f06a639d53de7a4f3 Add StorageType enum (27/31)\r\n- [ ] 92727778ac3afda03aaeb2ad8ac09364df006dc8 Determine wallet file type based on file magic (28/31)\r\n- [ ] cb3ee8971120989be66066605fa03ed2c56e0bd6 walletutil: Wallets can also be sqlite (29/31)\r\n- [ ] 5ec9a9be158556aa94da4d8d2224776baab05044 Have CreateWalletDatabase functions take the StorageType (30/31)\r\n- [ ] ed80553046e47a96be27c8e12f69e98f4e8d3d74 Use SQLite for descriptor wallets (31/31)",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-455162194",
      "submitted_at": "2020-07-24T20:59:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "commented",
      "id": 663738278,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzczODI3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663738278",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-24T21:17:33Z",
      "updated_at": "2020-07-24T21:17:33Z",
      "author_association": "MEMBER",
      "body": "> If it's available, I'd be curious to see a diff of the additional changes that switch `wallet.dat` to `wallet.sqlite` and how complicated they are.\r\n\r\nhttps://github.com/achow101/bitcoin/tree/sqlite-wallet-w-rename is a copy of the original branch with the rename. It's a bit outdated, but it should give you an idea of what was needed for renaming.\r\n\r\n  > Do we know how current & previous versions of bitcoins react if they load a `wallet.dat` file that doesn't contain berkeley db data? Hopefully they show a sensible error instead of crashing obscurely or doing something worse like modifying the file.\r\n\r\nThe wallets won't be listed by `listwalletdir` as the bdb magic is checked in that function. BDB itself will error with `Not a Berkeley DB` (or something like that) when it tries to open the sqlite file and that error makes it's way to the user.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-663738278",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-26T22:18:03Z",
      "updated_at": "2020-07-26T22:18:03Z",
      "source": {
        "issue": {
          "id": 575726877,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzgzODM3MDY2",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18261",
          "number": 18261,
          "state": "closed",
          "state_reason": null,
          "title": "Erlay: bandwidth-efficient transaction relay protocol",
          "body": "This is an implementation of [Erlay](https://arxiv.org/abs/1905.10518), using primitives in the BIP-330 (see the updated spec [here](https://github.com/naumenkogs/bips/blob/bip_0330_updates/bip-0330.mediawiki)). Please refer to these two to understand the design. My talk on the topic is [here](https://youtu.be/YxsjdIl0034?t=670).\r\n\r\nErlay uses both flooding (announcing using INV messages to all peers) and reconciliation to announce transactions. Flooding is expensive, so Erlay seeks to use it sparingly and in strategic locations - only well-connected publicly reachable nodes flood transactions to other publicly reachable nodes via outbound connections. Since every unreachable node is directly connected to several reachable nodes, this policy ensures that a transaction is quickly propagated to be within one hop from most of the nodes in the network.\r\n\r\nAll transactions not propagated through flooding are propagated through efficient set reconciliation. To do this, every node keeps a reconciliation set for each peer, in which transactions are placed which would have been announced using INV messages absent this protocol. Every 2 seconds every node chooses a peer from its outbound connections in a predetermined order to reconcile with, resulting in both sides learning the transactions known to the other side. After every reconciliation round, the corresponding reconciliation set is cleared.\r\n\r\nI think both paper and the BIP motives the changes, but I'll mention them briefly once again here:\r\n- save 40% of the bandwidth consumed by a node\r\n- increase network connectivity for almost no bandwidth or latency cost\r\n- improves privacy as a side-effect\r\n\r\nObviously looking for review, let's try to start with a high-level concerns, and keep nits for later.\r\n\r\nP.S.\r\nPlease don't be scared of 8,000 LOC added. 7,000 of them is minisketch added as a subtree.\r\n\r\nP.P.S.\r\nMy experiments of running this code live (slightly outdated) with a script to replicate the experiment: [here1](https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-599241490) and [here2](https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-600388543).\r\n",
          "user": {
            "login": "naumenkogs",
            "id": 7975071,
            "node_id": "MDQ6VXNlcjc5NzUwNzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/naumenkogs",
            "html_url": "https://github.com/naumenkogs",
            "followers_url": "https://api.github.com/users/naumenkogs/followers",
            "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
            "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
            "repos_url": "https://api.github.com/users/naumenkogs/repos",
            "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 38,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18261",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18261.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18261.patch"
          },
          "closed_at": "2021-03-23T22:51:05Z",
          "created_at": "2020-03-04T20:01:31Z",
          "updated_at": "2022-08-16T17:22:24Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3587575125,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzU4NzU3NTEyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3587575125",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T00:47:26Z"
    },
    {
      "event": "labeled",
      "id": 3587598475,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM1ODc1OTg0NzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3587598475",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T01:04:16Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3587614359,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzU4NzYxNDM1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3587614359",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T01:13:00Z"
    },
    {
      "event": "unlabeled",
      "id": 3587854206,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzU4Nzg1NDIwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3587854206",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T03:09:04Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 3598935304,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM1OTg5MzUzMDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3598935304",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8994145cb336862a51151cbaa2e222e3e2a5be96",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/8994145cb336862a51151cbaa2e222e3e2a5be96",
      "created_at": "2020-07-29T13:01:58Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-29T13:21:37Z",
      "updated_at": "2020-07-29T13:21:37Z",
      "source": {
        "issue": {
          "id": 667840772,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDU4NDM1Nzg0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19619",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19619/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19619/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19619/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19619",
          "number": 19619,
          "state": "closed",
          "state_reason": null,
          "title": "Remove wallet.dat path handling from wallet.cpp, rpcwallet.cpp",
          "body": "Get rid of file path handling in wallet application code and move it down to database layer.\r\n\r\nThere is no change in behavior except for some changed error messages.\r\n\r\nMotivation for this change is to make code more understandable, but also to prepare for adding SQLite support in #19077 so SQLite implementation can be contained at the database layer and wallet loading code does not need to become more complicated.",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 15,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19619",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19619",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19619.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19619.patch"
          },
          "closed_at": "2020-09-06T23:46:13Z",
          "created_at": "2020-07-29T13:21:36Z",
          "updated_at": "2022-02-15T10:35:41Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "added_to_project",
      "id": 3605353634,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQzNjA1MzUzNjM0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3605353634",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-30T19:03:05Z",
      "project_card": {
        "id": 42831282,
        "url": "https://api.github.com/projects/columns/cards/42831282",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "referenced",
      "id": 3606190548,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2MDYxOTA1NDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3606190548",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2553091ce53a78737686e2516ac1fac8f68168c1",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/2553091ce53a78737686e2516ac1fac8f68168c1",
      "created_at": "2020-07-30T23:18:58Z"
    },
    {
      "event": "referenced",
      "id": 3606190579,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2MDYxOTA1Nzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3606190579",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0e4cb50e3c86c3093b18fe2dfb47f563db32afef",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/0e4cb50e3c86c3093b18fe2dfb47f563db32afef",
      "created_at": "2020-07-30T23:19:00Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-04T00:37:23Z",
      "updated_at": "2020-08-04T00:37:23Z",
      "source": {
        "issue": {
          "id": 672319309,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDYyMzc3MzU3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19653",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19653/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19653/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19653/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19653",
          "number": 19653,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Replace -zapwallettxes with zapwallettxes RPC",
          "body": "`-zapwallettxes` is known to not work with multiwallet and is currently disabled if multiple wallets are being loaded.\r\n\r\nThis PR removes the `-zapwallettxes` startup option and replaces its functionality with a `zapwallettxes` RPC command. This RPC does almost the same thing that the startup command did in that it removes all of the transactions from the target wallet. A blockchain rescan can optionally be triggered, as well as a mempool rescan. The default is to rescan the blockchain but not the mempool.\r\n\r\nHowever a large difference is that `-zapwallettxes` would prevent the mempool from being loaded (#10330) but the RPC does not clear the mempool. However this does mean that the usefulness of this is questionable as the unconfirmed transactions that are being removed from the wallet would still appear in the mempool. The original behavior can be replicated by doing `zapwallettxes` and restarting with `-persistmempool=0`.\r\n\r\nAlso tests are updated to use the new RPC.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19653",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19653",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19653.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19653.patch"
          },
          "closed_at": "2020-08-12T16:31:27Z",
          "created_at": "2020-08-03T20:19:24Z",
          "updated_at": "2022-02-15T10:59:58Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 459654361,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NjU0MzYx",
      "url": null,
      "actor": null,
      "commit_id": "e68484878b539692be5030b8941fd3fe81d79870",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-459654361",
      "submitted_at": "2020-08-04T20:44:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3622119264,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzYyMjExOTI2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3622119264",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-04T21:38:03Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3622250407,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzYyMjI1MDQwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3622250407",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-04T22:27:03Z"
    },
    {
      "event": "referenced",
      "id": 3622815654,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2MjI4MTU2NTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3622815654",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9b15bf35d907aacf59bb7653f1014dc5160642e9",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/9b15bf35d907aacf59bb7653f1014dc5160642e9",
      "created_at": "2020-08-05T03:10:47Z"
    },
    {
      "event": "labeled",
      "id": 3624377701,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM2MjQzNzc3MDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3624377701",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-05T12:10:57Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3625421701,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzYyNTQyMTcwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3625421701",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-05T16:11:42Z"
    },
    {
      "event": "unlabeled",
      "id": 3625485039,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzYyNTQ4NTAzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3625485039",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-05T16:26:07Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-06T00:17:58Z",
      "updated_at": "2020-08-06T00:17:58Z",
      "source": {
        "issue": {
          "id": 673835288,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDYzNjMyODU3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19671",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19671/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19671/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19671/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19671",
          "number": 19671,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Remove -zapwallettxes",
          "body": "It's not clear what use there is to keeping `-zapwallettxes` given that it's intended usage has been superseded by `abandontransaction`. So this removes it outright.\r\n\r\nAlternative to #19700",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19671",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19671",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19671.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19671.patch"
          },
          "closed_at": "2020-09-01T01:27:25Z",
          "created_at": "2020-08-05T20:44:05Z",
          "updated_at": "2022-08-16T17:11:19Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 3634098104,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2MzQwOTgxMDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3634098104",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d5c8363b2e7cd4d13ba39dd1cacdfcc4d8e1db97",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/d5c8363b2e7cd4d13ba39dd1cacdfcc4d8e1db97",
      "created_at": "2020-08-07T17:23:45Z"
    },
    {
      "event": "referenced",
      "id": 3634098195,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2MzQwOTgxOTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3634098195",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d5030015070c216a838344285b3c4342df73cb06",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/d5030015070c216a838344285b3c4342df73cb06",
      "created_at": "2020-08-07T17:23:47Z"
    },
    {
      "event": "reviewed",
      "id": 463507539,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNTA3NTM5",
      "url": null,
      "actor": null,
      "commit_id": "787047133d22f014bea2646d3b23cd18801f19c2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Reviewed down to b459ada6fd3a5a2ba53cdd132a66ecdf4a574033\r\n\r\n> I think probably build reviewers will want a --with-sqlite configure option to allow sqlite to be disabled in the build even if it is present in the system.\r\n\r\nConversely, requiring sqlite3 is overkill until descriptor wallets are the default. I suggest disabling descriptor wallets when sqlite3 is either missing or opted out. Later on we'll need similar code to allow opting out of BDB (disabling legacy wallets).\r\n\r\n> Would suggest splitting this commit and other build and depends and travis related commits into a separate build PR so it can get feedback from bitcoin build aficionados (and so this PR can more approachable for regular and wallet reviewers).\r\n\r\nWorth considering, from my experience with #15382. In that case you can also extract the first two commits and put them in a trivial refactor PR, to make number go down :-)\r\n\r\nDepends could also have an opt-out, but no strong feelings there, as long as you can opt-out in the configure phase.\r\n\r\nI would also seperate the CI commit from the depends stuff.\r\n\r\nShould we constrain the sqlite3 minimum version, perhaps based on their [CVE list](https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=sqlite3)?",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-463507539",
      "submitted_at": "2020-08-07T18:43:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "reviewed",
      "id": 463662644,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNjYyNjQ0",
      "url": null,
      "actor": null,
      "commit_id": "fe790158c8a6c2019ebcb97b6637e1c069b76ed6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I took a shot at rebasing this PR on top of #19619: \r\n\r\n- https://github.com/bitcoin/bitcoin/compare/master...ryanofsky:pr/sql ([branch](https://github.com/ryanofsky/bitcoin/commits/pr/sql))\r\n\r\nChange is essentially the same but simpler and I could drop a number of commits. Also changing the database filename from `wallet.dat` to `wallet.sqlite` or something else is a one-line change (excluding tests).",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-463662644",
      "submitted_at": "2020-08-08T01:32:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "referenced",
      "id": 3640641913,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2NDA2NDE5MTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3640641913",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "39866a9302aded7eb5e2844cb409ae8dfc641850",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/39866a9302aded7eb5e2844cb409ae8dfc641850",
      "created_at": "2020-08-10T22:01:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3640641940,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzY0MDY0MTk0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3640641940",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-10T22:01:21Z"
    },
    {
      "event": "commented",
      "id": 671615437,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTYxNTQzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671615437",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-10T22:11:20Z",
      "updated_at": "2020-08-10T22:11:20Z",
      "author_association": "MEMBER",
      "body": "I've taken @ryanofsky's rebase and made a few changes. Notably I removed the filename change and the related tests. Also I made a slight change to CreateWallet` so that the GUI would also make sqlite wallets for descriptor wallets.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-671615437",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "mentioned",
      "id": 3640668142,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY0MDY2ODE0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3640668142",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-10T22:11:20Z"
    },
    {
      "event": "subscribed",
      "id": 3640668143,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2NDA2NjgxNDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3640668143",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-10T22:11:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3640827888,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzY0MDgyNzg4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3640827888",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-10T23:25:03Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3644096090,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzY0NDA5NjA5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3644096090",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-11T16:47:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3649828876,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzY0OTgyODg3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3649828876",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-12T23:43:33Z"
    },
    {
      "event": "labeled",
      "id": 3656604998,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM2NTY2MDQ5OTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3656604998",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-14T15:03:14Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 3656803923,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2NTY4MDM5MjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3656803923",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "72eaf4c29dd8d222b518f78949542757694888ff",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/72eaf4c29dd8d222b518f78949542757694888ff",
      "created_at": "2020-08-14T15:58:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3656803935,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzY1NjgwMzkzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3656803935",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-14T15:58:37Z"
    },
    {
      "event": "referenced",
      "id": 3656943984,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2NTY5NDM5ODQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3656943984",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "134f1807e51a8b64c813bf994c8752d55ff3469f",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/134f1807e51a8b64c813bf994c8752d55ff3469f",
      "created_at": "2020-08-14T16:41:38Z"
    },
    {
      "event": "referenced",
      "id": 3656944081,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2NTY5NDQwODE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3656944081",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "717c4b290f3f9761175b10fdc5c488bb499ba5de",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/717c4b290f3f9761175b10fdc5c488bb499ba5de",
      "created_at": "2020-08-14T16:41:40Z"
    },
    {
      "event": "unlabeled",
      "id": 3657030030,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzY1NzAzMDAzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3657030030",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-14T17:08:26Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 3661691098,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2NjE2OTEwOTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3661691098",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "db66aae6bafc4a3c5734f0596b1b92b25ff1a8c4",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/db66aae6bafc4a3c5734f0596b1b92b25ff1a8c4",
      "created_at": "2020-08-17T12:45:38Z"
    },
    {
      "event": "referenced",
      "id": 3661691222,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2NjE2OTEyMjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3661691222",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "44f3cf2ba538259ad1f7b02322e5dd96adca1bf1",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/44f3cf2ba538259ad1f7b02322e5dd96adca1bf1",
      "created_at": "2020-08-17T12:45:40Z"
    },
    {
      "event": "removed_from_project",
      "id": 3676714500,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50MzY3NjcxNDUwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3676714500",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-20T19:07:16Z",
      "project_card": {
        "id": 42831282,
        "url": "https://api.github.com/projects/columns/cards/42831282",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-20T20:04:59Z",
      "updated_at": "2020-08-20T20:04:59Z",
      "source": {
        "issue": {
          "id": 680483275,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDY5MDMzNDMy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19754",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19754/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19754/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19754/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19754",
          "number": 19754,
          "state": "closed",
          "state_reason": null,
          "title": "wallet, gui: Reload previously loaded wallets on startup",
          "body": "Enable the GUI to also use the load_on_startup feature. Wallets loaded in the GUI always have load_on_startup=true. When they are unloaded from the GUI, load_on_startup=false.\r\n\r\nTo facilitate this change, UpdateWalletSetting is moved into the wallet module and called from within LoadWallet, RemoveWallet, and Createwallet. This change does not actually touch the GUI code but rather the wallet functions that are shared between the GUI and RPC.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19754",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19754",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19754.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19754.patch"
          },
          "closed_at": "2020-09-03T16:25:16Z",
          "created_at": "2020-08-17T19:44:41Z",
          "updated_at": "2022-02-15T11:00:55Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-20T20:39:39Z",
      "updated_at": "2020-08-20T20:39:39Z",
      "source": {
        "issue": {
          "id": 677294085,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDY2NDM0Njkx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19700",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19700/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19700/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19700/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19700",
          "number": 19700,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Replace -zapwallettxes with wallet tool command",
          "body": "Replaces the `-zapwallettxes` startup option with a `zapwallettxes` command in the wallet tool.\r\n\r\nTo preserve the transaction metadata, using `zapwallettxes` rewrites the transactions as a `zaptx` record and removes the original `tx` record. `bestblock` is also reset to null to trigger a rescan. On loading the wallet, a rescan will be triggered. If any `zaptx` records were found, then the metadata from those records is copied to the new tx. All `zaptx` records are removed after loading. If metadata is not kept (by using `-keepmeta=0` in the wallet tool), then no `zaptx` records will be created.\r\n\r\nLastly `-zapwallettxes` is replaced with an error telling users to use the wallet tool command instead.\r\n\r\nAlternative to #19653 and #19671",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19700",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19700",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19700.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19700.patch"
          },
          "closed_at": "2020-08-27T13:59:41Z",
          "created_at": "2020-08-12T00:49:25Z",
          "updated_at": "2022-02-15T10:35:23Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-20T22:07:25Z",
      "updated_at": "2020-08-20T22:07:25Z",
      "source": {
        "issue": {
          "id": 649130195,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDQyODIyMTk5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19425",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19425/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19425/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19425/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19425",
          "number": 19425,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Get rid of more redundant chain methods",
          "body": "This just drops three interfaces::Chain methods replacing them with other calls.\r\n\r\nMotivation for removing these chain methods:\r\n\r\n- Need to get rid of findFirstBlockWithTimeAndHeight for #10102, which doesn't support overloaded methods\r\n- Followup from https://github.com/bitcoin/bitcoin/pull/16426#discussion_r412487403\r\n- phantomcircuit comments about findNextBlock test http://www.erisian.com.au/bitcoin-core-dev/log-2020-06-06.html#l-214\r\n\r\nBehavior is not changing in any way here. A TODO comment in ScanForWalletTransactions was removed, but just because it was invalid (see https://github.com/bitcoin/bitcoin/pull/19195#discussion_r448020762), not because it was implemented.\r\n",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 2260068353,
              "node_id": "MDU6TGFiZWwyMjYwMDY4MzUz",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/interfaces",
              "name": "interfaces",
              "description": "",
              "color": "83c9fc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19425",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19425",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19425.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19425.patch"
          },
          "closed_at": "2020-12-08T17:51:38Z",
          "created_at": "2020-07-01T16:54:33Z",
          "updated_at": "2022-02-15T10:49:22Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-21T00:06:11Z",
      "updated_at": "2020-08-21T00:06:11Z",
      "source": {
        "issue": {
          "id": 610424646,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDExODY3NDk0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18836",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18836/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18836/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18836/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18836",
          "number": 18836,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: upgradewallet fixes and additional tests",
          "body": "This PR cleans up the wallet upgrade mechanism a bit, fixes some probably bugs, and adds more test cases.\r\n\r\nThe `nWalletMaxVersion` member variable has been removed as it made `CanSupportFeature` unintuitive and was causing a couple of bugs. The reason this was introduced originally was to allow a wallet upgrade to only occur when the new feature is first used. While this makes sense for the old `-upgradewallet` option, for an RPC, this does not quite make sense. It's more intuitive for an upgrade to occur if possible if the `upgradewallet` RPC is used as that's an explicit request to upgrade a particular wallet to a newer version. `nWalletMaxVersion` was only relevant for upgrades to `FEATURE_WALLETCRYPT` and `FEATURE_COMPRPUBKEY` both of which are incredibly old features. So for such wallets, the behavior of `upgradewallet` will be that the feature is enabled immediately without the wallet needing to be encrypted at that time (note that `FEATURE_WALLETCRYPT` indicates support for encryption, not that the wallet is encrypted) or for a new key to be generated.\r\n\r\n`CanSupportFeature` would previously indicate whether we could upgrade to `nWalletMaxVersion` not just whether the current wallet version supported a feature. While this property was being used to determine whether we should upgrade to HD and HD chain split, it was also causing a few bugs. Determining whether we should upgrade to HD or HD chain split is resolved by passing into `ScriptPubKeyMan::Upgrade` the version we are upgrading to and checking against that. By removing `nWalletMaxVersion` we also fix a bug where you could upgrade to HD chain split without the pre-split keypool.\r\n\r\n`nWalletMaxVersion` was also the version that was being reported by `getwalletinfo` which meant that the version reported was not always consistent across restarts as it depended on whether `upgradewallet` was used. Additionally to make the wallet versions consistent with actually supported versions, instead of just setting the wallet version to whatever is given to `upgradewallet`, we normalize the version number to the closest supported version number. For example, if given 150000, we would store and report 139900.\r\n\r\nAnother bug where CHDChain was not being upgraded to the version supporting HD chain split is also fixed by this PR.\r\n\r\nLastly several more tests have been added. Some refactoring to the test was made to make these tests easier. These tests check specific upgrading scenarios, such as from non-HD (version 60000) to HD to pre-split keypool. Although not specifically related to `upgradewallet`, `UpgradeKeyMetadata` is now being tested too.\r\n\r\nPart of the new tests is checking that the wallet files are identical before and after failed upgrades. To facilitate this, a utility function `sha256sum_file` has been added. Another part of the tests is to examine the wallet file itself to ensure that the records in the wallet.dat file have been correctly modified. So a new `bdb.py` module has been added to deserialize the BDB db of the wallet.dat file. This format isn't explicitly documented anywhere, but the code and comments in BDB's source code in file `dbinc/db_page.h` describe it. This module just dumps all of the fields into a dict.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/45",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45/labels",
            "id": 4914019,
            "node_id": "MDk6TWlsZXN0b25lNDkxNDAxOQ==",
            "number": 45,
            "state": "closed",
            "title": "0.21.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 132,
            "created_at": "2019-12-09T08:39:58Z",
            "updated_at": "2021-01-15T19:50:53Z",
            "closed_at": "2021-01-15T19:50:53Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 19,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18836",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18836",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18836.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18836.patch"
          },
          "closed_at": "2020-11-16T10:05:55Z",
          "created_at": "2020-04-30T22:19:20Z",
          "updated_at": "2022-02-15T10:38:05Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-21T01:13:28Z",
      "updated_at": "2020-08-21T01:13:28Z",
      "source": {
        "issue": {
          "id": 561865318,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzcyNTk1Njg5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18095",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18095/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18095/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18095/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18095",
          "number": 18095,
          "state": "closed",
          "state_reason": null,
          "title": "Fix crashes and infinite loop in ListWalletDir()",
          "body": "**Crashes:**\r\nIf wallet is checking existence of wallet.dat in directory where access is denied then _fs::exists()_ without _ec_ parameter will cause wallet crash.\r\n\r\nReproduction steps on Linux platform:\r\n1. Type: _mkdir ~/.bitcoin/crash_\r\n2. Type:  _sudo chown root:root ~/.bitcoin/crash_\r\n3. Run _bitcoin-qt_\r\n4. Go to menu _\"File\"_ -> _\"Open Wallet\"_, wallet will crash immediately\r\n\r\nIt's fixed by adding \"ec\" parameter into fs::exists() function to handle any error correctly.\r\n\r\n**Infinite loop:**\r\nIf iterator is not able to increment because of access denied to next level of recursive scan it will stay on the same position indefinitely causing wallet to stop responding.\r\n\r\nReproduction steps on Windows platform:\r\n1. Create new folder into bitcoin data folder (for example: _%Appdata%\\Roaming\\Bitcoin\\Loop_)\r\n2. Deny access to newly created folder for current user\r\n3. Run _bitcoin-qt.exe_\r\n4. Go to menu \"File\" -> \"Open Wallet\", wallet will hang indefinitely\r\n\r\nIt's fixed by disabling recursion if iterator increment failed. This way iterator will continue to next record in current recursion level not trying to dive into inaccessible directory structure.\r\n",
          "user": {
            "login": "uhliksk",
            "id": 37454226,
            "node_id": "MDQ6VXNlcjM3NDU0MjI2",
            "avatar_url": "https://avatars.githubusercontent.com/u/37454226?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/uhliksk",
            "html_url": "https://github.com/uhliksk",
            "followers_url": "https://api.github.com/users/uhliksk/followers",
            "following_url": "https://api.github.com/users/uhliksk/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/uhliksk/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/uhliksk/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/uhliksk/subscriptions",
            "organizations_url": "https://api.github.com/users/uhliksk/orgs",
            "repos_url": "https://api.github.com/users/uhliksk/repos",
            "events_url": "https://api.github.com/users/uhliksk/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/uhliksk/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64585,
              "node_id": "MDU6TGFiZWw2NDU4NQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Bug",
              "name": "Bug",
              "color": "FBBAAB",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "NONE",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 27,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18095",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18095",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18095.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18095.patch"
          },
          "closed_at": "2020-11-12T08:04:17Z",
          "created_at": "2020-02-07T20:52:09Z",
          "updated_at": "2022-02-15T10:37:51Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-21T02:46:21Z",
      "updated_at": "2020-08-21T02:46:21Z",
      "source": {
        "issue": {
          "id": 412659653,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjU0ODE5MDIx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15454",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15454/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15454/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15454/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/15454",
          "number": 15454,
          "state": "closed",
          "state_reason": null,
          "title": "Remove the automatic creation and loading of the default wallet",
          "body": "Instead of automatically creating and loading a default wallet, users should instead explicitly create their wallet or load it on start.\r\n\r\nBuilds on #19754 which provides the `load_on_startup` behavior for the GUI.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 34,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15454",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/15454",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/15454.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/15454.patch"
          },
          "closed_at": "2020-09-18T00:06:17Z",
          "created_at": "2019-02-20T22:30:23Z",
          "updated_at": "2022-02-15T11:04:48Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-22T21:17:09Z",
      "updated_at": "2020-08-22T21:17:09Z",
      "source": {
        "issue": {
          "id": 684024102,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDcyMDA3MTc0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19780",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19780/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19780/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19780/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19780",
          "number": 19780,
          "state": "closed",
          "state_reason": null,
          "title": "build, qt: Add SVG support, and replace bitcoin PNG image with SVG one",
          "body": "This PR adds SVG support, and replaces `bitcoin.png` with `bitcoin.svg`.\r\nHere are the benefits:\r\n- no more icon scaling issues on Linux desktops (fixes #14992, an alternative to #14990)\r\n- ability to drop PNG support, after replacement of all icons (as possible alternative to #19751)\r\n\r\nFedora 32:\r\n![Screenshot from 2020-08-22 19-44-45](https://user-images.githubusercontent.com/32963518/90961244-2ab36b80-e4b0-11ea-855f-f92347080699.png)\r\n\r\nUbuntu Focal 20.04:\r\n![DeepinScreenshot_select-area_20200822224245](https://user-images.githubusercontent.com/32963518/90964410-f13b2a00-e4c8-11ea-97aa-855ca2aba91f.png)\r\n\r\n\"About Bitcoin Core\" dialog with this PR:\r\n![Screenshot from 2020-08-22 22-47-19](https://user-images.githubusercontent.com/32963518/90964466-8b9b6d80-e4c9-11ea-9b64-2929606f2b8d.png)\r\n\r\n---\r\n\r\nhttps://github.com/bitcoin-core/packaging/pull/27#issuecomment-519515227:\r\n> I slighly remember that the png I made where slighly different then the SVG (optimized shadows, etc.). But not sure if this is still the case and if it matters. Just something to dbl-check.\r\n\r\nWith Qt 5.9.8 (our gitian builds) difference in shadows is observed. No differences with newer Qt versions.",
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 13,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19780",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19780",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19780.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19780.patch"
          },
          "closed_at": "2020-08-23T08:14:25Z",
          "created_at": "2020-08-22T16:23:52Z",
          "updated_at": "2022-10-30T19:10:22Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 3709210733,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM3MDkyMTA3MzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3709210733",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-31T10:17:56Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 3712590841,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM3MTI1OTA4NDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3712590841",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2619e6545ea3cec133f8147cff763a45f7fe8013",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/2619e6545ea3cec133f8147cff763a45f7fe8013",
      "created_at": "2020-09-01T03:20:24Z"
    },
    {
      "event": "referenced",
      "id": 3712590926,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM3MTI1OTA5MjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3712590926",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a574f214188b8b5316be9c6aad81be33549e0ba5",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/a574f214188b8b5316be9c6aad81be33549e0ba5",
      "created_at": "2020-09-01T03:20:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3716187262,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzcxNjE4NzI2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3716187262",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-01T18:02:39Z"
    },
    {
      "event": "unlabeled",
      "id": 3716544282,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzcxNjU0NDI4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3716544282",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-01T19:42:07Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 3725839430,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM3MjU4Mzk0MzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3725839430",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-03T17:35:39Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 3726337368,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM3MjYzMzczNjg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3726337368",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c8e9cd742e8647d41046181de6943f055c12688c",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/c8e9cd742e8647d41046181de6943f055c12688c",
      "created_at": "2020-09-03T19:39:06Z"
    },
    {
      "event": "referenced",
      "id": 3726337526,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM3MjYzMzc1MjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3726337526",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b5b414151af32e5a07b5757b64482d77519d77c0",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/b5b414151af32e5a07b5757b64482d77519d77c0",
      "created_at": "2020-09-03T19:39:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3727314356,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzcyNzMxNDM1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3727314356",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-04T00:29:55Z"
    },
    {
      "event": "unlabeled",
      "id": 3727490235,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzcyNzQ5MDIzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3727490235",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-04T01:54:26Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 3734674567,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM3MzQ2NzQ1Njc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3734674567",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "56d47e19edca0c3f9898d904de271251de6d6dc5",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56d47e19edca0c3f9898d904de271251de6d6dc5",
      "created_at": "2020-09-06T23:45:51Z"
    },
    {
      "event": "commented",
      "id": 687936981,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4NzkzNjk4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687936981",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-06T23:48:19Z",
      "updated_at": "2020-09-06T23:48:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "This can now be rebased after #19619 merge ",
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-687936981",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3734684539,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzczNDY4NDUzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3734684539",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-06T23:55:25Z"
    },
    {
      "event": "commented",
      "id": 687938563,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4NzkzODU2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687938563",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-06T23:55:49Z",
      "updated_at": "2020-09-06T23:55:49Z",
      "author_association": "MEMBER",
      "body": "Rebased",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-687938563",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "commented",
      "id": 688444710,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4ODQ0NDcxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/688444710",
      "actor": {
        "login": "pstratem",
        "id": 620611,
        "node_id": "MDQ6VXNlcjYyMDYxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pstratem",
        "html_url": "https://github.com/pstratem",
        "followers_url": "https://api.github.com/users/pstratem/followers",
        "following_url": "https://api.github.com/users/pstratem/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pstratem/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pstratem/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
        "organizations_url": "https://api.github.com/users/pstratem/orgs",
        "repos_url": "https://api.github.com/users/pstratem/repos",
        "events_url": "https://api.github.com/users/pstratem/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pstratem/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-07T17:18:29Z",
      "updated_at": "2020-09-07T17:18:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "Should probably be setting the application_id pragma to something constant and random.\r\n\r\nIt's also important that fullfsync be set because Mac OS X is a liar.\r\n\r\nCould also be setting user_version, which is a way of versioning the schema.",
      "user": {
        "login": "pstratem",
        "id": 620611,
        "node_id": "MDQ6VXNlcjYyMDYxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pstratem",
        "html_url": "https://github.com/pstratem",
        "followers_url": "https://api.github.com/users/pstratem/followers",
        "following_url": "https://api.github.com/users/pstratem/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pstratem/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pstratem/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
        "organizations_url": "https://api.github.com/users/pstratem/orgs",
        "repos_url": "https://api.github.com/users/pstratem/repos",
        "events_url": "https://api.github.com/users/pstratem/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pstratem/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-688444710",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "commented",
      "id": 688523403,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4ODUyMzQwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/688523403",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-07T22:05:08Z",
      "updated_at": "2020-09-07T22:05:08Z",
      "author_association": "MEMBER",
      "body": "> Should probably be setting the application_id pragma to something constant and random.\r\n\r\nCould just set it to the network magic bytes? I think that might even let us deal with #12805 by ensuring that we only open a wallet that was created with the correct network magic as the application_id.\r\n\r\n> Could also be setting user_version, which is a way of versioning the schema.\r\n\r\nWould it be useful to set it to the wallet version number or should this just be a new schema version number?",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-688523403",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "referenced",
      "id": 3748105689,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM3NDgxMDU2ODk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3748105689",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "53b6e698d144e8fb2f5cbb90fb515fc493c2d68f",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/53b6e698d144e8fb2f5cbb90fb515fc493c2d68f",
      "created_at": "2020-09-09T22:40:32Z"
    },
    {
      "event": "commented",
      "id": 689894349,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTg5NDM0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/689894349",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-10T00:23:37Z",
      "updated_at": "2020-09-10T00:23:37Z",
      "author_association": "MEMBER",
      "body": "Added application_id as the network magic. Also added user_version.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-689894349",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3748396357,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzc0ODM5NjM1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3748396357",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-10T00:52:46Z"
    },
    {
      "event": "added_to_project",
      "id": 3752692823,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQzNzUyNjkyODIz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3752692823",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-10T19:06:48Z",
      "project_card": {
        "id": 45258368,
        "url": "https://api.github.com/projects/columns/cards/45258368",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "labeled",
      "id": 3767894600,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM3Njc4OTQ2MDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3767894600",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-15T11:39:52Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3769357610,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzc2OTM1NzYxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3769357610",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-15T16:48:27Z"
    },
    {
      "event": "unlabeled",
      "id": 3769628287,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mzc2OTYyODI4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3769628287",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-15T17:55:55Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-19T10:02:11Z",
      "updated_at": "2020-09-19T10:02:11Z",
      "source": {
        "issue": {
          "id": 702186303,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDg3NTAzMDI3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19960",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19960/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19960/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19960/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19960",
          "number": 19960,
          "state": "closed",
          "state_reason": null,
          "title": "build: The vcpkg tool has introduced a proper way to use manifests",
          "body": "The vcpkg tool has introduced a proper way to use [manifests](https://devblogs.microsoft.com/cppblog/vcpkg-accelerate-your-team-development-environment-with-binary-caching-and-manifests/). This PR replaces the custom text file mechanism with the new manifest approach.\r\n\r\nIt is planned that vckpg manifests will include the ability to version dependencies in the future. Dependency versions would solve a number of issues that currently require workarounds with the appveyor CI.\r\n\r\n\r\n",
          "user": {
            "login": "sipsorcery",
            "id": 197660,
            "node_id": "MDQ6VXNlcjE5NzY2MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/197660?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipsorcery",
            "html_url": "https://github.com/sipsorcery",
            "followers_url": "https://api.github.com/users/sipsorcery/followers",
            "following_url": "https://api.github.com/users/sipsorcery/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipsorcery/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipsorcery/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipsorcery/subscriptions",
            "organizations_url": "https://api.github.com/users/sipsorcery/orgs",
            "repos_url": "https://api.github.com/users/sipsorcery/repos",
            "events_url": "https://api.github.com/users/sipsorcery/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipsorcery/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 234877,
              "node_id": "MDU6TGFiZWwyMzQ4Nzc=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Windows",
              "name": "Windows",
              "color": "884400",
              "default": false
            },
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 11,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19960",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19960",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19960.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19960.patch"
          },
          "closed_at": "2020-09-30T06:53:03Z",
          "created_at": "2020-09-15T19:11:18Z",
          "updated_at": "2022-02-15T10:38:30Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 491982796,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxOTgyNzk2",
      "url": null,
      "actor": null,
      "commit_id": "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Reviewed all the code. I don't understand the build system much, but the rest looks solid to me. The only concern that I have is regarding the behaviour when we use multiple batches over one shared connection. Besides that, there are just a few small nits.\r\n\r\nI'm going to build the code and test it in upcoming days.",
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-491982796",
      "submitted_at": "2020-09-20T07:45:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3791133409,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzc5MTEzMzQwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3791133409",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-22T01:13:46Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "2a5A1Ghu1",
        "id": 13294167,
        "node_id": "MDQ6VXNlcjEzMjk0MTY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/13294167?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/2a5A1Ghu1",
        "html_url": "https://github.com/2a5A1Ghu1",
        "followers_url": "https://api.github.com/users/2a5A1Ghu1/followers",
        "following_url": "https://api.github.com/users/2a5A1Ghu1/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/2a5A1Ghu1/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/2a5A1Ghu1/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/2a5A1Ghu1/subscriptions",
        "organizations_url": "https://api.github.com/users/2a5A1Ghu1/orgs",
        "repos_url": "https://api.github.com/users/2a5A1Ghu1/repos",
        "events_url": "https://api.github.com/users/2a5A1Ghu1/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/2a5A1Ghu1/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-23T15:55:15Z",
      "updated_at": "2020-09-23T15:55:15Z",
      "source": {
        "issue": {
          "id": 707487275,
          "node_id": "MDU6SXNzdWU3MDc0ODcyNzU=",
          "url": "https://api.github.com/repos/theohmproject/ohmcoin/issues/66",
          "repository_url": "https://api.github.com/repos/theohmproject/ohmcoin",
          "labels_url": "https://api.github.com/repos/theohmproject/ohmcoin/issues/66/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/theohmproject/ohmcoin/issues/66/comments",
          "events_url": "https://api.github.com/repos/theohmproject/ohmcoin/issues/66/events",
          "html_url": "https://github.com/theohmproject/ohmcoin/issues/66",
          "number": 66,
          "state": "open",
          "state_reason": null,
          "title": "[Performance][Core][Wallet] Add Sqlite/Upscaledb as an Alternative Wallet Database",
          "body": "A long time bottleneck in performance is leveldb and berkeleydb, so investigating something like what bitcoin is doing\r\nhttps://github.com/bitcoin/bitcoin/pull/19077/ would help begin our long term goal of changing dbs in the whole code base.\r\n\r\nPreferably moving to something like upscaledb or some other graph db, with some work, will allow for faster queries and allow for indexing relationships between transactions far more efficiently. The end goal is to update the local storage of the blockchain as well. Also, seeing as how we are not constrained by bitcoins \"no hard fork\" mantra this should be pretty easy to accomplish, I doubt that this change would need a hard fork.\r\n\r\nhttps://upscaledb.com/",
          "user": {
            "login": "2a5A1Ghu1",
            "id": 13294167,
            "node_id": "MDQ6VXNlcjEzMjk0MTY3",
            "avatar_url": "https://avatars.githubusercontent.com/u/13294167?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2a5A1Ghu1",
            "html_url": "https://github.com/2a5A1Ghu1",
            "followers_url": "https://api.github.com/users/2a5A1Ghu1/followers",
            "following_url": "https://api.github.com/users/2a5A1Ghu1/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/2a5A1Ghu1/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/2a5A1Ghu1/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/2a5A1Ghu1/subscriptions",
            "organizations_url": "https://api.github.com/users/2a5A1Ghu1/orgs",
            "repos_url": "https://api.github.com/users/2a5A1Ghu1/repos",
            "events_url": "https://api.github.com/users/2a5A1Ghu1/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/2a5A1Ghu1/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 0,
          "created_at": "2020-09-23T15:55:15Z",
          "updated_at": "2020-09-23T15:55:15Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-24T02:56:50Z",
      "updated_at": "2020-09-24T02:56:50Z",
      "source": {
        "issue": {
          "id": 605835258,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDA4MTY2MzMw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18750",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18750/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18750/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18750/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18750",
          "number": 18750,
          "state": "closed",
          "state_reason": null,
          "title": "build: optionally skip external warnings",
          "body": "Add an option to `./configure` to suppress compilation warnings from\r\nexternal headers. The option is off by default (no change in behavior,\r\nshow warnings from external headers).\r\n\r\nThis option is useful if e.g. Boost or Qt is installed outside of\r\n`/usr/include` (warnings from headers in `/usr/include` are already\r\nsuppressed by default) and those warnings stand in the way of compiling\r\nBitcoin Core with `-Werror[=...]` or they just clutter the build output\r\ntoo much and make our own warnings hard to spot.\r\n\r\n`-isystem /usr/include` bricks GCC's `#include_next`, so we use\r\n`-idirafter` instead. This way we don't have to treat `/usr/include`\r\nspecially.\r\n",
          "user": {
            "login": "vasild",
            "id": 266751,
            "node_id": "MDQ6VXNlcjI2Njc1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vasild",
            "html_url": "https://github.com/vasild",
            "followers_url": "https://api.github.com/users/vasild/followers",
            "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
            "organizations_url": "https://api.github.com/users/vasild/orgs",
            "repos_url": "https://api.github.com/users/vasild/repos",
            "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vasild/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 20,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18750",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18750",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18750.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18750.patch"
          },
          "closed_at": "2020-10-14T12:58:36Z",
          "created_at": "2020-04-23T20:12:50Z",
          "updated_at": "2022-02-15T10:48:09Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 698359773,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5ODM1OTc3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/698359773",
      "actor": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-24T13:54:10Z",
      "updated_at": "2020-09-24T13:54:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 46db9cd\r\nCode reviewed and lightly tested. I built it on macOS 10.13.6 with sqlite (3.19.3) installed from brew.\r\n * Created, loaded and unloaded a wallet; loaded multiple sqlite wallets\r\n * Verified checks for `application_id` and schema version (`user_version`)\r\n * Verified SQLite global log configuration; errors appear in the log file as expected\r\n * Integrity check gives a proper error while loading wallet from a corrupted file\r\n * Wallet encryption; this involves transactions, so I verified it works and no records are visible before commit\r\n * Backup\r\n * Opened wallet file with another tool and explored the contents of the database\r\n * Triggered wallet rewrite and vacuum, verified db size shrinks as expected",
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-698359773",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "commented",
      "id": 698946207,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5ODk0NjIwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/698946207",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-25T14:00:57Z",
      "updated_at": "2020-09-25T14:00:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK and Approach ACK. From my initial shallow pass, the code looks very good already. Local build, automated tests, and some manual testing were all successful. Will keep going and dig into SQLite documentation at the same time since I am not experienced with it.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-698946207",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "commented",
      "id": 699111834,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5OTExMTgzNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/699111834",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-25T19:25:19Z",
      "updated_at": "2020-09-25T19:25:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK. On my review shortlist. ",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-699111834",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "commented",
      "id": 699530872,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5OTUzMDg3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/699530872",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-26T18:24:52Z",
      "updated_at": "2020-09-26T18:24:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "I have run coverage checks on the current state of this PR [here](https://fjahr.com/files/19077_cov_baseline/src/wallet/index.html) (these are the total coverage number, i.e. including functional tests). The `wallet/sqlite.cpp` numbers are low because of many lines dedicated to error checking but also `HasKey()` and `TxnAbort()` are not covered while they are covered on the BDB class. I suppose the reason for that is that these functions are not covered by wallet tests but other tests where a BDB based wallet is used. We currently only run the wallet tests with a descriptor wallet AFAICT. Should this be changed now? Maybe there are already plans for this were I missed the discussion.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-699530872",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "commented",
      "id": 699540371,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5OTU0MDM3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/699540371",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-26T19:50:39Z",
      "updated_at": "2020-09-26T19:52:00Z",
      "author_association": "MEMBER",
      "body": "`TxnAbort` isn't covered by either SQLite or BDB, and that is expected as it is only called in an failure case.\r\n\r\n`HasKey` seems to be only used by `DatabaseBatch::Exists` which is currently only used by `BerkeleyBatch` for a backwards compatibility case that SQLite doesn't need.\r\n\r\n> We currently only run the wallet tests with a descriptor wallet AFAICT. Should this be changed now? Maybe there are already plans for this were I missed the discussion.\r\n\r\nWith #18788, more tests will be enabled for descriptor wallets as well as the option to run all tests with descriptor wallets.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-699540371",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "reviewed",
      "id": 497108156,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MTA4MTU2",
      "url": null,
      "actor": null,
      "commit_id": "01b3cb026806784ae20eb670bd9aa40c43a94e54",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Could add a dedicated statement for `HasKey`, see https://stackoverflow.com/a/9756276/1978589. Are you going to add any index to main table?\r\n\r\nBTW, could also have RAII for prepared statements.\r\n\r\nIt's not clear to me how concurrent accesses are handled, how sqlite guarantees a concurrent thread B waits until after thread A calls `sqlite3_reset`.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-497108156",
      "submitted_at": "2020-09-27T20:45:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "reviewed",
      "id": 497090123,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDkwMTIz",
      "url": null,
      "actor": null,
      "commit_id": "5ece9f577a6e6463b15b0d88f35a7f18808936f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Light code review ACK 46db9cdb6c706ee851386fb4afbac0bf2dbd1013\r\n\r\nI am still not an SQLite expert but at least I have sanity checked all the statements and dug a bit deeper on a few of them. I left a few comments but I don't consider any of them blocking. Will do some further manual testing as well soon.\r\n\r\nThere are no changes to the docs so far. Do you plan to do these in a follow-up? It might be good to work on this in parallel or add the most important bits here since when this gets merged some people might run into build issues while the doc changes are being bike-shedded.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-497090123",
      "submitted_at": "2020-09-27T21:46:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "commented",
      "id": 699728618,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5OTcyODYxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/699728618",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-28T01:59:52Z",
      "updated_at": "2020-09-28T01:59:52Z",
      "author_association": "MEMBER",
      "body": "> It's not clear to me how concurrent accesses are handled, how sqlite guarantees a concurrent thread B waits until after thread A calls `sqlite3_reset`.\r\n\r\nHave you read https://sqlite.org/lockingv3.html?",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-699728618",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "commented",
      "id": 700139275,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwMDEzOTI3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/700139275",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-28T16:21:18Z",
      "updated_at": "2020-09-28T16:21:18Z",
      "author_association": "MEMBER",
      "body": "> I left a few comments but I don't consider any of them blocking.\r\n\r\nGreat! I'll leave them until something blocking comes up.\r\n\r\n> There are no changes to the docs so far. Do you plan to do these in a follow-up?\r\n\r\nOh yeah, documentation... I'll do them in a follow up.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-700139275",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-29T11:01:22Z",
      "updated_at": "2020-09-29T11:01:22Z",
      "source": {
        "issue": {
          "id": 711001373,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDk0NzQ1NjYx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20034",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20034/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20034/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20034/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20034",
          "number": 20034,
          "state": "closed",
          "state_reason": null,
          "title": "test: Get rid of default wallet hacks",
          "body": "Changes:\r\n\r\n- Get rid of setup_nodes (`-wallet`, `-nowallet`, `-disablewallet`) argument rewriting\r\n- Get rid of hardcoded wallet `\"\"` names and `-wallet=\"\"` args\r\n\r\nMotivation:\r\n\r\n- Simplify test framework behavior so it's easier to write new tests without having arguments mangled by the framework\r\n- Make tests more readable, replacing unexplained `\"\"` string literals with `default_wallet_name` references\r\n- Make it trivial to update default wallet name and wallet data filename for sqlite #19077 testing\r\n- Stop relying on `-wallet` arguments to create wallets, so it is easy to change `-wallet` option in the future to only load existing wallets not create new ones (to avoid accidental wallet creation, and encourage use of wallet encryption and descriptor features)",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20034",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20034",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20034.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20034.patch"
          },
          "closed_at": "2020-10-02T15:09:00Z",
          "created_at": "2020-09-29T11:01:22Z",
          "updated_at": "2022-02-15T11:04:26Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 3820126257,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MjAxMjYyNTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3820126257",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c072c8585dde004db0aadbf4309fb97a952a6f29",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/c072c8585dde004db0aadbf4309fb97a952a6f29",
      "created_at": "2020-09-29T15:03:24Z"
    },
    {
      "event": "referenced",
      "id": 3820761462,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MjA3NjE0NjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3820761462",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5338dfaef077b5c38e3a87d76f12068147a5db2d",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/5338dfaef077b5c38e3a87d76f12068147a5db2d",
      "created_at": "2020-09-29T17:06:40Z"
    },
    {
      "event": "labeled",
      "id": 3822992225,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM4MjI5OTIyMjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3822992225",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-30T07:10:38Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3825392054,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzgyNTM5MjA1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3825392054",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-30T16:24:55Z"
    },
    {
      "event": "commented",
      "id": 701499340,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwMTQ5OTM0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/701499340",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-30T16:25:16Z",
      "updated_at": "2020-09-30T16:25:16Z",
      "author_association": "MEMBER",
      "body": "Rebased, so addressed comments. Also added some basic documentation to the build docs.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-701499340",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "unlabeled",
      "id": 3825702308,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzgyNTcwMjMwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3825702308",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-30T17:41:26Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 3828969795,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4Mjg5Njk3OTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3828969795",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c1585bca8dae01dee6a1dd8eadae2f8b100503df",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/c1585bca8dae01dee6a1dd8eadae2f8b100503df",
      "created_at": "2020-10-01T11:31:40Z"
    },
    {
      "event": "referenced",
      "id": 3831096301,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MzEwOTYzMDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3831096301",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "343b3e35e7c3a51bcdc911906d83a36730b1992b",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/343b3e35e7c3a51bcdc911906d83a36730b1992b",
      "created_at": "2020-10-01T19:24:30Z"
    },
    {
      "event": "referenced",
      "id": 3831096450,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MzEwOTY0NTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3831096450",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6427c68fce823be0fd0cc55ebe74ff88f0349a26",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/6427c68fce823be0fd0cc55ebe74ff88f0349a26",
      "created_at": "2020-10-01T19:24:33Z"
    },
    {
      "event": "reviewed",
      "id": 499843408,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5ODQzNDA4",
      "url": null,
      "actor": null,
      "commit_id": "10124c3d6c5176d5df94964e530a4b0c6edd8381",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Started review (will update list below with progress).\r\n\r\n- [X] 10124c3d6c5176d5df94964e530a4b0c6edd8381 Add libsqlite3 (1/27)\r\n- [X] 443d029fb859262c56b8be32205a2b4540dbb843 Add sqlite to travis and depends (2/27)\r\n- [X] f35f89f1ae53914f6183ec3d7da6a1d0c27bed16 Add SQLiteDatabase and SQLiteBatch dummy classes (3/27)\r\n- [X] 00bf8b2bcd74b85013b7155fef0f8f8438d31ecd Implement SQLiteDatabaseVersion (4/27)\r\n- [X] 55d1e2b3b443e3794deb8f20bde0072153f98525 Constructors, destructors, and relevant private fields for SQLiteDatabase/Batch (5/27)\r\n- [X] 13cca0d881acc81dbf4a6496bb02d4fefc905a77 Initialize and Shutdown sqlite3 globals (6/27)\r\n- [X] ecc06767e1a91b11179ffb5b70808b69a9c6b552 Implement SQLiteDatabase::Open (7/27)\r\n- [ ] 19033c4e9d9c150db0fba6841fa94ee78d994f31 Implement SQLiteDatabase::Close (8/27)\r\n- [ ] 429c8e18c2f66589bb75ef5c3827c2e7fd9a354b Implement SQLiteBatch::Close (9/27)\r\n- [ ] af798a8fd9b3b1a1e0a63a665f6d89c73e8614a3 sqlitedb: Create and lock the wallet directory (10/27)\r\n- [ ] 3ce06b5d6824e14e6cc270c6161dc41408f23eb8 Implement SQLiteDatabase::RemoveRef and AddRef (11/27)\r\n- [ ] e6ecebe03a62987ee70b17044c232b21afc6dc05 Add SetupSQLStatements (12/27)\r\n- [ ] 57b2da3bcd0bc64c3452b1208de6fca62d86ce31 Implement SQLiteBatch::ReadKey, WriteKey, EraseKey, and HasKey (13/27)\r\n- [ ] 009ef9f25717ca332be9adca9f2d4035c922388f Implement SQLiteBatch::StartCursor, ReadAtCursor, and CloseCursor (14/27)\r\n- [ ] d0cbf04178c47a4acce2028e6df3cfc95bd05d33 Implement SQLiteDatabase::Backup (15/27)\r\n- [ ] c3d1f091c283287f7fe495a38069023c3d8fd386 Implement SQLiteDatabase::TxnBegin, TxnCommit, and TxnAbort (16/27)\r\n- [ ] 91730109505aec8698e0ecb26a056583e2376ec1 Implement SQLiteDatabase::Flush, PeriodicFlush, and ReloadDbEnv as No-ops (17/27)\r\n- [ ] fae19b88936d4183508047d133d8ce4b11f537fc Implement SQLiteDatabase::Rewrite (18/27)\r\n- [ ] 41c87fa836036a3b9c030dc97bd1ce3dc34fe4e0 Implement SQLiteDatabase::Verify (19/27)\r\n- [ ] 99b48f327a1b4a35289b6aec37e312adb2244e9c Implement SQLiteDatabase::MakeBatch (20/27)\r\n- [ ] 45ba0aa7b8e0408ca479c6bf29b27d3d8f1148ef Determine wallet file type based on file magic (21/27)\r\n- [ ] cb086c05b5e400aeffc0e94c52ac807df1445ef9 walletutil: Wallets can also be sqlite (22/27)\r\n- [ ] f9d3ec85af95422fd47b3e87964aff6309a47b80 Use SQLite for descriptor wallets (23/27)\r\n- [ ] 5d26f1f96f60cf18252b507946d47f588db4db81 Use network magic as sqlite wallet application ID (24/27)\r\n- [ ] b5dbcd1ecbf10a24ae5e56e169ded9bc9b113672 Set and check the sqlite user version (25/27)\r\n- [ ] 2596696de3c43b7017784b2b40650056566dbb8a wallet: Enforce sqlite serialized threading mode (26/27)\r\n- [ ] c76a25c125214cf69ddcd5493c9457195a9d768f Include sqlite3 in documentation (27/27)\r\n\r\nMain two pieces of feedback are:\r\n\r\n- I think this change should be merged with more tests enabled. Particularly wallet_backup.py and wallet_multiwallet.py tests would be good to have running, but probably others would be good as well. Doing this is pretty straightforward after #20034, and I took a shot at in a branch: https://github.com/bitcoin/bitcoin/compare/master...ryanofsky:pr/sql ([branch](https://github.com/ryanofsky/bitcoin/commits/pr/sql))\r\n- I think this change should start off on the right foot using sqlite naming and locking conventions. We don't disguise sqlite journal or WAL log files as BDB log files, and I don't think there's a reason to disguise the new data file with the old name. Using \"wallet.sqlite\" clearly identifies file format and wallet directory type to provide transparency and help debugging, and should avoid tools that aren't equipped to access these files from trying to access them",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-499843408",
      "submitted_at": "2020-10-01T19:38:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "commented",
      "id": 702362595,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwMjM2MjU5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/702362595",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T19:54:07Z",
      "updated_at": "2020-10-01T20:10:36Z",
      "author_association": "MEMBER",
      "body": "> I think this change should be merged with more tests enabled. Particularly wallet_backup.py and wallet_multiwallet.py tests would be good to have running, but probably others would be good as well. Doing this is pretty straightforward after #20034, and I took a shot at in a branch: [master...ryanofsky:pr/sql](https://github.com/bitcoin/bitcoin/compare/master...ryanofsky:pr/sql) ([branch](https://github.com/ryanofsky/bitcoin/commits/pr/sql))\r\n\r\nI think #18788 is needed to enable those tests.\r\n\r\n> I think this change should start off on the right foot using sqlite naming and locking conventions. We don't disguise sqlite journal or WAL log files as BDB log files, and I don't think there's a reason to disguise the new data file with the old name. Using \"wallet.sqlite\" clearly identifies file format and wallet directory type to provide transparency and help debugging, and should avoid tools that aren't equipped to access these files from trying to access them\r\n\r\nI have two main arguments to retain the `wallet.dat` naming:\r\n\r\n1. Existing external backup tooling, documentation, and other information refer to the wallet file as wallet.dat. In the vast majority of those cases, the exact file format is irrelevant so they will still be applicable to a sqlite wallet.dat. In the cases where the file format matters (only pywallet AFAIK), the file format is checked so the tool will error if it isn't correct.\r\n2. If the user has specified a sqlite wallet in their conf file, downgrading may result in a new bdb wallet.dat file being created in that directory. This can be confusing the user (they \"lost\" all of their money) and potentially issues with a subsequent upgrade to a version with sqlite (there would be both wallet.dat and wallet.sqlite in the same dir). I think it would be better to explicitly error (and a sqlite wallet.dat would cause an error for old software) rather than fail silently.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-702362595",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3831587449,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzgzMTU4NzQ0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3831587449",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T21:50:35Z"
    },
    {
      "event": "unsubscribed",
      "id": 3831740695,
      "node_id": "MDE3OlVuc3Vic2NyaWJlZEV2ZW50MzgzMTc0MDY5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3831740695",
      "actor": {
        "login": "kkasparov",
        "id": 68473786,
        "node_id": "MDQ6VXNlcjY4NDczNzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/68473786?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kkasparov",
        "html_url": "https://github.com/kkasparov",
        "followers_url": "https://api.github.com/users/kkasparov/followers",
        "following_url": "https://api.github.com/users/kkasparov/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kkasparov/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kkasparov/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kkasparov/subscriptions",
        "organizations_url": "https://api.github.com/users/kkasparov/orgs",
        "repos_url": "https://api.github.com/users/kkasparov/repos",
        "events_url": "https://api.github.com/users/kkasparov/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kkasparov/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T22:52:51Z"
    },
    {
      "event": "referenced",
      "id": 3834417938,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MzQ0MTc5Mzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3834417938",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "171cd05ae3413e18fd6382572c86f2bb21ab2fd9",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/171cd05ae3413e18fd6382572c86f2bb21ab2fd9",
      "created_at": "2020-10-02T15:08:56Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-03T20:28:28Z",
      "updated_at": "2020-10-03T20:28:28Z",
      "source": {
        "issue": {
          "id": 714139470,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDk3MzEyNTcz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20073",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20073/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20073/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20073/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20073",
          "number": 20073,
          "state": "closed",
          "state_reason": null,
          "title": "[DO NOT MERGE] ci: Print TRAVIS_COMMIT_RANGE before fail",
          "body": "",
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20073",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20073",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20073.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20073.patch"
          },
          "closed_at": "2020-10-04T07:25:59Z",
          "created_at": "2020-10-03T17:42:22Z",
          "updated_at": "2020-10-11T02:17:35Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 3838051090,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MzgwNTEwOTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3838051090",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d9630d6f44603173ef46be1fcc33a46b683c232c",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/d9630d6f44603173ef46be1fcc33a46b683c232c",
      "created_at": "2020-10-04T23:22:47Z"
    },
    {
      "event": "reviewed",
      "id": 493324893,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMzI0ODkz",
      "url": null,
      "actor": null,
      "commit_id": "5ece9f577a6e6463b15b0d88f35a7f18808936f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Reviewed the first couple of commits (to bb2406c9029ad66833f9d2fc62335872204ee94c)\r\n\r\nLightly tested by creating a Signet descriptor wallet and sending some coins back and forth.\r\n\r\nmacOS 10.15.7 seems to come with sqlite3 version 3.28.0 bundled. When installing sqlite3 via homebrew, you'll get the latest 3.33.0 but it's keg-only. This causes pkg-config to pick up version 3.28, unless you do:\r\n\r\n```\r\nPKG_CONFIG_PATH=\"/usr/local/opt/sqlite/lib/pkgconfig\" pkg-config --modversion sqlite3\r\n```\r\n\r\nThis isn't a big deal imo, but longer term having a `--with-sqlite3` config option would be nice. We should also decide and enforce a minimum version.\r\n\r\nI was unable to test with depends due to #19411",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-493324893",
      "submitted_at": "2020-10-05T12:11:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3841391717,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg0MTM5MTcxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3841391717",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-05T16:32:44Z"
    },
    {
      "event": "reviewed",
      "id": 502495880,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNDk1ODgw",
      "url": null,
      "actor": null,
      "commit_id": "8bfbad00d4bd94f2b9006e6375ea7dc11adee6fb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I'm think I'm like 75% done with this review. I'm posting comments I have so far just because I think one new comment below about prepared statement thread safety is critical and should be addressed before this PR is merged (see \"This whole commit does not seem thread safe\" below).\r\n\r\nOverall, there are a lot of things here I think should be cleaned up and simplified, but almost all of them could be implemented as followups after this is merged. The only three things I think are critical to change before this PR is merged are easy to patch in:\r\n\r\n- Not sharing prepared statements between threads\r\n- Enabling more functional tests for sqlite wallets (particularly multiwallet and wallet backup tests)\r\n- Setting data filename to avoid various forward & backward compatibility complications\r\n\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-502495880",
      "submitted_at": "2020-10-06T04:22:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3846920215,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg0NjkyMDIxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3846920215",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-06T18:19:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3846935600,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg0NjkzNTYwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3846935600",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-06T18:22:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3846963726,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg0Njk2MzcyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3846963726",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-06T18:29:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3846994606,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg0Njk5NDYwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3846994606",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-06T18:36:23Z"
    },
    {
      "event": "commented",
      "id": 704474094,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNDQ3NDA5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/704474094",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-06T18:39:19Z",
      "updated_at": "2020-10-06T18:39:19Z",
      "author_association": "MEMBER",
      "body": "I've also made a few changes to pass a couple of tests with #18788 merged. https://github.com/achow101/bitcoin/tree/sqlite-master is a branch with this and #18788 merged in, based on master. That branch also has an additional commit so that tool_wallet works with sqlite.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-704474094",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "reviewed",
      "id": 502926188,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyOTI2MTg4",
      "url": null,
      "actor": null,
      "commit_id": "4f3e5569c3c0eb83d50f7f88e9b673fa857fa08a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "This is looking great! This is already much simpler and nicer than the BDB implementation, and I'd be ready to ACK d8e024121b54fc998c61140dfdb004134a388928 with the following minimal changes: [diff](https://github.com/ryanofsky/bitcoin/compare/pr/sql-orig..pr/sql) ([commits](https://github.com/ryanofsky/bitcoin/commits/pr/sql), [branch](https://github.com/bitcoin/bitcoin/compare/master...ryanofsky:pr/sql)) to add sufficient test coverage and avoid being trapped supporting a layout that seems opaque and misleading and I think likely to cause compatibility problems.\r\n\r\nFeel free to ignore all other suggestions from me below. I think the other suggestions would simplify the PR, make the code more reliable, and fix minor bugs, but are not critical for compatibility or correctness. Only the ambiguous layout and lack of test coverage fixed by the suggested diff above hold me back from ACKing d8e024121b54fc998c61140dfdb004134a388928.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-502926188",
      "submitted_at": "2020-10-07T16:28:16Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3852078064,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg1MjA3ODA2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3852078064",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-07T19:04:35Z"
    },
    {
      "event": "commented",
      "id": 705136747,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNTEzNjc0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/705136747",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-07T19:08:27Z",
      "updated_at": "2020-10-07T19:08:27Z",
      "author_association": "MEMBER",
      "body": "I've done the suggested changes except for `wallet.sqlite`. I think we should discuss this during the wallet meeting this week.\r\n\r\nI've also pulled in the suggested test changes.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-705136747",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3852174378,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg1MjE3NDM3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3852174378",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-07T19:31:45Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-07T19:32:19Z",
      "updated_at": "2020-10-07T19:32:19Z",
      "source": {
        "issue": {
          "id": 715894279,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDk4NzI3MTI0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20094",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20094/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20094/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20094/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20094",
          "number": 20094,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Unify wallet directory lock error message",
          "body": "On master (875e1ccc9fe01e026e564dfd39a64d9a4b332a89) a redundant log message is printed, and it uses \"bitcoin\" instead of `PACKAGE_NAME`:\r\n\r\n```\r\n2020-10-06T17:36:44Z Using wallet directory /home/hebasto/walletdir\r\n2020-10-06T17:36:44Z init message: Verifying wallet(s)...\r\n2020-10-06T17:36:44Z Using BerkeleyDB version Berkeley DB 5.3.28: (September  9, 2013)\r\n2020-10-06T17:36:44Z Using wallet /home/hebasto/walletdir/wr-201006/wallet.dat\r\n2020-10-06T17:36:44Z ERROR: Error while attempting to lock directory /home/hebasto/walletdir/wr-201006: Resource temporarily unavailable\r\n2020-10-06T17:36:44Z Cannot obtain a lock on wallet directory /home/hebasto/walletdir/wr-201006. Another instance of bitcoin may be using it.\r\n2020-10-06T17:36:44Z Error: Error initializing wallet database environment \"/home/hebasto/walletdir/wr-201006\"!\r\nError: Error initializing wallet database environment \"/home/hebasto/walletdir/wr-201006\"!\r\n2020-10-06T17:36:44Z Shutdown: In progress...\r\n2020-10-06T17:36:44Z scheduler thread exit\r\n2020-10-06T17:36:44Z Shutdown: done\r\n```\r\n\r\nThis PR removes redundant `LogPrintf` call, and unifies error message wording with the similar datadir lock error message:\r\n\r\n```\r\n2020-10-06T17:34:21Z Using wallet directory /home/hebasto/walletdir\r\n2020-10-06T17:34:21Z init message: Verifying wallet(s)...\r\n2020-10-06T17:34:21Z Using BerkeleyDB version Berkeley DB 5.3.28: (September  9, 2013)\r\n2020-10-06T17:34:21Z Using wallet /home/hebasto/walletdir/wr-201006/wallet.dat\r\n2020-10-06T17:34:21Z ERROR: Error while attempting to lock directory /home/hebasto/walletdir/wr-201006: Resource temporarily unavailable\r\n2020-10-06T17:34:21Z Error: Cannot obtain a lock on wallet directory /home/hebasto/walletdir/wr-201006. Bitcoin Core is probably already running.\r\nError: Cannot obtain a lock on wallet directory /home/hebasto/walletdir/wr-201006. Bitcoin Core is probably already running.\r\n2020-10-06T17:34:21Z Shutdown: In progress...\r\n2020-10-06T17:34:21Z scheduler thread exit\r\n2020-10-06T17:34:21Z Shutdown: done\r\n```",
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/47",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47/labels",
            "id": 5347322,
            "node_id": "MDk6TWlsZXN0b25lNTM0NzMyMg==",
            "number": 47,
            "state": "closed",
            "title": "22.0",
            "description": "",
            "creator": {
              "login": "MarcoFalke",
              "id": 6399679,
              "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
              "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/MarcoFalke",
              "html_url": "https://github.com/MarcoFalke",
              "followers_url": "https://api.github.com/users/MarcoFalke/followers",
              "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
              "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
              "repos_url": "https://api.github.com/users/MarcoFalke/repos",
              "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 124,
            "created_at": "2020-04-25T00:14:49Z",
            "updated_at": "2021-09-14T07:16:53Z",
            "closed_at": "2021-09-09T12:47:52Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20094",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20094",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20094.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20094.patch"
          },
          "closed_at": "2021-05-29T20:30:00Z",
          "created_at": "2020-10-06T17:52:31Z",
          "updated_at": "2022-08-18T18:24:20Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3852282665,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg1MjI4MjY2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3852282665",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-07T20:01:57Z"
    },
    {
      "event": "commented",
      "id": 705180018,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNTE4MDAxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/705180018",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-07T20:36:55Z",
      "updated_at": "2020-10-07T20:36:55Z",
      "author_association": "MEMBER",
      "body": "I've done some testing with the behavior around a downgrading and different filenames.\r\n\r\n* Downgrading with the sqlite wallet named `wallet.dat`\r\n  * Previous versions will attempt to open the `wallet.dat` file and fail to do so because the file magic does not match BDB's. However on that failure, a salvage will be attempted. This will do nothing because the file magic does not match BDB's. The file remains unchanged when this occurs and it fails with the error message `Error: wallet.dat corrupt, salvage failed`.\r\n* Downgrading with the sqlite wallet named `wallet.sqlite`\r\n  * When attempting to load via `loadwallet`, the wallet will not be loaded as the RPC checks for existence of the `wallet.dat` file in the wallet's directory. It fails with the error message `Directory does not contain a wallet.dat file.`\r\n  * When specified with `-wallet` (either in cli options or bitcoin.conf), **a new `wallet.dat` file will be created and used.** This is a wholly new wallet unrelated to the `wallet.sqlite` file. There are no errors. This is dangerous.\r\n\r\nFor that last case, we either must keep the `wallet.dat` name, or come up with some workaround that prevents previous versions from creating a wallet.dat file.\r\n\r\nThe only possible solution I can think of is to create a dummy `wallet.dat` file to prevent previous versions from making a new file. However this is potentially dangerous because users may are expecting a `wallet.dat` file and may have tooling to interact with the `wallet.dat` file (such as creating and restoring backups) and thus they may be accidentally interacting with a useless dummy file instead of the real `wallet.sqlite` file. So I don't think this is a good approach.\r\n\r\nFurthermore, as mentioned previously, there is a lot of tooling and documentation involving the name `wallet.dat`. Users are expecting their wallet file to be named `wallet.dat`. While we have a `backupwallet` RPC and backup option in the GUI, many users probably don't use these because there is \"common knowledge\" of directly backing up the wallet.dat file. And while copying the `wallet.dat` file while Bitcoin Core is running is not a supported use case, copying it after a clean shutdown is. Users may be doing that for their backups. Retaining the `wallet.dat` naming means that those tools and documentation are still valid.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-705180018",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "reviewed",
      "id": 504655969,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0NjU1OTY5",
      "url": null,
      "actor": null,
      "commit_id": "d993dee317b93b11296282b9e97fa66e8c5ca152",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Reviewed all the things. 5f5c7741f0195a6d3fbd28b248ed547d1d39cb27 looks mostly good.\r\n\r\nWe could also stick to wallet.dat for the main wallet, but use `.sqlite` for all freshly created ones.\r\n\r\nRegarding the application ID we could [mail a patch](https://system.data.sqlite.org/index.html/doc/trunk/www/contribute.wiki) to register the mainnet, testnet, regtest and default signet [magic bytes](https://www.sqlite.org/src/artifact?ci=trunk&filename=magic.txt).\r\n",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-504655969",
      "submitted_at": "2020-10-08T14:18:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "commented",
      "id": 705606970,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNTYwNjk3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/705606970",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-08T14:25:24Z",
      "updated_at": "2020-10-08T14:25:24Z",
      "author_association": "MEMBER",
      "body": "> We could also stick to wallet.dat for the main wallet, but use `.sqlite` for all freshly created ones.\r\n\r\nNot sure what you mean by \"main wallet\"",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-705606970",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "commented",
      "id": 705612296,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNTYxMjI5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/705612296",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-08T14:33:23Z",
      "updated_at": "2020-10-08T14:33:23Z",
      "author_association": "MEMBER",
      "body": "The default wallet.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-705612296",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3855962642,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg1NTk2MjY0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3855962642",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-08T15:04:58Z"
    },
    {
      "event": "commented",
      "id": 705634683,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNTYzNDY4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/705634683",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-08T15:08:25Z",
      "updated_at": "2020-10-08T15:08:25Z",
      "author_association": "MEMBER",
      "body": "> The default wallet.\r\n\r\nNo. That's way more confusing. We also stopped making the default wallet.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-705634683",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3855998697,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg1NTk5ODY5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3855998697",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-08T15:12:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3856054500,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg1NjA1NDUwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3856054500",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-08T15:23:28Z"
    },
    {
      "event": "reviewed",
      "id": 504980287,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0OTgwMjg3",
      "url": null,
      "actor": null,
      "commit_id": "328ff35370cc30b64006480ccc80418888e1d488",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "41af0d7a79322a25423f2ea9d1ffb2ce751c338b looks very good, and thanks for doing all those manual downgrade checks!\r\n\r\nI would still want to avoid using the bdb location to store sqlite data (now just requires a small change: [diff](https://github.com/ryanofsky/bitcoin/compare/pr/sql-orig..pr/sql), [commits](https://github.com/ryanofsky/bitcoin/commits/pr/sql), [branch](https://github.com/bitcoin/bitcoin/compare/master...ryanofsky:pr/sql)) for the following reasons:\r\n\r\n- Transparency and straightforwardness. Choose a conventional name, do not disguise one type of file as another type, make it obvious to anybody to see what a wallet directory contains.\r\n- Future flexibility. Break away from the `wallet.dat` convention now so it is easier to do later. I think we should have flexibility about what files we store in wallet directories, because in the future we will want to add more things there: socket files, authentication cookies, debug logs, per-wallet static configuration files, and maybe other things. (Note that `wallet.dat` convention for newly created wallets was also not enforced between #1889 and #11687 so moving away from it again is not a new thing).\r\n- Compatibility and safety with external tools and documentation. It seems unlikely external tools or documentation would be able to cope correctly with data in a new format (I would be curious to see counterexamples). I would actually expect things written to deal with BDB files to handle SQLite data badly or even dangerously. If there is external documentation referencing `wallet.dat` files, and people are reading it expecting do something with sqlite descriptor wallets, I think it is *good* not *bad* they won't be able to find `wallet.dat` files, so they can know what they are reading is probably out of date and inapplicable.\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-705180018\r\n\r\nThe downgrading issue described https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-705180018 does not seem like a very realistic problem that would actually happen. It's also straightforward to see and fix, wouldn't result in data loss if it did happen, and is actually just more obscure version of downgrading behavior that happened previously in #11687. In #11687 newly created wallets started having their own environments and having their data stored `<wallet name>/wallet.dat` files instead of `<wallet name>` files. So if you created a new wallet post-#11687, added the wallet to your static configuration, and downgraded to pre-#11687 software, the old software would fail to find the new wallet, and create an empty one in the old location. The same thing happens with downgrading in your example: old software fails to find new location referenced in static configuration and creates an empty one in the old location. But your case is much more obscure, because in #11687, the new wallets could actually be created directly from the static configuration, while in your case it requires active RPC or GUI interactions to create the incompatible new wallets. And your case also requires the user to load the wallet in a different way than they created it, instead of the same way they created it (GUI interaction, or load RPC or load through settings.json). It doesn't seem like a real concern to me given how obscure, detectable, and recoverable it would be.\r\n\r\n\r\n\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-504980287",
      "submitted_at": "2020-10-08T18:04:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "milestoned",
      "id": 3857023530,
      "node_id": "MDE1Ok1pbGVzdG9uZWRFdmVudDM4NTcwMjM1MzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3857023530",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-08T19:25:01Z",
      "milestone": {
        "title": "0.21.0"
      }
    },
    {
      "event": "commented",
      "id": 705777007,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNTc3NzAwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/705777007",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-08T19:30:07Z",
      "updated_at": "2020-10-08T19:38:21Z",
      "author_association": "MEMBER",
      "body": "> * Compatibility and safety with external tools and documentation. It seems unlikely external tools or documentation would be able to cope correctly with data in a new format (I would be curious to see counterexamples). I would actually expect things written to deal with BDB files to handle SQLite data badly or even dangerously. If there is external documentation referencing `wallet.dat` files, and people are reading it expecting do something with sqlite descriptor wallets, I think it is _good_ not _bad_ they won't be able to find `wallet.dat` files, so they can know what they are reading is probably out of date and inapplicable.\r\n\r\nMost documentation that I have seen only discuss creating and restoring backups. In both cases, the file format does not matter. Scripts involved in both also wouldn't care about the file format itself, just the filename. For example, a cronjob that copies a `wallet.dat` file to another location is something that I would expect someone to do, and that is completely agnostic to the data format. Furthermore, for restoring wallets, as we have no equivalent of the `backupwallet` RPC, users have to copy their wallet file back into the datadir, and everything regarding restoring will instruct users to copy the file back as `wallet.dat`. These operations are all unrelated to the format of the `wallet.dat` file, but do require the file to be named `wallet.dat`.\r\n\r\nIn terms of actual tools that operate on the `wallet.dat` file, I don't think many exist. The only ones I know of are pywallet and btcrecover. In both cases, they use BDB's python bindings which will check the file magic before opening the file. In fact, I would expect that any tooling that attempts to modify the `wallet.dat` file to be using the BDB library which will check the file magic before opening the file. It doesn't make sense to me to try to interact with the `wallet.dat` file without a library because that would interfere with the BDB system. So I don't think that should really be a concern for us.\r\n\r\n> But your case is much more obscure, because in #11687, the new wallets could actually be created directly from the static configuration, while in your case it requires active RPC or GUI interactions to create the incompatible new wallets. And your case also requires the user to load the wallet in a different way than they created it, instead of the same way they created it (GUI interaction, or load RPC or load through settings.json).\r\n\r\nI don't think this case is really more obscure. Creating a wallet and then adding it to the configuration to always load it does not seem like an unusual case. Especially if people want to use a new feature, but then also always load the same wallet when they start the software.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-705777007",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3857135954,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg1NzEzNTk1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3857135954",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-08T19:56:59Z"
    },
    {
      "event": "commented",
      "id": 706212692,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjIxMjY5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/706212692",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-09T14:24:42Z",
      "updated_at": "2020-10-09T14:24:42Z",
      "author_association": "MEMBER",
      "body": "Concept ACK.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706212692",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "commented",
      "id": 706252885,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjI1Mjg4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/706252885",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-09T15:37:43Z",
      "updated_at": "2020-10-09T15:37:43Z",
      "author_association": "MEMBER",
      "body": "There is a leak, which should be suppressed (or fixed) before this is merged:\r\n\r\n```\r\n==39670==ERROR: LeakSanitizer: detected memory leaks\r\nIndirect leak of 16960 byte(s) in 147 object(s) allocated from:\r\n    #0 0x55f2dce75a7d in malloc (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/bitcoind+0x16a3a7d)\r\n    #1 0x7fc222afacfa  (/lib/x86_64-linux-gnu/libsqlite3.so.0+0x45cfa)\r\nIndirect leak of 800 byte(s) in 1 object(s) allocated from:\r\n    #0 0x55f2dce75a7d in malloc (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/bitcoind+0x16a3a7d)\r\n    #1 0x7fc222afacfa  (/lib/x86_64-linux-gnu/libsqlite3.so.0+0x45cfa)\r\n    #2 0x55f2dde14681 in SQLiteDatabase::SQLiteDatabase(boost::filesystem::path const&, boost::filesystem::path const&, bool) /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/wallet/sqlite.cpp:61:5\r\n    #3 0x55f2dde2266b in std::unique_ptr<SQLiteDatabase, std::default_delete<SQLiteDatabase> > MakeUnique<SQLiteDatabase, boost::filesystem::path const&, boost::filesystem::path&>(boost::filesystem::path const&, boost::filesystem::path&) /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/./util/memory.h:16:35\r\n    #4 0x55f2ddd07e96 in MakeDatabase(boost::filesystem::path const&, DatabaseOptions const&, DatabaseStatus&, bilingual_str&) /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/wallet/walletdb.cpp:1052:16\r\n    #5 0x55f2ddbbed8d in MakeWalletDatabase(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, DatabaseOptions const&, DatabaseStatus&, bilingual_str&) /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/wallet/wallet.cpp:3807:12\r\n    #6 0x55f2ddbbbe2f in (anonymous namespace)::LoadWalletInternal(interfaces::Chain&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, boost::optional<bool>, DatabaseOptions const&, DatabaseStatus&, bilingual_str&, std::vector<bilingual_str, std::allocator<bilingual_str> >&) /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/wallet/wallet.cpp:206:52\r\n    #7 0x55f2ddbbb7f0 in LoadWallet(interfaces::Chain&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, boost::optional<bool>, DatabaseOptions const&, DatabaseStatus&, bilingual_str&, std::vector<bilingual_str, std::allocator<bilingual_str> >&) /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/wallet/wallet.cpp:241:19\r\n    #8 0x55f2ddaafab0 in loadwallet()::$_33::operator()(RPCHelpMan const&, JSONRPCRequest const&) const /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/wallet/rpcwallet.cpp:2607:45\r\n    #9 0x55f2ddaafab0 in std::_Function_handler<UniValue (RPCHelpMan const&, JSONRPCRequest const&), loadwallet()::$_33>::_M_invoke(std::_Any_data const&, RPCHelpMan const&, JSONRPCRequest const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/std_function.h:285:9\r\n    #10 0x55f2dd3507be in std::function<UniValue (RPCHelpMan const&, JSONRPCRequest const&)>::operator()(RPCHelpMan const&, JSONRPCRequest const&) const /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/std_function.h:688:14\r\n    #11 0x55f2dd3e640c in std::_Function_handler<bool (JSONRPCRequest const&, UniValue&, bool), CRPCCommand::CRPCCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPCHelpMan (*)(), std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >)::'lambda'(JSONRPCRequest const&, UniValue&, bool)>::_M_invoke(std::_Any_data const&, JSONRPCRequest const&, UniValue&, bool&&) /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/std_function.h:285:9\r\n    #12 0x55f2dd953e43 in interfaces::(anonymous namespace)::WalletClientImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)::operator()(JSONRPCRequest const&, UniValue&, bool) const /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/interfaces/wallet.cpp:504:24\r\n    #13 0x55f2dd953e43 in std::_Function_handler<bool (JSONRPCRequest const&, UniValue&, bool), interfaces::(anonymous namespace)::WalletClientImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)>::_M_invoke(std::_Any_data const&, JSONRPCRequest const&, UniValue&, bool&&) /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/std_function.h:285:9\r\n    #14 0x55f2dcf9a5dc in std::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/std_function.h:688:14\r\n    #15 0x55f2dcf9264c in interfaces::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)::operator()(JSONRPCRequest const&, UniValue&, bool) const /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/interfaces/chain.cpp:113:24\r\n    #16 0x55f2dcf9264c in std::_Function_handler<bool (JSONRPCRequest const&, UniValue&, bool), interfaces::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)>::_M_invoke(std::_Any_data const&, JSONRPCRequest const&, UniValue&, bool&&) /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/std_function.h:285:9\r\n    #17 0x55f2dcf9a5dc in std::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/std_function.h:688:14\r\n    #18 0x55f2dd56d3cd in ExecuteCommand(CRPCCommand const&, JSONRPCRequest const&, UniValue&, bool) /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/rpc/server.cpp:466:20\r\n    #19 0x55f2dd56ccb0 in CRPCTable::execute(JSONRPCRequest const&) const /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/rpc/server.cpp:449:17\r\n    #20 0x55f2dd876d75 in HTTPReq_JSONRPC(util::Ref const&, HTTPRequest*) /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/httprpc.cpp:207:40\r\n    #21 0x55f2dd8760b8 in StartHTTPRPC(util::Ref const&)::$_0::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/httprpc.cpp:293:81\r\n    #22 0x55f2dd8760b8 in std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), StartHTTPRPC(util::Ref const&)::$_0>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/std_function.h:285:9\r\n    #23 0x55f2dd897e76 in HTTPWorkItem::operator()() /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/httpserver.cpp:56:9\r\nSUMMARY: AddressSanitizer: 17760 byte(s) leaked in 148 allocation(s). ",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706252885",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "labeled",
      "id": 3860759710,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM4NjA3NTk3MTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3860759710",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-09T15:43:26Z",
      "label": {
        "name": "Needs gitian build",
        "color": "8c9e07"
      }
    },
    {
      "event": "labeled",
      "id": 3860759713,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM4NjA3NTk3MTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3860759713",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-09T15:43:26Z",
      "label": {
        "name": "Needs Guix build",
        "color": "bfd4f2"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3861235451,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg2MTIzNTQ1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3861235451",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-09T17:56:49Z"
    },
    {
      "event": "commented",
      "id": 706323119,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjMyMzExOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/706323119",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-09T17:57:02Z",
      "updated_at": "2020-10-09T17:57:02Z",
      "author_association": "MEMBER",
      "body": "Memory leak should be fixed now.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706323119",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "commented",
      "id": 706589403,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjU4OTQwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/706589403",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-10T18:08:46Z",
      "updated_at": "2020-10-10T18:08:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--9cd9c72976c961c55c7acef8f6ba82cd-->\n### Guix builds\n\n| File | commit 12a1c3ad1a43634d2a98717e49e3f02c4acea2fe<br>(master) | commit c696e443e88ea1c0440bea0bc7e865ead6018afd<br>(master and this pull) |\n|--|--|--|\n| *-aarch64-linux-gnu-debug.tar.gz | [`4f65f0a878718595...`](https://drahtbot.space/guix/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-aarch64-linux-gnu-debug.tar.gz) | [`51227e2a2266294f...`](https://drahtbot.space/guix/bitcoin/bitcoin/c696e443e88ea1c0440bea0bc7e865ead6018afd/bitcoin-c696e443e88e-aarch64-linux-gnu-debug.tar.gz) |\n| *-aarch64-linux-gnu.tar.gz | [`5390935f30893c37...`](https://drahtbot.space/guix/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-aarch64-linux-gnu.tar.gz) | [`de4251f2bbb72d00...`](https://drahtbot.space/guix/bitcoin/bitcoin/c696e443e88ea1c0440bea0bc7e865ead6018afd/bitcoin-c696e443e88e-aarch64-linux-gnu.tar.gz) |\n| *-arm-linux-gnueabihf-debug.tar.gz | [`b4449a7611a9bf58...`](https://drahtbot.space/guix/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-arm-linux-gnueabihf-debug.tar.gz) | [`d53fe381ca62dbda...`](https://drahtbot.space/guix/bitcoin/bitcoin/c696e443e88ea1c0440bea0bc7e865ead6018afd/bitcoin-c696e443e88e-arm-linux-gnueabihf-debug.tar.gz) |\n| *-arm-linux-gnueabihf.tar.gz | [`780182080e0e5223...`](https://drahtbot.space/guix/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-arm-linux-gnueabihf.tar.gz) | [`29275b35c4d5ec6e...`](https://drahtbot.space/guix/bitcoin/bitcoin/c696e443e88ea1c0440bea0bc7e865ead6018afd/bitcoin-c696e443e88e-arm-linux-gnueabihf.tar.gz) |\n| *-riscv64-linux-gnu-debug.tar.gz | [`3f189125750ba691...`](https://drahtbot.space/guix/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-riscv64-linux-gnu-debug.tar.gz) | [`402e51f6350e5a9b...`](https://drahtbot.space/guix/bitcoin/bitcoin/c696e443e88ea1c0440bea0bc7e865ead6018afd/bitcoin-c696e443e88e-riscv64-linux-gnu-debug.tar.gz) |\n| *-riscv64-linux-gnu.tar.gz | [`850c06158d187692...`](https://drahtbot.space/guix/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-riscv64-linux-gnu.tar.gz) | [`0c2a79f290d216f6...`](https://drahtbot.space/guix/bitcoin/bitcoin/c696e443e88ea1c0440bea0bc7e865ead6018afd/bitcoin-c696e443e88e-riscv64-linux-gnu.tar.gz) |\n| *-win-unsigned.tar.gz | [`28a7d896b720f78a...`](https://drahtbot.space/guix/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-win-unsigned.tar.gz) | [`ce68b654fd0f4d9a...`](https://drahtbot.space/guix/bitcoin/bitcoin/c696e443e88ea1c0440bea0bc7e865ead6018afd/bitcoin-c696e443e88e-win-unsigned.tar.gz) |\n| *-win64-debug.zip | [`6622a2eaf0e1d08a...`](https://drahtbot.space/guix/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-win64-debug.zip) | [`583d7f3bfab8493a...`](https://drahtbot.space/guix/bitcoin/bitcoin/c696e443e88ea1c0440bea0bc7e865ead6018afd/bitcoin-c696e443e88e-win64-debug.zip) |\n| *-win64-setup-unsigned.exe | [`169a60a48ec3f8e8...`](https://drahtbot.space/guix/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-win64-setup-unsigned.exe) | [`450e7858f19847e1...`](https://drahtbot.space/guix/bitcoin/bitcoin/c696e443e88ea1c0440bea0bc7e865ead6018afd/bitcoin-c696e443e88e-win64-setup-unsigned.exe) |\n| *-win64.zip | [`7fdfc6a4d7fad0ef...`](https://drahtbot.space/guix/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-win64.zip) | [`d85e9a10688099d5...`](https://drahtbot.space/guix/bitcoin/bitcoin/c696e443e88ea1c0440bea0bc7e865ead6018afd/bitcoin-c696e443e88e-win64.zip) |\n| *-x86_64-linux-gnu-debug.tar.gz | [`bd049e814a77606f...`](https://drahtbot.space/guix/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-x86_64-linux-gnu-debug.tar.gz) | [`731f65ff20f9243f...`](https://drahtbot.space/guix/bitcoin/bitcoin/c696e443e88ea1c0440bea0bc7e865ead6018afd/bitcoin-c696e443e88e-x86_64-linux-gnu-debug.tar.gz) |\n| *-x86_64-linux-gnu.tar.gz | [`e4f88e9bc7c9238a...`](https://drahtbot.space/guix/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-x86_64-linux-gnu.tar.gz) | [`128552606b64ca13...`](https://drahtbot.space/guix/bitcoin/bitcoin/c696e443e88ea1c0440bea0bc7e865ead6018afd/bitcoin-c696e443e88e-x86_64-linux-gnu.tar.gz) |\n| *.tar.gz | [`4ac97295a058753e...`](https://drahtbot.space/guix/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43.tar.gz) | [`2eeb127fa6d4392d...`](https://drahtbot.space/guix/bitcoin/bitcoin/c696e443e88ea1c0440bea0bc7e865ead6018afd/bitcoin-c696e443e88e.tar.gz) |\n| guix_build.log | [`bd2e0fe51024ce8c...`](https://drahtbot.space/guix/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/guix_build.log) | [`d8089e2ba4cd7606...`](https://drahtbot.space/guix/bitcoin/bitcoin/c696e443e88ea1c0440bea0bc7e865ead6018afd/guix_build.log) |\n| guix_build.log.diff |  | [`4d744e23deababeb...`](https://drahtbot.space/guix/bitcoin/bitcoin/c696e443e88ea1c0440bea0bc7e865ead6018afd/guix_build.log.diff) |\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706589403",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "unlabeled",
      "id": 3862989144,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mzg2Mjk4OTE0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3862989144",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-10T18:08:46Z",
      "label": {
        "name": "Needs Guix build",
        "color": "bfd4f2"
      }
    },
    {
      "event": "reviewed",
      "id": 506142382,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTQyMzgy",
      "url": null,
      "actor": null,
      "commit_id": "5fc97fa479136e61e8869b77ba731900c3233fcf",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "- [x] 5fc97fa47 Add libsqlite3\r\n- [x] bd18fe80c Add sqlite to travis and depends\r\n- [x] 1a2eec03f Add SQLiteDatabase and SQLiteBatch dummy classes\r\n- [x] e6aca3ab8 Implement SQLiteDatabaseVersion\r\n- [x] 1ad2d6a39 Constructors, destructors, and relevant private fields for SQLiteDatabase/Batch\r\n- [x] 70a2c6585 Initialize and Shutdown sqlite3 globals\r\n- [x] 6720df53b Implement SQLiteDatabase::Open\r\n- [x] ccfbbdb1d Implement SQLiteDatabase::Close\r\n- [x] 011fa1e26 Implement SQLiteBatch::Close\r\n- [x] 83952c599 Add SetupSQLStatements\r\n- [x] 14b81e521 Implement SQLiteBatch::ReadKey, WriteKey, EraseKey, and HasKey\r\n- [x] 293bdfcdc Implement SQLiteBatch::StartCursor, ReadAtCursor, and CloseCursor\r\n- [x] 8eee65c46 Implement SQLiteDatabase::Backup\r\n- [x] 7832646a7 Implement SQLiteDatabase::TxnBegin, TxnCommit, and TxnAbort\r\n- [x] 336646136 Implement SQLiteDatabase::Rewrite\r\n- [x] c3aeda3d2 Implement SQLiteDatabase::Verify\r\n- [x] 9cf37ae6a Implement SQLiteDatabase::MakeBatch\r\n- [x] c4b6cf7ed Determine wallet file type based on file magic\r\n- [x] 5f17c73e8 walletutil: Wallets can also be sqlite\r\n- [x] 66df08765 Use SQLite for descriptor wallets\r\n- [x] 87e2d29ba Use network magic as sqlite wallet application ID\r\n- [x] 10ceb039e Set and check the sqlite user version\r\n- [x] 08420e0fb wallet: Enforce sqlite serialized threading mode\r\n- [x] 05c427a06 Include sqlite3 in documentation\r\n- [x] be8739b64 Run dumpwallet for legacy wallets only in  wallet_backup.py\r\n- [x] e680b23e2 Update wallet_multiwallet.py for descriptor and sqlite wallets",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-506142382",
      "submitted_at": "2020-10-11T05:14:52Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "reviewed",
      "id": 506144683,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTQ0Njgz",
      "url": null,
      "actor": null,
      "commit_id": "011fa1e2657d624593bb7f23f697a741f7b51577",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-506144683",
      "submitted_at": "2020-10-11T05:21:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "reviewed",
      "id": 506145409,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTQ1NDA5",
      "url": null,
      "actor": null,
      "commit_id": "1a2eec03f0dc7731d5c199a97db148534ce174a2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-506145409",
      "submitted_at": "2020-10-11T05:56:17Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "reviewed",
      "id": 506146538,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTQ2NTM4",
      "url": null,
      "actor": null,
      "commit_id": "1a2eec03f0dc7731d5c199a97db148534ce174a2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-506146538",
      "submitted_at": "2020-10-11T06:04:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "reviewed",
      "id": 506147626,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTQ3NjI2",
      "url": null,
      "actor": null,
      "commit_id": "70a2c658549c8a0caa3e58dcc7894d2bb8872cd5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-506147626",
      "submitted_at": "2020-10-11T06:35:55Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "reviewed",
      "id": 506148599,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTQ4NTk5",
      "url": null,
      "actor": null,
      "commit_id": "6720df53bd5d4e551c101743c4050bd0c7682238",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-506148599",
      "submitted_at": "2020-10-11T06:48:35Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "reviewed",
      "id": 506149918,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTQ5OTE4",
      "url": null,
      "actor": null,
      "commit_id": "83952c59940e4b03bf63b48c0f83b460f988d4be",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-506149918",
      "submitted_at": "2020-10-11T07:02:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "reviewed",
      "id": 506150165,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTUwMTY1",
      "url": null,
      "actor": null,
      "commit_id": "8eee65c46d3b897fca9e07b092f3714e3bcdb79e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-506150165",
      "submitted_at": "2020-10-11T07:08:13Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "reviewed",
      "id": 506150721,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTUwNzIx",
      "url": null,
      "actor": null,
      "commit_id": "c3aeda3d2f7d7b34b8a35ccea478161b0ca2c80d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-506150721",
      "submitted_at": "2020-10-11T07:36:36Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "commented",
      "id": 706666938,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjY2NjkzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/706666938",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T08:01:37Z",
      "updated_at": "2020-10-11T08:01:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--a722867cd34abeea1fadc8d60700f111-->\n### Gitian builds\n\n| File | commit 12a1c3ad1a43634d2a98717e49e3f02c4acea2fe<br>(master) | commit b0ebf88b908191fc78591742ce447cb75a233986<br>(master and this pull) |\n|--|--|--|\n| *-aarch64-linux-gnu-debug.tar.gz | [`fecb0fbc29aa125d...`](https://drahtbot.space/gitian/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-aarch64-linux-gnu-debug.tar.gz) |  |\n| *-aarch64-linux-gnu.tar.gz | [`e90c25982e611c5c...`](https://drahtbot.space/gitian/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-aarch64-linux-gnu.tar.gz) |  |\n| *-arm-linux-gnueabihf-debug.tar.gz | [`6559a6ae4dad8c82...`](https://drahtbot.space/gitian/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-arm-linux-gnueabihf-debug.tar.gz) |  |\n| *-arm-linux-gnueabihf.tar.gz | [`eed6310fb4871ebf...`](https://drahtbot.space/gitian/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-arm-linux-gnueabihf.tar.gz) |  |\n| *-osx-unsigned.dmg | [`35fdc8ee1eab8cc2...`](https://drahtbot.space/gitian/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-osx-unsigned.dmg) | [`2ea1af4909e756a4...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b0ebf88b908191fc78591742ce447cb75a233986/bitcoin-b0ebf88b9081-osx-unsigned.dmg) |\n| *-osx64.tar.gz | [`1ef84caa4345fb7c...`](https://drahtbot.space/gitian/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-osx64.tar.gz) | [`74ded45146a54cbd...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b0ebf88b908191fc78591742ce447cb75a233986/bitcoin-b0ebf88b9081-osx64.tar.gz) |\n| *-riscv64-linux-gnu-debug.tar.gz | [`17a6a35c296bff97...`](https://drahtbot.space/gitian/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-riscv64-linux-gnu-debug.tar.gz) |  |\n| *-riscv64-linux-gnu.tar.gz | [`a2b987fc61446248...`](https://drahtbot.space/gitian/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-riscv64-linux-gnu.tar.gz) |  |\n| *-win64-debug.zip | [`dfd87b5c51d5eff9...`](https://drahtbot.space/gitian/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-win64-debug.zip) |  |\n| *-win64-setup-unsigned.exe | [`178c07068d74c8f6...`](https://drahtbot.space/gitian/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-win64-setup-unsigned.exe) |  |\n| *-win64.zip | [`6f5cbab8cf6a5393...`](https://drahtbot.space/gitian/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-win64.zip) |  |\n| *-x86_64-linux-gnu-debug.tar.gz | [`36ecaedc1019ccf8...`](https://drahtbot.space/gitian/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-x86_64-linux-gnu-debug.tar.gz) |  |\n| *-x86_64-linux-gnu.tar.gz | [`4582ea38dab8d285...`](https://drahtbot.space/gitian/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-x86_64-linux-gnu.tar.gz) |  |\n| *.tar.gz | [`4ac97295a058753e...`](https://drahtbot.space/gitian/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43.tar.gz) | [`35d121f0ddba6d64...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b0ebf88b908191fc78591742ce447cb75a233986/bitcoin-b0ebf88b9081.tar.gz) |\n| bitcoin-core-linux-0.21-res.yml | [`5b3aa4bc7fff3993...`](https://drahtbot.space/gitian/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-core-linux-0.21-res.yml) |  |\n| bitcoin-core-osx-0.21-res.yml | [`0957f7923504cb00...`](https://drahtbot.space/gitian/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-core-osx-0.21-res.yml) | [`a2e79e272c71e553...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b0ebf88b908191fc78591742ce447cb75a233986/bitcoin-core-osx-0.21-res.yml) |\n| bitcoin-core-win-0.21-res.yml | [`6290abc0172f4a35...`](https://drahtbot.space/gitian/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-core-win-0.21-res.yml) |  |\n| linux-build.log | [`44539054a98891ad...`](https://drahtbot.space/gitian/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/linux-build.log) | [`0e3c5a0d40f89435...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b0ebf88b908191fc78591742ce447cb75a233986/linux-build.log) |\n| osx-build.log | [`bb31f8dd52696bba...`](https://drahtbot.space/gitian/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/osx-build.log) | [`aeb74c5954aff93b...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b0ebf88b908191fc78591742ce447cb75a233986/osx-build.log) |\n| win-build.log | [`201a92f648565719...`](https://drahtbot.space/gitian/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/win-build.log) | [`8ca2725205af2d76...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b0ebf88b908191fc78591742ce447cb75a233986/win-build.log) |\n| bitcoin-core-osx-0.21-res.yml.diff |  | [`455118e6b5f334f4...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b0ebf88b908191fc78591742ce447cb75a233986/bitcoin-core-osx-0.21-res.yml.diff) |\n| linux-build.log.diff |  | [`90b3ac044b5f9109...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b0ebf88b908191fc78591742ce447cb75a233986/linux-build.log.diff) |\n| osx-build.log.diff |  | [`e9474113fe28d156...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b0ebf88b908191fc78591742ce447cb75a233986/osx-build.log.diff) |\n| win-build.log.diff |  | [`e05af0e847215789...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b0ebf88b908191fc78591742ce447cb75a233986/win-build.log.diff) |\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706666938",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "unlabeled",
      "id": 3863448827,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mzg2MzQ0ODgyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3863448827",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T08:01:38Z",
      "label": {
        "name": "Needs gitian build",
        "color": "8c9e07"
      }
    },
    {
      "event": "reviewed",
      "id": 506152896,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTUyODk2",
      "url": null,
      "actor": null,
      "commit_id": "c4b6cf7ed72490df24a2e2d28d947002f3e6ef16",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-506152896",
      "submitted_at": "2020-10-11T08:03:23Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "reviewed",
      "id": 506154917,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTU0OTE3",
      "url": null,
      "actor": null,
      "commit_id": "5f17c73e8b890c92d2dc74e0e3bb34d217bc5160",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Approach ACK e680b23e22b1c15ee8e42a375a68248e821f76eb.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-506154917",
      "submitted_at": "2020-10-11T08:33:08Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "commented",
      "id": 706674785,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjY3NDc4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/706674785",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T09:12:44Z",
      "updated_at": "2020-10-11T09:12:44Z",
      "author_association": "MEMBER",
      "body": "Both windows and linux cross builds fail with:\r\n\r\n```\r\nBuilding sqlite...\r\nmake[1]: Entering directory '/home/ubuntu/build/bitcoin/depends/work/build/x86_64-w64-mingw32/sqlite/3320100-a2b073ad5d5'\r\n/bin/bash ./libtool  --tag=CC   --mode=compile x86_64-w64-mingw32-gcc -DPACKAGE_NAME=\\\"sqlite\\\" -DPACKAGE_TARNAME=\\\"sqlite\\\" -DPACKAGE_VERSION=\\\"3.32.1\\\" -DPACKAGE_STRING=\\\"sqlite\\ 3.32.1\\\" -DPACKAGE_BUGREPORT=\\\"http://www.sqlite.org\\\" -DPACKAGE_URL=\\\"\\\" -DPACKAGE=\\\"sqlite\\\" -DVERSION=\\\"3.32.1\\\" -D_FILE_OFFSET_BITS=64 -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DLT_OBJDIR=\\\".libs/\\\" -DHAVE_USLEEP=1 -DHAVE_DECL_STRERROR_R=0 -I.   -I/home/ubuntu/build/bitcoin/depends/x86_64-w64-mingw32/include     -D_REENTRANT=1 -DSQLITE_THREADSAFE=1 -DSQLITE_OMIT_LOAD_EXTENSION=1 -DSQLITE_ENABLE_FTS4 -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_GEOPOLY  -pipe -O2     -MT sqlite3.lo -MD -MP -MF .deps/sqlite3.Tpo -c -o sqlite3.lo sqlite3.c\r\nlibtool: compile:  x86_64-w64-mingw32-gcc -DPACKAGE_NAME=\\\"sqlite\\\" -DPACKAGE_TARNAME=\\\"sqlite\\\" -DPACKAGE_VERSION=\\\"3.32.1\\\" \"-DPACKAGE_STRING=\\\"sqlite 3.32.1\\\"\" -DPACKAGE_BUGREPORT=\\\"http://www.sqlite.org\\\" -DPACKAGE_URL=\\\"\\\" -DPACKAGE=\\\"sqlite\\\" -DVERSION=\\\"3.32.1\\\" -D_FILE_OFFSET_BITS=64 -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DLT_OBJDIR=\\\".libs/\\\" -DHAVE_USLEEP=1 -DHAVE_DECL_STRERROR_R=0 -I. -I/home/ubuntu/build/bitcoin/depends/x86_64-w64-mingw32/include -D_REENTRANT=1 -DSQLITE_THREADSAFE=1 -DSQLITE_OMIT_LOAD_EXTENSION=1 -DSQLITE_ENABLE_FTS4 -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_GEOPOLY -pipe -O2 -MT sqlite3.lo -MD -MP -MF .deps/sqlite3.Tpo -c sqlite3.c -o sqlite3.o\r\nx86_64-w64-mingw32-gcc-posix: error: 3.32.1\": No such file or directory\r\nMakefile:533: recipe for target 'sqlite3.lo' failed\r\nmake[1]: *** [sqlite3.lo] Error 1\r\nmake[1]: Leaving directory '/home/ubuntu/build/bitcoin/depends/work/build/x86_64-w64-mingw32/sqlite/3320100-a2b073ad5d5'\r\nfuncs.mk:265: recipe for target '/home/ubuntu/build/bitcoin/depends/work/build/x86_64-w64-mingw32/sqlite/3320100-a2b073ad5d5/./.stamp_built' failed\r\nmake: *** [/home/ubuntu/build/bitcoin/depends/work/build/x86_64-w64-mingw32/sqlite/3320100-a2b073ad5d5/./.stamp_built] Error 2\r\nmake: Leaving directory '/home/ubuntu/build/bitcoin/depends'\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706674785",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "reviewed",
      "id": 506159925,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTU5OTI1",
      "url": null,
      "actor": null,
      "commit_id": "e680b23e22b1c15ee8e42a375a68248e821f76eb",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-506159925",
      "submitted_at": "2020-10-11T09:13:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "commented",
      "id": 706676467,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjY3NjQ2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/706676467",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T09:27:45Z",
      "updated_at": "2020-10-11T09:27:45Z",
      "author_association": "MEMBER",
      "body": "@MarcoFalke \r\n> Both windows and linux cross builds fail with:\r\n\r\nMind providing your setup, as I cannot reproduce fail?",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706676467",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "mentioned",
      "id": 3863510159,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzg2MzUxMDE1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3863510159",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T09:27:46Z"
    },
    {
      "event": "subscribed",
      "id": 3863510160,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4NjM1MTAxNjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3863510160",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T09:27:46Z"
    },
    {
      "event": "commented",
      "id": 706677646,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjY3NzY0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/706677646",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T09:38:07Z",
      "updated_at": "2020-10-11T09:38:07Z",
      "author_association": "MEMBER",
      "body": "It is the gitian setup",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706677646",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "commented",
      "id": 706683704,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjY4MzcwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/706683704",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T10:32:09Z",
      "updated_at": "2020-10-11T10:32:09Z",
      "author_association": "MEMBER",
      "body": "> It is the gitian setup\r\n\r\nConfirm fail, unfortunately.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706683704",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "reviewed",
      "id": 506156951,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTU2OTUx",
      "url": null,
      "actor": null,
      "commit_id": "1a2eec03f0dc7731d5c199a97db148534ce174a2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "- [x] 5fc97fa479136e61e8869b77ba731900c3233fcf Add libsqlite3\r\n- [x] bd18fe80cacc25054c561aa8460752b59be0a78c Add sqlite to travis and depends\r\n- [x] 1a2eec03f0dc7731d5c199a97db148534ce174a2 Add SQLiteDatabase and SQLiteBatch dummy classes\r\n- [x] e6aca3ab82cbb878181db48bc628b2298e67cf26 Implement SQLiteDatabaseVersion\r\n- [x] 1ad2d6a396017af98a90a667bf4e75e5d452ebb7 Constructors, destructors, and relevant private fields for SQLiteDatabase/Batch\r\n- [x] 70a2c658549c8a0caa3e58dcc7894d2bb8872cd5 Initialize and Shutdown sqlite3 globals\r\n- [x] 6720df53bd5d4e551c101743c4050bd0c7682238 Implement SQLiteDatabase::Open\r\n- [x] ccfbbdb1d8fdedb6058599a6bffd7dff521f5b09 Implement SQLiteDatabase::Close\r\n- [x] 011fa1e2657d624593bb7f23f697a741f7b51577 Implement SQLiteBatch::Close\r\n- [x] 83952c59940e4b03bf63b48c0f83b460f988d4be Add SetupSQLStatements\r\n- [x] 14b81e521c310cb616b7920b5625b704ef1e1899 Implement SQLiteBatch::ReadKey, WriteKey, EraseKey, and HasKey\r\n- [x] 293bdfcdc1825e1b288ee09584cf26979a4d5900 Implement SQLiteBatch::StartCursor, ReadAtCursor, and CloseCursor\r\n- [x] 8eee65c46d3b897fca9e07b092f3714e3bcdb79e Implement SQLiteDatabase::Backup\r\n- [x] 7832646a72abcd6bdac681945fdf139c6666a693 Implement SQLiteDatabase::TxnBegin, TxnCommit, and TxnAbort\r\n- [x] 336646136065d33d61bd8b336c77c44c609c922b Implement SQLiteDatabase::Rewrite\r\n- [x] c3aeda3d2f7d7b34b8a35ccea478161b0ca2c80d Implement SQLiteDatabase::Verify\r\n- [x] 9cf37ae6a6a54c8054c69841d04376bd5b7a3c7b Implement SQLiteDatabase::MakeBatch\r\n- [x] c4b6cf7ed72490df24a2e2d28d947002f3e6ef16 Determine wallet file type based on file magic\r\n- [x] 5f17c73e8b890c92d2dc74e0e3bb34d217bc5160 walletutil: Wallets can also be sqlite\r\n- [x] 66df08765b9510f608307860a42664f02346f56f Use SQLite for descriptor wallets\r\n- [x] 87e2d29baca9d08e90ed401bf360b9b7e866c62c Use network magic as sqlite wallet application ID\r\n- [x] 10ceb039e8361d91a9169da8f68872ad4b564403 Set and check the sqlite user version\r\n- [x] 08420e0fb5638dd3e5f4f1ba615c2935d14a441c wallet: Enforce sqlite serialized threading mode\r\n- [x] 05c427a0654d2fe0907d8a755e74a2e2d0a51f07 Include sqlite3 in documentation\r\n- [x] be8739b645132e66d47ed34b20e20fcb9972b0ca Run dumpwallet for legacy wallets only in  wallet_backup.py\r\n- [ ] e680b23e22b1c15ee8e42a375a68248e821f76eb Update wallet_multiwallet.py for descriptor and sqlite wallets\r\n\r\nCode review + compiled + functional tests run ACK e680b23e22b1c15ee8e42a375a68248e821f76eb\r\n\r\nTake my review of the build system/lib stuff with a grain of salt as I don't know much about how that works (mainly in terms of the first commits adding the sqlite3 library).\r\n\r\nThere's probably a little bit *too* much commit-split, I feel a few small ones could be squashed, but I appreciate the ease of review. Thanks for doing this achow101.",
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-506156951",
      "submitted_at": "2020-10-11T10:37:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "commented",
      "id": 706686229,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjY4NjIyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/706686229",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T10:54:06Z",
      "updated_at": "2020-10-11T10:54:06Z",
      "author_association": "MEMBER",
      "body": "@MarcoFalke \r\n\r\nFor `HOST=x86_64-w64-mingw32` the diff between local and gitian logs:\r\n\r\n```diff\r\n@@ -4,7 +4,8 @@\r\n checking whether build environment is sane... yes\r\n checking for x86_64-w64-mingw32-strip... x86_64-w64-mingw32-strip\r\n checking for a thread-safe mkdir -p... /bin/mkdir -p\r\n-checking for gawk... gawk\r\n+checking for gawk... no\r\n+checking for mawk... mawk\r\n checking whether make sets $(MAKE)... yes\r\n checking whether make supports nested variables... yes\r\n checking for style of include used by make... GNU\r\n@@ -96,7 +97,7 @@\r\n checking editline/readline.h usability... no\r\n checking editline/readline.h presence... no\r\n checking for editline/readline.h... no\r\n-checking for library containing pthread_create... -lpthread\r\n+checking for library containing pthread_create... none required\r\n checking for library containing pthread_mutexattr_init... none required\r\n checking for whether to support dynamic extensions... no\r\n checking for library containing log... none required\r\n```",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706686229",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "mentioned",
      "id": 3863570062,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzg2MzU3MDA2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3863570062",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T10:54:06Z"
    },
    {
      "event": "subscribed",
      "id": 3863570063,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4NjM1NzAwNjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3863570063",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T10:54:06Z"
    },
    {
      "event": "commented",
      "id": 706707219,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjcwNzIxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/706707219",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T13:46:13Z",
      "updated_at": "2020-10-11T13:46:13Z",
      "author_association": "MEMBER",
      "body": "@MarcoFalke \r\n\r\nI've managed to fix gitian build for Windows with the following patch:\r\n```diff\r\n--- a/contrib/gitian-descriptors/gitian-win.yml\r\n+++ b/contrib/gitian-descriptors/gitian-win.yml\r\n@@ -81,7 +81,7 @@ script: |\r\n         echo \"REAL=\\`which -a ${i}-${prog}-posix | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\r\n         echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${i}-${prog}\r\n         echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\r\n-        echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\r\n+        echo \"\\$REAL \\\"\\$@\\\"\" >> $WRAP_DIR/${i}-${prog}\r\n         chmod +x ${WRAP_DIR}/${i}-${prog}\r\n     done\r\n   done\r\n```\r\n\r\nTesting analogous patch for Linux.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706707219",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "mentioned",
      "id": 3863699347,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzg2MzY5OTM0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3863699347",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T13:46:13Z"
    },
    {
      "event": "subscribed",
      "id": 3863699349,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4NjM2OTkzNDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3863699349",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T13:46:13Z"
    },
    {
      "event": "commented",
      "id": 706709307,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjcwOTMwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/706709307",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T14:02:09Z",
      "updated_at": "2020-10-11T14:02:09Z",
      "author_association": "MEMBER",
      "body": "Making gitian builds now for https://github.com/hebasto/bitcoin/commits/pr19077-1011-gitian branch with a fixup https://github.com/hebasto/bitcoin/commit/149af3c5eff6da055affc695baa063fac631d4ba commit.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706709307",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "commented",
      "id": 706717533,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjcxNzUzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/706717533",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T14:59:40Z",
      "updated_at": "2020-10-11T15:44:44Z",
      "author_association": "MEMBER",
      "body": "The results of gitian builds with the fixup https://github.com/hebasto/bitcoin/commit/149af3c5eff6da055affc695baa063fac631d4ba commit.\r\n\r\n- Linux:\r\n```\r\nGenerating report\r\n036ba5ede9ee30e3d8bb093f1f66c574550f41385db973c34854a3d1ec38cc10  bitcoin-149af3c5eff6-aarch64-linux-gnu-debug.tar.gz\r\n66046c1e1cceab6183cf856fdfbf9a1b6df3bc88384aecfc6161e0f354a9ecb4  bitcoin-149af3c5eff6-aarch64-linux-gnu.tar.gz\r\ncc8396b34216e3164c609848ea5213cd51e2e2cf4f583233ed1c5e86521cb71d  bitcoin-149af3c5eff6-arm-linux-gnueabihf-debug.tar.gz\r\n901293fb993fec5893e7109379c3b6a5a6a6cf1f04251e2b60c42aa4c1244312  bitcoin-149af3c5eff6-arm-linux-gnueabihf.tar.gz\r\n475f4c07e0888fadbab1a346e9b39ea2dc50b1825fce7483b67f47e4214f2844  bitcoin-149af3c5eff6-riscv64-linux-gnu-debug.tar.gz\r\nfd3973a31bfaebf24c7d9224ed04896628e0b3dc82c2ad6ad86eaeaf4d6f9393  bitcoin-149af3c5eff6-riscv64-linux-gnu.tar.gz\r\ndac57bab1455f57b21a64bedd85ed4a9dab176e7d86147b8ab9c5c838fab88de  bitcoin-149af3c5eff6-x86_64-linux-gnu-debug.tar.gz\r\n8881c1134d4b3739b4cc62cfbe038959b5245f26481c7cd8e5804abd0621cea4  bitcoin-149af3c5eff6-x86_64-linux-gnu.tar.gz\r\n1b74737382a231f86e4c68c48f91381e9f281465ade4fb684c9b49d38833338b  src/bitcoin-149af3c5eff6.tar.gz\r\n3bfc49c6a2a1115ed99519ece78f7d23aa13530f01d0c18bc8820eb3fe6afc63  bitcoin-core-linux-0.21-res.yml\r\nDone.\r\n```\r\n\r\n- Windows:\r\n```\r\nGenerating report\r\n3f821d58cdef38caae5d4d373244e4d00180ac7308b9cf4802c7e7cf5e765ee6  bitcoin-149af3c5eff6-win-unsigned.tar.gz\r\n38c2a37be5c1b291ff9769cf9480925292b8d7d7406b8de14a062095dbf4f9b0  bitcoin-149af3c5eff6-win64-debug.zip\r\nddf6699effdb4393aee1c9284b051cd144f807a591a92eeee932d19d1369e637  bitcoin-149af3c5eff6-win64-setup-unsigned.exe\r\n2fa1f5bad41d7f13f36af3416240f19a50c9194986e1290ba7ef54749d8b29e7  bitcoin-149af3c5eff6-win64.zip\r\n1b74737382a231f86e4c68c48f91381e9f281465ade4fb684c9b49d38833338b  src/bitcoin-149af3c5eff6.tar.gz\r\n1001ce6772ef2ea53a232566c51b449ed284d3fc248a80c19b49aa5073e2babd  bitcoin-core-win-0.21-res.yml\r\nDone.\r\n```\r\n\r\n- macOS:\r\n```\r\nGenerating report\r\n64b4dafb1c3a53087274d03445e07e6f08331c3eb73ebe3d268051cbfaa5bcce  bitcoin-149af3c5eff6-osx-unsigned.dmg\r\n57ae97d37eb05b92f9cb25a53e3103b4c2fe7cd6e6bfbcf3715a92c0a229c74d  bitcoin-149af3c5eff6-osx-unsigned.tar.gz\r\n2a66c1e4731414ba4a466966cf9efde7e4c4732c9906cd486beb24b83401c5d2  bitcoin-149af3c5eff6-osx64.tar.gz\r\n1b74737382a231f86e4c68c48f91381e9f281465ade4fb684c9b49d38833338b  src/bitcoin-149af3c5eff6.tar.gz\r\n520dd59fc43e9f81bd41ef97bfc974cf04cbcc2b59f8e580696ab9ac4c2f602b  bitcoin-core-osx-0.21-res.yml\r\nDone.\r\n```",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706717533",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3863832118,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg2MzgzMjExOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3863832118",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T16:10:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3863836310,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg2MzgzNjMxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3863836310",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T16:14:37Z"
    },
    {
      "event": "commented",
      "id": 706728469,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjcyODQ2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/706728469",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T16:14:59Z",
      "updated_at": "2020-10-11T16:14:59Z",
      "author_association": "MEMBER",
      "body": "Addressed comments and also pulled in @hebasto's diff for the gitian build.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706728469",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "mentioned",
      "id": 3863836684,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzg2MzgzNjY4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3863836684",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T16:14:59Z"
    },
    {
      "event": "subscribed",
      "id": 3863836686,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4NjM4MzY2ODY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3863836686",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T16:14:59Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3863848776,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg2Mzg0ODc3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3863848776",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T16:28:06Z"
    },
    {
      "event": "reviewed",
      "id": 506196107,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTk2MTA3",
      "url": null,
      "actor": null,
      "commit_id": "78eb7ade8a99c1fea4562115944f709fd28b14e6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-506196107",
      "submitted_at": "2020-10-11T16:35:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3863857970,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg2Mzg1Nzk3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3863857970",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T16:37:52Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3863859184,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg2Mzg1OTE4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3863859184",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T16:39:06Z"
    },
    {
      "event": "reviewed",
      "id": 506203220,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MjAzMjIw",
      "url": null,
      "actor": null,
      "commit_id": "06765509e1f1b1bc0d037eb16363aa5570a256c7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 06765509e1f1b1bc0d037eb16363aa5570a256c7, tested basic wallet functionality on Linux Mint 20 (x86_64, both the gitian build and the build against system libs).\r\n\r\nFor the `sqlite` package verified the download path and the downloaded file hash.\r\n\r\nMy gitian builds:\r\n- Linux\r\n```\r\nGenerating report\r\n1feef4ad6511461092238368ae938bd6b1acc0a4a06a29e3a7a7f90418d3c0ca  bitcoin-06765509e1f1-aarch64-linux-gnu-debug.tar.gz\r\n3ee55bdf5e3d6e8c1bd7d714e1f6ceb878a3076732df0ae0ebb37706ac816b6a  bitcoin-06765509e1f1-aarch64-linux-gnu.tar.gz\r\n7365d73f6b6c77e9c12dbbceab87bd5c4c74b9cacae8c092151382fc3a5f1836  bitcoin-06765509e1f1-arm-linux-gnueabihf-debug.tar.gz\r\n36729122b8efade6edb934b89d73415ab3fbc189467a20acee337b67fef4fae7  bitcoin-06765509e1f1-arm-linux-gnueabihf.tar.gz\r\n72cac920a5df32813071fb4352a76716944252ad75e15f6a6036e73e89524795  bitcoin-06765509e1f1-riscv64-linux-gnu-debug.tar.gz\r\n6e0cc2651832028ecd03b411e25ca269a6070c566fc1f75918b29680db609a77  bitcoin-06765509e1f1-riscv64-linux-gnu.tar.gz\r\n55e0f572fa0b69917c332896c9aed9d83a727feebab35f08980c2e77ab002736  bitcoin-06765509e1f1-x86_64-linux-gnu-debug.tar.gz\r\nb26ef2057752d18025156be6aba974154e1acbe703908b456e14b16671bfc34b  bitcoin-06765509e1f1-x86_64-linux-gnu.tar.gz\r\n2b663bb8d2468cfaa823cac67f9eca92b922aa0f90db8a4d0f41a3d5aae1542d  src/bitcoin-06765509e1f1.tar.gz\r\n17091a6409fc0162f4f7e17fc4d23fcbed39e3c8f9a473a80132cdddc5a4dbca  bitcoin-core-linux-0.21-res.yml\r\nDone.\r\n```\r\n- Windows:\r\n```\r\nGenerating report\r\neb1ee4dbae8ca5d0d75641cf9aaf3b446a85727a3a4ba0e04400356004974098  bitcoin-06765509e1f1-win-unsigned.tar.gz\r\n7119d7f6e9c244a30e5789df9138f72e6dc2b3492617df5de3f0c2b33eac03c4  bitcoin-06765509e1f1-win64-debug.zip\r\n28f39e9ecb9713beaccce0d53875ffc794b8f7d445db6c8f22c35c714e0538c5  bitcoin-06765509e1f1-win64-setup-unsigned.exe\r\n3f1c2cf561acaaacad962d7bc02c073c7cc51a4fd62dbb8856384f2fe8240258  bitcoin-06765509e1f1-win64.zip\r\n2b663bb8d2468cfaa823cac67f9eca92b922aa0f90db8a4d0f41a3d5aae1542d  src/bitcoin-06765509e1f1.tar.gz\r\nddf8a0c06e861aba537fa2296684cb272fafe0fdee0b3341d001b8eec53625dd  bitcoin-core-win-0.21-res.yml\r\nDone.\r\n```\r\n- macOS\r\n```\r\nGenerating report\r\nbb876375a152f7950acf52d5443a1bc8f740c31872efc3c3959c9b4ee6cd6b47  bitcoin-06765509e1f1-osx-unsigned.dmg\r\n2506a18f32aab05bbb9ce77a87cefb174148fd082319718218072dc758d7e892  bitcoin-06765509e1f1-osx-unsigned.tar.gz\r\n037df154fc45314b483ad40cd714149dc89c1119c841172bc798473173624ba4  bitcoin-06765509e1f1-osx64.tar.gz\r\n2b663bb8d2468cfaa823cac67f9eca92b922aa0f90db8a4d0f41a3d5aae1542d  src/bitcoin-06765509e1f1.tar.gz\r\n071185053a49c967be64d8fd9327c7033e6defc0b4e8b4c31112bb9c591704d4  bitcoin-core-osx-0.21-res.yml\r\nDone.\r\n```\r\n\r\n---\r\n\r\nThere are two non-blocking comments:\r\n\r\n1. It would be nice to mention the `wallet.dat-journal` file in the `files.md` doc.\r\n\r\n2. Every time a wallet is loaded I can see a database exception message in the log:\r\n```\r\ninit message: Loading wallet...\r\n...\r\nReadKey: Unable to execute statement :no more rows available\r\n```\r\n\r\n2a. Is it intended to place a space before `:` rather after it?",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-506203220",
      "submitted_at": "2020-10-11T18:10:43Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "labeled",
      "id": 3863972056,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM4NjM5NzIwNTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3863972056",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T18:45:40Z",
      "label": {
        "name": "Needs gitian build",
        "color": "8c9e07"
      }
    },
    {
      "event": "labeled",
      "id": 3863972059,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM4NjM5NzIwNTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3863972059",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T18:45:40Z",
      "label": {
        "name": "Needs Guix build",
        "color": "bfd4f2"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3863972974,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg2Mzk3Mjk3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3863972974",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T18:46:45Z"
    },
    {
      "event": "commented",
      "id": 706750312,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjc1MDMxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/706750312",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T18:49:17Z",
      "updated_at": "2020-10-11T18:49:17Z",
      "author_association": "MEMBER",
      "body": "> 1. It would be nice to mention the `wallet.dat-journal` file in the `files.md` doc.\r\n\r\nDone.\r\n\r\n> 2. Every time a wallet is loaded I can see a database exception message in the log:\r\n\r\nApparently we do a read for a now unused record (read is done for backwards compatibility). Since this isn't in new sqlite wallets, the read fails. I've changed the logging for `ReadKey` to not log an error when we get `SQLITE_DONE` which indicates that there were no records found.\r\n\r\n> 2a. Is it intended to place a space before `:` rather after it?\r\n\r\nTypo, fixed.\r\n\r\n",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706750312",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T22:26:37Z",
      "updated_at": "2020-10-11T22:26:37Z",
      "source": {
        "issue": {
          "id": 718940319,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTAxMjE2Mzgx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20125",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20125/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20125/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20125/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20125",
          "number": 20125,
          "state": "closed",
          "state_reason": null,
          "title": "rpc, wallet: Expose database format in getwalletinfo",
          "body": "Support for sqlite based wallets was added in #19077. This PR adds the `format` key in `getwalletinfo` response, that can be `bdb` or  `sqlite`.",
          "user": {
            "login": "promag",
            "id": 3534524,
            "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/promag",
            "html_url": "https://github.com/promag",
            "followers_url": "https://api.github.com/users/promag/followers",
            "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
            "organizations_url": "https://api.github.com/users/promag/orgs",
            "repos_url": "https://api.github.com/users/promag/repos",
            "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/promag/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/45",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45/labels",
            "id": 4914019,
            "node_id": "MDk6TWlsZXN0b25lNDkxNDAxOQ==",
            "number": 45,
            "state": "closed",
            "title": "0.21.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 132,
            "created_at": "2019-12-09T08:39:58Z",
            "updated_at": "2021-01-15T19:50:53Z",
            "closed_at": "2021-01-15T19:50:53Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 14,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20125",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20125",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20125.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20125.patch"
          },
          "closed_at": "2020-10-19T23:35:58Z",
          "created_at": "2020-10-11T22:26:36Z",
          "updated_at": "2022-02-15T10:37:10Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 506220762,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MjIwNzYy",
      "url": null,
      "actor": null,
      "commit_id": "720d017f41a47cf40c4491e3d7ad2f0496634c37",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review and tested ACK 2978dada84f15ad577d76e146fc3adf18e5e3a19 on macos with sqlite3 from brew.\r\n\r\nI've pushed #20125 which I found useful.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-506220762",
      "submitted_at": "2020-10-11T22:28:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3864159920,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg2NDE1OTkyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3864159920",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T22:44:24Z"
    },
    {
      "event": "commented",
      "id": 706787399,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjc4NzM5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/706787399",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T23:45:49Z",
      "updated_at": "2020-10-11T23:45:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--9cd9c72976c961c55c7acef8f6ba82cd-->\n### Guix builds\n\n| File | commit 0b2abaa666d6f3331e3246ffd64dd47946e9dcdf<br>(master) | commit c568ff48dac2a2d49fc15a86aca7deb94e2f6723<br>(master and this pull) |\n|--|--|--|\n| *.tar.gz | [`026efb7dd6132c32...`](https://drahtbot.space/guix/bitcoin/bitcoin/0b2abaa666d6f3331e3246ffd64dd47946e9dcdf/bitcoin-0b2abaa666d6.tar.gz) | [`c63f6e8493c7df93...`](https://drahtbot.space/guix/bitcoin/bitcoin/c568ff48dac2a2d49fc15a86aca7deb94e2f6723/bitcoin-c568ff48dac2.tar.gz) |\n| guix_build.log | [`e074b865b6cd933e...`](https://drahtbot.space/guix/bitcoin/bitcoin/0b2abaa666d6f3331e3246ffd64dd47946e9dcdf/guix_build.log) | [`57be22ab3f07219c...`](https://drahtbot.space/guix/bitcoin/bitcoin/c568ff48dac2a2d49fc15a86aca7deb94e2f6723/guix_build.log) |\n| guix_build.log.diff |  | [`2ec91ed3d12bcccd...`](https://drahtbot.space/guix/bitcoin/bitcoin/c568ff48dac2a2d49fc15a86aca7deb94e2f6723/guix_build.log.diff) |\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706787399",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "unlabeled",
      "id": 3864208818,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mzg2NDIwODgxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3864208818",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T23:45:50Z",
      "label": {
        "name": "Needs Guix build",
        "color": "bfd4f2"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3864220148,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg2NDIyMDE0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3864220148",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T23:59:47Z"
    },
    {
      "event": "commented",
      "id": 706790592,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjc5MDU5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/706790592",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-12T00:08:16Z",
      "updated_at": "2020-10-12T00:08:16Z",
      "author_association": "MEMBER",
      "body": "I've determined the minimum sqlite version to be 3.7.17, assuming that all versions between that and the latest work if the oldest works. `configure.ac` and `doc/dependencies.md` have been updated to reflect this. With 3.7.17, all tests pass and it was able to load a wallet created with 3.32.1.\r\n\r\nFun fact, the oldest version I was able to download was 3.7.16 and it does not work as the `application_id` feature was added in 3.7.17.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706790592",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "reviewed",
      "id": 506374717,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2Mzc0NzE3",
      "url": null,
      "actor": null,
      "commit_id": "3eff1f9bec5b92e3cb1e7fa5f0c7e0163b4f4ce2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "re-ACK db8da464e8c08ee5b2d7fedef9834a3747b223ec, reviewed with `git range-diff master 06765509e1f1b1bc0d037eb16363aa5570a256c7 db8da464e8c08ee5b2d7fedef9834a3747b223ec`, only suggested changes applied.\r\n\r\nIt is nice that we have the minimum required SQLite version now! Besides compatibility, another reasons to choose a particular minimum version are fixed bugs. I've skimmed https://sqlite.org/changes.html, and did not find any mention of a fatal bug that could affect our project. Maybe I've overlooked it though.\r\n\r\nThere is no consistency in our docs about mentioning of SQLite: `SQLite 3` and `SQLite3` are used. Could we use the only naming, say `SQLite`?",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-506374717",
      "submitted_at": "2020-10-12T08:07:27Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "reviewed",
      "id": 506479943,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NDc5OTQz",
      "url": null,
      "actor": null,
      "commit_id": "f4fd2218d705ed08f8554f9cd1946c087335d2f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-506479943",
      "submitted_at": "2020-10-12T10:06:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "review_requested",
      "id": 3866023100,
      "node_id": "MDIwOlJldmlld1JlcXVlc3RlZEV2ZW50Mzg2NjAyMzEwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3866023100",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-12T10:45:51Z",
      "requested_reviewer": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-12T10:52:55Z",
      "updated_at": "2020-10-12T10:52:55Z",
      "source": {
        "issue": {
          "id": 719280820,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTAxNDk1MDA3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20130",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20130/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20130/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20130/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20130",
          "number": 20130,
          "state": "closed",
          "state_reason": null,
          "title": "Wallet: remove db mode string",
          "body": "This is a [follow-up](https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500261927) for #19077 \r\n\r\nThis PR simplifies DB interface by removing mode string from `WalletDatabase` and `WalletBatch`.\r\n\r\nThe mode string was used to determine two flags for the instantiation of db connection:\r\n1) read-only flag. Never used on connection level. And on batch level Is only used within `BerkeleyDatabase::Rewrite` where it's replaced with bool flag.\r\n2) create flag. Is not required as we always check `require_existing` & `require_create` flags in `MakeDatabase()` before creating actual database instance. So we can safely default to always creating database if it doesn't exist yet.\r\n\r\n",
          "user": {
            "login": "S3RK",
            "id": 1466284,
            "node_id": "MDQ6VXNlcjE0NjYyODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/S3RK",
            "html_url": "https://github.com/S3RK",
            "followers_url": "https://api.github.com/users/S3RK/followers",
            "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
            "organizations_url": "https://api.github.com/users/S3RK/orgs",
            "repos_url": "https://api.github.com/users/S3RK/repos",
            "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/S3RK/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20130",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20130",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20130.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20130.patch"
          },
          "closed_at": "2020-10-14T12:50:41Z",
          "created_at": "2020-10-12T10:52:54Z",
          "updated_at": "2022-02-15T10:48:11Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 506527775,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NTI3Nzc1",
      "url": null,
      "actor": null,
      "commit_id": "f4fd2218d705ed08f8554f9cd1946c087335d2f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-506527775",
      "submitted_at": "2020-10-12T11:17:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "commented",
      "id": 707151719,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNzE1MTcxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/707151719",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-12T14:22:39Z",
      "updated_at": "2020-10-12T14:22:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--a722867cd34abeea1fadc8d60700f111-->\n### Gitian builds\n\n| File | commit 0b2abaa666d6f3331e3246ffd64dd47946e9dcdf<br>(master) | commit 3cfdc4b038257ed68d498ed212fe00283a795bb3<br>(master and this pull) |\n|--|--|--|\n| *-osx-unsigned.dmg | [`04e4b56842a70884...`](https://drahtbot.space/gitian/bitcoin/bitcoin/0b2abaa666d6f3331e3246ffd64dd47946e9dcdf/bitcoin-0b2abaa666d6-osx-unsigned.dmg) | [`4727b379a6c815cf...`](https://drahtbot.space/gitian/bitcoin/bitcoin/3cfdc4b038257ed68d498ed212fe00283a795bb3/bitcoin-3cfdc4b03825-osx-unsigned.dmg) |\n| *-osx64.tar.gz | [`02c2c85b54844873...`](https://drahtbot.space/gitian/bitcoin/bitcoin/0b2abaa666d6f3331e3246ffd64dd47946e9dcdf/bitcoin-0b2abaa666d6-osx64.tar.gz) | [`40c9080f7b1c2d26...`](https://drahtbot.space/gitian/bitcoin/bitcoin/3cfdc4b038257ed68d498ed212fe00283a795bb3/bitcoin-3cfdc4b03825-osx64.tar.gz) |\n| *-win64-debug.zip | [`d21a0672ba922e6e...`](https://drahtbot.space/gitian/bitcoin/bitcoin/0b2abaa666d6f3331e3246ffd64dd47946e9dcdf/bitcoin-0b2abaa666d6-win64-debug.zip) | [`aadee478982cade1...`](https://drahtbot.space/gitian/bitcoin/bitcoin/3cfdc4b038257ed68d498ed212fe00283a795bb3/bitcoin-3cfdc4b03825-win64-debug.zip) |\n| *-win64-setup-unsigned.exe | [`0db743f5f7a53621...`](https://drahtbot.space/gitian/bitcoin/bitcoin/0b2abaa666d6f3331e3246ffd64dd47946e9dcdf/bitcoin-0b2abaa666d6-win64-setup-unsigned.exe) | [`e269ce197f50b95d...`](https://drahtbot.space/gitian/bitcoin/bitcoin/3cfdc4b038257ed68d498ed212fe00283a795bb3/bitcoin-3cfdc4b03825-win64-setup-unsigned.exe) |\n| *-win64.zip | [`96818872c4f2c40a...`](https://drahtbot.space/gitian/bitcoin/bitcoin/0b2abaa666d6f3331e3246ffd64dd47946e9dcdf/bitcoin-0b2abaa666d6-win64.zip) | [`79195a2bc6c01b3e...`](https://drahtbot.space/gitian/bitcoin/bitcoin/3cfdc4b038257ed68d498ed212fe00283a795bb3/bitcoin-3cfdc4b03825-win64.zip) |\n| *.tar.gz | [`026efb7dd6132c32...`](https://drahtbot.space/gitian/bitcoin/bitcoin/0b2abaa666d6f3331e3246ffd64dd47946e9dcdf/bitcoin-0b2abaa666d6.tar.gz) | [`94efa52d32d02a37...`](https://drahtbot.space/gitian/bitcoin/bitcoin/3cfdc4b038257ed68d498ed212fe00283a795bb3/bitcoin-3cfdc4b03825.tar.gz) |\n| bitcoin-core-osx-0.21-res.yml | [`6201fa404788ede6...`](https://drahtbot.space/gitian/bitcoin/bitcoin/0b2abaa666d6f3331e3246ffd64dd47946e9dcdf/bitcoin-core-osx-0.21-res.yml) | [`7bbce076a4b6617e...`](https://drahtbot.space/gitian/bitcoin/bitcoin/3cfdc4b038257ed68d498ed212fe00283a795bb3/bitcoin-core-osx-0.21-res.yml) |\n| bitcoin-core-win-0.21-res.yml | [`b0f1da339914cef9...`](https://drahtbot.space/gitian/bitcoin/bitcoin/0b2abaa666d6f3331e3246ffd64dd47946e9dcdf/bitcoin-core-win-0.21-res.yml) | [`f401137fcdb4fb87...`](https://drahtbot.space/gitian/bitcoin/bitcoin/3cfdc4b038257ed68d498ed212fe00283a795bb3/bitcoin-core-win-0.21-res.yml) |\n| linux-build.log | [`0369a9837fb6ac9c...`](https://drahtbot.space/gitian/bitcoin/bitcoin/0b2abaa666d6f3331e3246ffd64dd47946e9dcdf/linux-build.log) | [`6afc4d0da4f45256...`](https://drahtbot.space/gitian/bitcoin/bitcoin/3cfdc4b038257ed68d498ed212fe00283a795bb3/linux-build.log) |\n| osx-build.log | [`04458efe11ece038...`](https://drahtbot.space/gitian/bitcoin/bitcoin/0b2abaa666d6f3331e3246ffd64dd47946e9dcdf/osx-build.log) | [`5c7e96ee77e7739a...`](https://drahtbot.space/gitian/bitcoin/bitcoin/3cfdc4b038257ed68d498ed212fe00283a795bb3/osx-build.log) |\n| win-build.log | [`fea78210f07298da...`](https://drahtbot.space/gitian/bitcoin/bitcoin/0b2abaa666d6f3331e3246ffd64dd47946e9dcdf/win-build.log) | [`90693e547affb415...`](https://drahtbot.space/gitian/bitcoin/bitcoin/3cfdc4b038257ed68d498ed212fe00283a795bb3/win-build.log) |\n| bitcoin-core-osx-0.21-res.yml.diff |  | [`4d6746fd95015d62...`](https://drahtbot.space/gitian/bitcoin/bitcoin/3cfdc4b038257ed68d498ed212fe00283a795bb3/bitcoin-core-osx-0.21-res.yml.diff) |\n| bitcoin-core-win-0.21-res.yml.diff |  | [`5346fd3000a3518c...`](https://drahtbot.space/gitian/bitcoin/bitcoin/3cfdc4b038257ed68d498ed212fe00283a795bb3/bitcoin-core-win-0.21-res.yml.diff) |\n| linux-build.log.diff |  | [`70cad77216cc2424...`](https://drahtbot.space/gitian/bitcoin/bitcoin/3cfdc4b038257ed68d498ed212fe00283a795bb3/linux-build.log.diff) |\n| osx-build.log.diff |  | [`6bc645dea0a146cb...`](https://drahtbot.space/gitian/bitcoin/bitcoin/3cfdc4b038257ed68d498ed212fe00283a795bb3/osx-build.log.diff) |\n| win-build.log.diff |  | [`be823794ecf5a170...`](https://drahtbot.space/gitian/bitcoin/bitcoin/3cfdc4b038257ed68d498ed212fe00283a795bb3/win-build.log.diff) |\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-707151719",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "unlabeled",
      "id": 3866886831,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mzg2Njg4NjgzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3866886831",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-12T14:22:40Z",
      "label": {
        "name": "Needs gitian build",
        "color": "8c9e07"
      }
    },
    {
      "event": "commented",
      "id": 707171733,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNzE3MTczMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/707171733",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-12T14:57:50Z",
      "updated_at": "2020-10-12T14:57:50Z",
      "author_association": "MEMBER",
      "body": "> There is no consistency in our docs about mentioning of SQLite: `SQLite 3` and `SQLite3` are used. Could we use the only naming, say `SQLite`?\r\n\r\nShould be unified to SQLite now.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-707171733",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3867042160,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg2NzA0MjE2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3867042160",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-12T14:57:54Z"
    },
    {
      "event": "reviewed",
      "id": 506711705,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NzExNzA1",
      "url": null,
      "actor": null,
      "commit_id": "554dac60f160df08f94497a78e3e7a30217a5850",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "re-ACK f00d666e85cee5b347f162cc2a9f56a40e543ee9",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-506711705",
      "submitted_at": "2020-10-12T15:19:22Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "reviewed",
      "id": 506930848,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2OTMwODQ4",
      "url": null,
      "actor": null,
      "commit_id": "f00d666e85cee5b347f162cc2a9f56a40e543ee9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "re-utACK f00d666e85cee5b347f162cc2a9f56a40e543ee9\r\n\r\nGetting very close to merge-ready, we have ACKs from myself, hebasto, promag, S3RK, fjahr, I think a near-ACK from Russ and Sjors, and some review from Marco. Looking forward to merging this in the next couple of days 🥳 ",
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-506930848",
      "submitted_at": "2020-10-12T21:33:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "reviewed",
      "id": 507385953,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3Mzg1OTUz",
      "url": null,
      "actor": null,
      "commit_id": "5d3391a430f394d58047ca31f57f597cd0cbabba",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK f00d666e85cee5b347f162cc2a9f56a40e543ee9 modulo PRAGMA non-persistence.\r\n\r\nI suggest we look into the file extension issue one more time before release (i.e. not in this PR).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-507385953",
      "submitted_at": "2020-10-13T12:42:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3872178190,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg3MjE3ODE5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3872178190",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-13T15:54:57Z"
    },
    {
      "event": "reviewed",
      "id": 507743699,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3NzQzNjk5",
      "url": null,
      "actor": null,
      "commit_id": "d18892dcc3149409296cfcde8a590b5a4d96ea57",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "re-ACK d18892dcc3149409296cfcde8a590b5a4d96ea57, reviewed with `git range-diff master f00d666e8 d18892dcc`.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-507743699",
      "submitted_at": "2020-10-13T19:02:52Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "commented",
      "id": 708116889,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwODExNjg4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/708116889",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T02:32:34Z",
      "updated_at": "2020-10-14T02:32:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "@Sjors it seems almost everyone has no preference regarding the extension, as there are pros and cons either way. It seems the easiest thing to do is leave this PR as-is to get it in to the release in time, unless anyone has a good reason to sway the decision.",
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-708116889",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "mentioned",
      "id": 3874411777,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzg3NDQxMTc3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3874411777",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T02:32:34Z"
    },
    {
      "event": "subscribed",
      "id": 3874411778,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4NzQ0MTE3Nzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3874411778",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T02:32:34Z"
    },
    {
      "event": "referenced",
      "id": 3876410868,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4NzY0MTA4Njg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3876410868",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9efa55c715c0179b2bd079348ef67b624411b11b",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9efa55c715c0179b2bd079348ef67b624411b11b",
      "created_at": "2020-10-14T12:50:37Z"
    },
    {
      "event": "labeled",
      "id": 3876830223,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM4NzY4MzAyMjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3876830223",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T14:14:59Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDcyOWYzZjRlNjc2NWRmZGVkNTkwYWY1ZmIyOGM4ODMzMTY4NWY4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54729f3f4e6765dfded590af5fb28c88331685f8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/54729f3f4e6765dfded590af5fb28c88331685f8",
      "tree": {
        "sha": "5098b5eaebe7a3a283d37564b89dba7453e10198",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5098b5eaebe7a3a283d37564b89dba7453e10198"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99a1d572eabca89790216b3919a237e07063a376",
          "sha": "99a1d572eabca89790216b3919a237e07063a376",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/99a1d572eabca89790216b3919a237e07063a376"
        }
      ],
      "message": "Add libsqlite3",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:18:12Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-27T00:52:59Z"
      },
      "sha": "54729f3f4e6765dfded590af5fb28c88331685f8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODdkZjgyNTgwOTAxMzhkNWMyMmFjNDZiODYwMmI2MTg2MjBlOGEx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e87df8258090138d5c22ac46b8602b618620e8a1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e87df8258090138d5c22ac46b8602b618620e8a1",
      "tree": {
        "sha": "a616b86d8bee3a88a02bab56fde9664fe65fac70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a616b86d8bee3a88a02bab56fde9664fe65fac70"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54729f3f4e6765dfded590af5fb28c88331685f8",
          "sha": "54729f3f4e6765dfded590af5fb28c88331685f8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/54729f3f4e6765dfded590af5fb28c88331685f8"
        }
      ],
      "message": "Add sqlite to travis and depends",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:18:13Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-27T03:18:08Z"
      },
      "sha": "e87df8258090138d5c22ac46b8602b618620e8a1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTc3YjZlMWM4OGExYTdiNDVlY2Y1YzdmMTczNWJhZTZmNWE4MmJm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7577b6e1c88a1a7b45ecf5c7f1735bae6f5a82bf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7577b6e1c88a1a7b45ecf5c7f1735bae6f5a82bf",
      "tree": {
        "sha": "b4a468cc34ba460e540097a03d2be6327fabbcff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4a468cc34ba460e540097a03d2be6327fabbcff"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e87df8258090138d5c22ac46b8602b618620e8a1",
          "sha": "e87df8258090138d5c22ac46b8602b618620e8a1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e87df8258090138d5c22ac46b8602b618620e8a1"
        }
      ],
      "message": "Add SQLiteDatabase and SQLiteBatch dummy classes",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:27:37Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-27T00:53:01Z"
      },
      "sha": "7577b6e1c88a1a7b45ecf5c7f1735bae6f5a82bf"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYThiN2UwNGFiODlmOTkwNzViMDkzZmEyNDg5MTlmZDEwYWNiZGY3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca8b7e04ab89f99075b093fa248919fd10acbdf7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ca8b7e04ab89f99075b093fa248919fd10acbdf7",
      "tree": {
        "sha": "26a0d07f1b1d139ba8f0dd119cd33d5637ba844f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26a0d07f1b1d139ba8f0dd119cd33d5637ba844f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7577b6e1c88a1a7b45ecf5c7f1735bae6f5a82bf",
          "sha": "7577b6e1c88a1a7b45ecf5c7f1735bae6f5a82bf",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7577b6e1c88a1a7b45ecf5c7f1735bae6f5a82bf"
        }
      ],
      "message": "Implement SQLiteDatabaseVersion",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:27:40Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-27T00:53:05Z"
      },
      "sha": "ca8b7e04ab89f99075b093fa248919fd10acbdf7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTQ4OGIzZDc3MzI2YTBkOTU3YzEyMzM0OTMwNjFkYTFiNmVjMjA3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a488b3d77326a0d957c1233493061da1b6ec207",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5a488b3d77326a0d957c1233493061da1b6ec207",
      "tree": {
        "sha": "2ffa8972c26d53e007a2b60686602a36cb01aa41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ffa8972c26d53e007a2b60686602a36cb01aa41"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca8b7e04ab89f99075b093fa248919fd10acbdf7",
          "sha": "ca8b7e04ab89f99075b093fa248919fd10acbdf7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ca8b7e04ab89f99075b093fa248919fd10acbdf7"
        }
      ],
      "message": "Constructors, destructors, and relevant private fields for SQLiteDatabase/Batch",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:28:17Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-27T00:53:06Z"
      },
      "sha": "5a488b3d77326a0d957c1233493061da1b6ec207"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmZhMGZlMTI1OTI4MGY4YzMyYjQxYTc5OGM5NDUzYjczZjg5YjAy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bfa0fe1259280f8c32b41a798c9453b73f89b02",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3bfa0fe1259280f8c32b41a798c9453b73f89b02",
      "tree": {
        "sha": "66228e67c4ea659fd7abb7c71eef9da3d26fd765",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66228e67c4ea659fd7abb7c71eef9da3d26fd765"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a488b3d77326a0d957c1233493061da1b6ec207",
          "sha": "5a488b3d77326a0d957c1233493061da1b6ec207",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5a488b3d77326a0d957c1233493061da1b6ec207"
        }
      ],
      "message": "Initialize and Shutdown sqlite3 globals\n\nsqlite3 recommends that sqlite3_initialize be called when the\napplication starts, and sqlite3_shutdown when it stops. Since we don't\nalways use sqlite3, we initialize it when a SQLiteDatabse is constructed\n(calling sqlite3_initialize after initialized is a no-op). We call\nsqlite3_shutdown when we see that there are no databases opened. The\nnumber of open databases is tracked by an atomic g_dbs_open.",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:28:18Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-27T00:53:24Z"
      },
      "sha": "3bfa0fe1259280f8c32b41a798c9453b73f89b02"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMGRlODMzNzJiZTgzZjU5MDE1Y2QzZDYxYWYyMzAzYjc0ZmI2NGI1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0de83372be83f59015cd3d61af2303b74fb64b5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a0de83372be83f59015cd3d61af2303b74fb64b5",
      "tree": {
        "sha": "4f5843fc13d5a9631003a0be9fb0fab94782bd56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f5843fc13d5a9631003a0be9fb0fab94782bd56"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bfa0fe1259280f8c32b41a798c9453b73f89b02",
          "sha": "3bfa0fe1259280f8c32b41a798c9453b73f89b02",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3bfa0fe1259280f8c32b41a798c9453b73f89b02"
        }
      ],
      "message": "Implement SQLiteDatabase::Open",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:28:18Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-27T00:53:30Z"
      },
      "sha": "a0de83372be83f59015cd3d61af2303b74fb64b5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MzgyNTM1MmEzNjQ1NjI4M2JmODdlMzliNTg4ODM2M2VlMjQyZjIx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93825352a36456283bf87e39b5888363ee242f21",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/93825352a36456283bf87e39b5888363ee242f21",
      "tree": {
        "sha": "800785b07ae73308a7810ea760e0f4fc51b88e60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/800785b07ae73308a7810ea760e0f4fc51b88e60"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0de83372be83f59015cd3d61af2303b74fb64b5",
          "sha": "a0de83372be83f59015cd3d61af2303b74fb64b5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a0de83372be83f59015cd3d61af2303b74fb64b5"
        }
      ],
      "message": "Implement SQLiteDatabase::Close",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:28:18Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-27T00:53:32Z"
      },
      "sha": "93825352a36456283bf87e39b5888363ee242f21"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjM2YTI2MDhhNGU1OTA2ZWU4MDkyZDU3MzE1OTU1NDIyNjFlMGFk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6636a2608a4e5906ee8092d5731595542261e0ad",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6636a2608a4e5906ee8092d5731595542261e0ad",
      "tree": {
        "sha": "c68cd3445b812937eac78554f13c810b8b20b1b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c68cd3445b812937eac78554f13c810b8b20b1b9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93825352a36456283bf87e39b5888363ee242f21",
          "sha": "93825352a36456283bf87e39b5888363ee242f21",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/93825352a36456283bf87e39b5888363ee242f21"
        }
      ],
      "message": "Implement SQLiteBatch::Close",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:28:18Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-16T18:57:30Z"
      },
      "sha": "6636a2608a4e5906ee8092d5731595542261e0ad"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YWE0NTYyMGUyZjIxNzgxNDVhMmVjYTU4Y2NiYWIzY2VjZmYwOGZi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7aa45620e2f2178145a2eca58ccbab3cecff08fb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7aa45620e2f2178145a2eca58ccbab3cecff08fb",
      "tree": {
        "sha": "1f8c7b2c46c6f3e2d9724611b868183dc5868e9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f8c7b2c46c6f3e2d9724611b868183dc5868e9a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6636a2608a4e5906ee8092d5731595542261e0ad",
          "sha": "6636a2608a4e5906ee8092d5731595542261e0ad",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6636a2608a4e5906ee8092d5731595542261e0ad"
        }
      ],
      "message": "Add SetupSQLStatements",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:28:18Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-27T00:53:41Z"
      },
      "sha": "7aa45620e2f2178145a2eca58ccbab3cecff08fb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjkwZTAzM2Y0ZmU4NmNmYjkwNDkyYzdlMDk2MjI3OGVhM2ExNDZk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf90e033f4fe86cfb90492c7e0962278ea3a146d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bf90e033f4fe86cfb90492c7e0962278ea3a146d",
      "tree": {
        "sha": "b14397fd592a48bfab24ae1aeb0b21728ae3b1f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b14397fd592a48bfab24ae1aeb0b21728ae3b1f1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7aa45620e2f2178145a2eca58ccbab3cecff08fb",
          "sha": "7aa45620e2f2178145a2eca58ccbab3cecff08fb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7aa45620e2f2178145a2eca58ccbab3cecff08fb"
        }
      ],
      "message": "Implement SQLiteBatch::ReadKey, WriteKey, EraseKey, and HasKey",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:28:18Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-27T00:53:44Z"
      },
      "sha": "bf90e033f4fe86cfb90492c7e0962278ea3a146d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmY5Y2Q2YTY0ODQyZWYyMzc3NzMxMmYyNDY1ZTgyNmNhMDRiODg2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6f9cd6a64842ef23777312f2465e826ca04b886",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f6f9cd6a64842ef23777312f2465e826ca04b886",
      "tree": {
        "sha": "296c59f7a55da61207e96812ee45d4d3580b0655",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/296c59f7a55da61207e96812ee45d4d3580b0655"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf90e033f4fe86cfb90492c7e0962278ea3a146d",
          "sha": "bf90e033f4fe86cfb90492c7e0962278ea3a146d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bf90e033f4fe86cfb90492c7e0962278ea3a146d"
        }
      ],
      "message": "Implement SQLiteBatch::StartCursor, ReadAtCursor, and CloseCursor",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:28:18Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-27T00:53:46Z"
      },
      "sha": "f6f9cd6a64842ef23777312f2465e826ca04b886"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzVjMTYxN2U3ZjQyNzNkYWYyNGMyNGRhMWY2YmM1ZWY1YWIyZDJi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac5c1617e7f4273daf24c24da1f6bc5ef5ab2d2b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ac5c1617e7f4273daf24c24da1f6bc5ef5ab2d2b",
      "tree": {
        "sha": "b4dbcde20f00fb7731cdfe54578f2566552cfe64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4dbcde20f00fb7731cdfe54578f2566552cfe64"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6f9cd6a64842ef23777312f2465e826ca04b886",
          "sha": "f6f9cd6a64842ef23777312f2465e826ca04b886",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f6f9cd6a64842ef23777312f2465e826ca04b886"
        }
      ],
      "message": "Implement SQLiteDatabase::Backup",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:28:18Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-27T00:53:48Z"
      },
      "sha": "ac5c1617e7f4273daf24c24da1f6bc5ef5ab2d2b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTBlMzY1OTA2OWU2Zjk3ZGQ3YjI0NDgzZjUwZWQ3MTA0MmI4NGIw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/010e3659069e6f97dd7b24483f50ed71042b84b0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/010e3659069e6f97dd7b24483f50ed71042b84b0",
      "tree": {
        "sha": "9f5058b01439db7be80a3a5d6665f44ca92af0d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f5058b01439db7be80a3a5d6665f44ca92af0d2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac5c1617e7f4273daf24c24da1f6bc5ef5ab2d2b",
          "sha": "ac5c1617e7f4273daf24c24da1f6bc5ef5ab2d2b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ac5c1617e7f4273daf24c24da1f6bc5ef5ab2d2b"
        }
      ],
      "message": "Implement SQLiteDatabase::TxnBegin, TxnCommit, and TxnAbort",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:28:18Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-27T00:53:50Z"
      },
      "sha": "010e3659069e6f97dd7b24483f50ed71042b84b0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNGRmOGZkYjE5ZmNkZWQ3ZTZkNDkxZWNmMGI3MDVjYWMwZWM3NmEx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4df8fdb19fcded7e6d491ecf0b705cac0ec76a1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b4df8fdb19fcded7e6d491ecf0b705cac0ec76a1",
      "tree": {
        "sha": "a6eb6a459472caa6328f10887eda5c868df2728f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a6eb6a459472caa6328f10887eda5c868df2728f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/010e3659069e6f97dd7b24483f50ed71042b84b0",
          "sha": "010e3659069e6f97dd7b24483f50ed71042b84b0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/010e3659069e6f97dd7b24483f50ed71042b84b0"
        }
      ],
      "message": "Implement SQLiteDatabase::Rewrite\n\nRewrite uses the VACUUM command which does exactly what we want. A\nspecific advertised use case is to compact a database and ensure that\nany deleted data is actually deleted.",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:28:18Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-27T00:53:57Z"
      },
      "sha": "b4df8fdb19fcded7e6d491ecf0b705cac0ec76a1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjdlNmIyYTRlZTVhYmI3ZjJkY2JjOWY3Nzc4MjkxOTA4ZGMyOGFk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/727e6b2a4ee5abb7f2dcbc9f7778291908dc28ad",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/727e6b2a4ee5abb7f2dcbc9f7778291908dc28ad",
      "tree": {
        "sha": "60112fd51a448130edc2b4533c2ce5837a411def",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60112fd51a448130edc2b4533c2ce5837a411def"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4df8fdb19fcded7e6d491ecf0b705cac0ec76a1",
          "sha": "b4df8fdb19fcded7e6d491ecf0b705cac0ec76a1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b4df8fdb19fcded7e6d491ecf0b705cac0ec76a1"
        }
      ],
      "message": "Implement SQLiteDatabase::Verify",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:28:18Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-27T00:54:00Z"
      },
      "sha": "727e6b2a4ee5abb7f2dcbc9f7778291908dc28ad"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDQ1Zjc3MDAzZjE2N2JlZTlhODVlMmQ1M2Y4ZmM2ZmYyZTI5N2Q4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6045f77003f167bee9a85e2d53f8fc6ff2e297d8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6045f77003f167bee9a85e2d53f8fc6ff2e297d8",
      "tree": {
        "sha": "e42b2e022dcd9750ca65c0239a71a1796e64469f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e42b2e022dcd9750ca65c0239a71a1796e64469f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/727e6b2a4ee5abb7f2dcbc9f7778291908dc28ad",
          "sha": "727e6b2a4ee5abb7f2dcbc9f7778291908dc28ad",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/727e6b2a4ee5abb7f2dcbc9f7778291908dc28ad"
        }
      ],
      "message": "Implement SQLiteDatabase::MakeBatch",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:28:18Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-16T19:38:12Z"
      },
      "sha": "6045f77003f167bee9a85e2d53f8fc6ff2e297d8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzM4YTg3MjI1YmUwZjExMDNmZjk2MjlkNjM5ODA1NTBkMmYzNzJi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac38a87225be0f1103ff9629d63980550d2f372b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ac38a87225be0f1103ff9629d63980550d2f372b",
      "tree": {
        "sha": "a985380a416f93c7c2f07ae101079cbb351dbbdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a985380a416f93c7c2f07ae101079cbb351dbbdc"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6045f77003f167bee9a85e2d53f8fc6ff2e297d8",
          "sha": "6045f77003f167bee9a85e2d53f8fc6ff2e297d8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6045f77003f167bee9a85e2d53f8fc6ff2e297d8"
        }
      ],
      "message": "Determine wallet file type based on file magic",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:28:18Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-27T00:54:05Z"
      },
      "sha": "ac38a87225be0f1103ff9629d63980550d2f372b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Yjc4ZjNjZThlZDE4NjdjMzdmNmI5ZmZmOThmNzQ1ODJkNDRiNzg5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b78f3ce8ed1867c37f6b9fff98f74582d44b789",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9b78f3ce8ed1867c37f6b9fff98f74582d44b789",
      "tree": {
        "sha": "b3a6cd467709b5e03dbbc743e0bf3c52298d0455",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3a6cd467709b5e03dbbc743e0bf3c52298d0455"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac38a87225be0f1103ff9629d63980550d2f372b",
          "sha": "ac38a87225be0f1103ff9629d63980550d2f372b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ac38a87225be0f1103ff9629d63980550d2f372b"
        }
      ],
      "message": "walletutil: Wallets can also be sqlite",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:28:18Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-11T20:24:17Z"
      },
      "sha": "9b78f3ce8ed1867c37f6b9fff98f74582d44b789"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YWY1ZGUzNzk4YzQ5Zjg2ZjI3YmI3OTM5NmUwNzVmYjhjMWIyMzgx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9af5de3798c49f86f27bb79396e075fb8c1b2381",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9af5de3798c49f86f27bb79396e075fb8c1b2381",
      "tree": {
        "sha": "6420a760fc7e686d74c0e61e3ec030bcb524947c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6420a760fc7e686d74c0e61e3ec030bcb524947c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b78f3ce8ed1867c37f6b9fff98f74582d44b789",
          "sha": "9b78f3ce8ed1867c37f6b9fff98f74582d44b789",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9b78f3ce8ed1867c37f6b9fff98f74582d44b789"
        }
      ],
      "message": "Use SQLite for descriptor wallets\n\nMakeWalletDatabase no longer has a default DatabaseFormat. Instead\ncallers, like CWallet::Create, need to specify the database type to\ncreate if the file does not exist. If it exists and NONE is given, then\nCreateWalletDatabase will try to autodetect the type.",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:28:18Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-27T00:54:13Z"
      },
      "sha": "9af5de3798c49f86f27bb79396e075fb8c1b2381"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDNkMmQyNjNjMzMxZTNjNzdiOGYwZDAxZWNjOWZlYTA0MDdkZDE3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d3d2d263c331e3c77b8f0d01ecc9fea0407dd17",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9d3d2d263c331e3c77b8f0d01ecc9fea0407dd17",
      "tree": {
        "sha": "0970d3efb6f47bf78068a31514962dbee4c1d863",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0970d3efb6f47bf78068a31514962dbee4c1d863"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9af5de3798c49f86f27bb79396e075fb8c1b2381",
          "sha": "9af5de3798c49f86f27bb79396e075fb8c1b2381",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9af5de3798c49f86f27bb79396e075fb8c1b2381"
        }
      ],
      "message": "Use network magic as sqlite wallet application ID",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:28:18Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-09-09T23:30:20Z"
      },
      "sha": "9d3d2d263c331e3c77b8f0d01ecc9fea0407dd17"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTczMjY5ODY2MzA2MDU4ZmNiMWNjODI1YjllYjY4MTgzODY3OGNh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6173269866306058fcb1cc825b9eb681838678ca",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6173269866306058fcb1cc825b9eb681838678ca",
      "tree": {
        "sha": "65dfba766487a24e7482eb66e0f568ac134214ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65dfba766487a24e7482eb66e0f568ac134214ec"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d3d2d263c331e3c77b8f0d01ecc9fea0407dd17",
          "sha": "9d3d2d263c331e3c77b8f0d01ecc9fea0407dd17",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9d3d2d263c331e3c77b8f0d01ecc9fea0407dd17"
        }
      ],
      "message": "Set and check the sqlite user version",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:28:18Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-09-10T00:22:32Z"
      },
      "sha": "6173269866306058fcb1cc825b9eb681838678ca"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDIzYjdjYWMwZWIxNmQzYzFiZjQwZjFmNzg5OGIyOTBkZTRjYzcz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f023b7cac0eb16d3c1bf40f1f7898b290de4cc73",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f023b7cac0eb16d3c1bf40f1f7898b290de4cc73",
      "tree": {
        "sha": "909bb791b499df2e02375aa91414d826ba235123",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/909bb791b499df2e02375aa91414d826ba235123"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6173269866306058fcb1cc825b9eb681838678ca",
          "sha": "6173269866306058fcb1cc825b9eb681838678ca",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6173269866306058fcb1cc825b9eb681838678ca"
        }
      ],
      "message": "wallet: Enforce sqlite serialized threading mode",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:28:18Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-09-23T16:16:40Z"
      },
      "sha": "f023b7cac0eb16d3c1bf40f1f7898b290de4cc73"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzY2MzlhYzlmNmUxNjc3ZGEwNjZjZjgwOWY5ZTNmYTRkMmU3YzMy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c6639ac9f6e1677da066cf809f9e3fa4d2e7c32",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6c6639ac9f6e1677da066cf809f9e3fa4d2e7c32",
      "tree": {
        "sha": "b8d6a7209663169552f4aaf3612bc5b05f8985fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8d6a7209663169552f4aaf3612bc5b05f8985fc"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f023b7cac0eb16d3c1bf40f1f7898b290de4cc73",
          "sha": "f023b7cac0eb16d3c1bf40f1f7898b290de4cc73",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f023b7cac0eb16d3c1bf40f1f7898b290de4cc73"
        }
      ],
      "message": "Include sqlite3 in documentation",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:28:18Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-09-30T16:24:12Z"
      },
      "sha": "6c6639ac9f6e1677da066cf809f9e3fa4d2e7c32"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTBiMGZkZTA0NjM5Yjc0NDZlZmQ1YzFkMjcwMWNhYTRiOTkxYjg2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/310b0fde04639b7446efd5c1d2701caa4b991b86",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/310b0fde04639b7446efd5c1d2701caa4b991b86",
      "tree": {
        "sha": "52925901267bf787e52c3d6e1bc830c67c78fa00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52925901267bf787e52c3d6e1bc830c67c78fa00"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c6639ac9f6e1677da066cf809f9e3fa4d2e7c32",
          "sha": "6c6639ac9f6e1677da066cf809f9e3fa4d2e7c32",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6c6639ac9f6e1677da066cf809f9e3fa4d2e7c32"
        }
      ],
      "message": "Run dumpwallet for legacy wallets only in  wallet_backup.py\n\nDescriptor wallets don't support dumpwallet, so make the tests that do\ndumpwallet legacy wallet only.",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:28:18Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-03T22:49:36Z"
      },
      "sha": "310b0fde04639b7446efd5c1d2701caa4b991b86"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNGEyOWQwYTkwYjgyMWM0NDNjMTA4OTFkOTMyNmM1MzRkMTVjZjk3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4a29d0a90b821c443c10891d9326c534d15cf97",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c4a29d0a90b821c443c10891d9326c534d15cf97",
      "tree": {
        "sha": "3cb071df0b6bbf7839c8f0eb26c64372d17d1564",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3cb071df0b6bbf7839c8f0eb26c64372d17d1564"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/310b0fde04639b7446efd5c1d2701caa4b991b86",
          "sha": "310b0fde04639b7446efd5c1d2701caa4b991b86",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/310b0fde04639b7446efd5c1d2701caa4b991b86"
        }
      ],
      "message": "Update wallet_multiwallet.py for descriptor and sqlite wallets",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-14T15:28:18Z"
      },
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-10-07T18:50:05Z"
      },
      "sha": "c4a29d0a90b821c443c10891d9326c534d15cf97"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3877229532,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg3NzIyOTUzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3877229532",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T15:33:22Z"
    },
    {
      "event": "commented",
      "id": 708483129,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwODQ4MzEyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/708483129",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T15:34:37Z",
      "updated_at": "2020-10-14T15:34:37Z",
      "author_association": "MEMBER",
      "body": "Rebased. There was a silent merge conflict with #20130.\r\n\r\n@hebasto @S3RK @promag @Sjors @ryanofsky @meshcollider @fjahr Could you all re-review/re-ACK this so we can merge it before the feature freeze tomorrow?",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-708483129",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "mentioned",
      "id": 3877235621,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzg3NzIzNTYyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3877235621",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T15:34:37Z"
    },
    {
      "event": "subscribed",
      "id": 3877235629,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4NzcyMzU2Mjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3877235629",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T15:34:37Z"
    },
    {
      "event": "mentioned",
      "id": 3877235640,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzg3NzIzNTY0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3877235640",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T15:34:37Z"
    },
    {
      "event": "subscribed",
      "id": 3877235645,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4NzcyMzU2NDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3877235645",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T15:34:37Z"
    },
    {
      "event": "mentioned",
      "id": 3877235654,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzg3NzIzNTY1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3877235654",
      "actor": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T15:34:37Z"
    },
    {
      "event": "subscribed",
      "id": 3877235658,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4NzcyMzU2NTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3877235658",
      "actor": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T15:34:37Z"
    },
    {
      "event": "mentioned",
      "id": 3877235668,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzg3NzIzNTY2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3877235668",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T15:34:37Z"
    },
    {
      "event": "subscribed",
      "id": 3877235673,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4NzcyMzU2NzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3877235673",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T15:34:37Z"
    },
    {
      "event": "mentioned",
      "id": 3877235684,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzg3NzIzNTY4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3877235684",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T15:34:37Z"
    },
    {
      "event": "subscribed",
      "id": 3877235689,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4NzcyMzU2ODk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3877235689",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T15:34:38Z"
    },
    {
      "event": "mentioned",
      "id": 3877235700,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzg3NzIzNTcwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3877235700",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T15:34:38Z"
    },
    {
      "event": "subscribed",
      "id": 3877235703,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4NzcyMzU3MDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3877235703",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T15:34:38Z"
    },
    {
      "event": "mentioned",
      "id": 3877235707,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzg3NzIzNTcwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3877235707",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T15:34:38Z"
    },
    {
      "event": "subscribed",
      "id": 3877235709,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4NzcyMzU3MDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3877235709",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T15:34:38Z"
    },
    {
      "event": "reviewed",
      "id": 508485929,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NDg1OTI5",
      "url": null,
      "actor": null,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "re-ACK c4a29d0a90b821c443c10891d9326c534d15cf97, only rebased since my [previous](https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-507743699) review, verified with `git range-diff master d18892dcc c4a29d0a9`.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-508485929",
      "submitted_at": "2020-10-14T15:44:36Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "unlabeled",
      "id": 3877447250,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mzg3NzQ0NzI1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3877447250",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T16:20:24Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 508514203,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NTE0MjAz",
      "url": null,
      "actor": null,
      "commit_id": "6c6639ac9f6e1677da066cf809f9e3fa4d2e7c32",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK c4a29d0a90b821c443c10891d9326c534d15cf97. I am honestly confused about reasons for locking into `wallet.dat` again when it's so easy now to use a clean format. I assume I'm just very dense, or there's some unstated reason, because the only thing that's been brought up are unrealistic compatibility scenarios (all require actively creating a wallet with non-default descriptor+sqlite option, then trying to using the descriptor+sqlite wallets with old software or scripts and ignoring the results) that we didn't pay attention to with previous PRs like #11687, which did not require any active interfaction.\r\n\r\nChanges since previous review were: using pkg-config, naming/whitespace/documentation/quoting/const/log/assert changes, fixing leak if database constructor throws, enabling unconditional fullsync",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-508514203",
      "submitted_at": "2020-10-14T16:28:23Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "commented",
      "id": 708563650,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwODU2MzY1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/708563650",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T17:54:47Z",
      "updated_at": "2020-10-14T17:54:47Z",
      "author_association": "MEMBER",
      "body": "re-utACK c4a29d0a90b821c443c10891d9326c534d15cf97",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-708563650",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "commented",
      "id": 708643476,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwODY0MzQ3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/708643476",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T20:30:55Z",
      "updated_at": "2020-10-14T20:30:55Z",
      "author_association": "MEMBER",
      "body": "Tested ACK c4a29d0a90b821c443c10891d9326c534d15cf97.\r\n\r\n> I am honestly confused about reasons for locking into `wallet.dat` again when it's so easy now to use a clean format.\r\n\r\n@ryanofsky clean format as in different file extension? I think it can be discussed and changed even after feature freeze, just like @achow says in OP.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-708643476",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "mentioned",
      "id": 3878409654,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzg3ODQwOTY1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3878409654",
      "actor": {
        "login": "achow",
        "id": 1609236,
        "node_id": "MDQ6VXNlcjE2MDkyMzY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1609236?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow",
        "html_url": "https://github.com/achow",
        "followers_url": "https://api.github.com/users/achow/followers",
        "following_url": "https://api.github.com/users/achow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow/subscriptions",
        "organizations_url": "https://api.github.com/users/achow/orgs",
        "repos_url": "https://api.github.com/users/achow/repos",
        "events_url": "https://api.github.com/users/achow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T20:30:56Z"
    },
    {
      "event": "subscribed",
      "id": 3878409658,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4Nzg0MDk2NTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3878409658",
      "actor": {
        "login": "achow",
        "id": 1609236,
        "node_id": "MDQ6VXNlcjE2MDkyMzY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1609236?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow",
        "html_url": "https://github.com/achow",
        "followers_url": "https://api.github.com/users/achow/followers",
        "following_url": "https://api.github.com/users/achow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow/subscriptions",
        "organizations_url": "https://api.github.com/users/achow/orgs",
        "repos_url": "https://api.github.com/users/achow/repos",
        "events_url": "https://api.github.com/users/achow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T20:30:56Z"
    },
    {
      "event": "mentioned",
      "id": 3878409662,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzg3ODQwOTY2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3878409662",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T20:30:56Z"
    },
    {
      "event": "subscribed",
      "id": 3878409663,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4Nzg0MDk2NjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3878409663",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T20:30:56Z"
    },
    {
      "event": "reviewed",
      "id": 508806209,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4ODA2MjA5",
      "url": null,
      "actor": null,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK c4a29d0a90b821c443c10891d9326c534d15cf97, debug builds and test runs after rebase to latest master @ c2c4dbaebd9, some manual testing creating, using, unloading and reloading a few different new sqlite descriptor wallets over several node restarts/shutdowns.\r\n\r\nNice work and reviewing getting this in shape. Looking forward to testing this further.\r\n\r\n```\r\n2020-10-14T21:54:12Z Using SQLite Version 3.33.0\r\n```\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-508806209",
      "submitted_at": "2020-10-14T22:11:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "commented",
      "id": 708716760,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwODcxNjc2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/708716760",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T23:40:33Z",
      "updated_at": "2020-10-14T23:40:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "reACK c4a29d0a90b821c443c10891d9326c534d15cf97",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-708716760",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "commented",
      "id": 708849268,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwODg0OTI2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/708849268",
      "actor": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-15T02:11:30Z",
      "updated_at": "2020-10-15T02:12:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "Re-review ACK c4a29d0a90b821c443c10891d9326c534d15cf97\r\nAnd thanks for fixing the silent merge conflict",
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-708849268",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "assigned",
      "id": 3879417325,
      "node_id": "MDEzOkFzc2lnbmVkRXZlbnQzODc5NDE3MzI1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3879417325",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-15T03:40:06Z",
      "assignee": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "commented",
      "id": 708876279,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwODg3NjI3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/708876279",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-15T03:40:56Z",
      "updated_at": "2020-10-15T03:40:56Z",
      "author_association": "MEMBER",
      "body": "@meshcollider has declared that he'll be sorely disappointed if he doesn't get to pull the merge trigger on this PR.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-708876279",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "mentioned",
      "id": 3879418982,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzg3OTQxODk4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3879418982",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-15T03:40:56Z"
    },
    {
      "event": "subscribed",
      "id": 3879418995,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4Nzk0MTg5OTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3879418995",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-15T03:40:57Z"
    },
    {
      "event": "commented",
      "id": 708949919,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwODk0OTkxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/708949919",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-15T07:11:52Z",
      "updated_at": "2020-10-15T07:11:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "re-utACK c4a29d0a90b821c443c10891d9326c534d15cf97\r\n\r\nLet's go 🚀 ",
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-708949919",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19077"
    },
    {
      "event": "merged",
      "id": 3879945555,
      "node_id": "MDExOk1lcmdlZEV2ZW50Mzg3OTk0NTU1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3879945555",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8ed37f6c8497c8ec9e919dab35f63201e5f75f11",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ed37f6c8497c8ec9e919dab35f63201e5f75f11",
      "created_at": "2020-10-15T07:13:59Z"
    },
    {
      "event": "closed",
      "id": 3879945567,
      "node_id": "MDExOkNsb3NlZEV2ZW50Mzg3OTk0NTU2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3879945567",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-15T07:13:59Z"
    },
    {
      "event": "removed_from_project",
      "id": 3879952986,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50Mzg3OTk1Mjk4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3879952986",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-15T07:16:02Z",
      "project_card": {
        "id": 45258368,
        "url": "https://api.github.com/projects/columns/cards/45258368",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "moved_columns_in_project",
      "id": 3879953234,
      "node_id": "MDI2Ok1vdmVkQ29sdW1uc0luUHJvamVjdEV2ZW50Mzg3OTk1MzIzNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3879953234",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-15T07:16:07Z",
      "project_card": {
        "id": 40413136,
        "url": "https://api.github.com/projects/columns/cards/40413136",
        "project_id": 4755961,
        "project_url": "https://api.github.com/projects/4755961",
        "column_name": "Done",
        "previous_column_name": "Design"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-15T07:18:52Z",
      "updated_at": "2020-10-15T07:18:52Z",
      "source": {
        "issue": {
          "id": 614845244,
          "node_id": "MDU6SXNzdWU2MTQ4NDUyNDQ=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18916",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18916/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18916/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18916/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/18916",
          "number": 18916,
          "state": "closed",
          "state_reason": "completed",
          "title": "Sqlite wallet storage",
          "body": "This has been brought up a few times since at least 2018, e.g. [here](http://www.erisian.com.au/meetbot/bitcoin-core-dev/2018/bitcoin-core-dev.2018-09-27-19.00.log.html#l-180), [here](http://www.erisian.com.au/meetbot/bitcoin-core-dev/2018/bitcoin-core-dev.2018-12-14-19.01.log.html#l-96), but I never bothered to open an issue.\r\n\r\nSome cherry-picked arguments in favor:\r\n\r\n> 19:47:38 <cfields> sqlite is also nice in that they provide a monolithic source file and encourage direct integration.\r\n\r\n> 19:54:05 <wumpus> integrating sqlite into a project is trivial, indeed can be done as a single .cpp file if that's desirable\r\n\r\n> 19:54:33 <promag> any reason to not consider postgres for instance?\r\n> 19:54:38 <wumpus> AHHHH\r\n> 19:54:41 <sipa> promag: god why\r\n\r\n> 19:55:45 <jonasschnelli> Also BDB is a compile pitfall\r\n\r\nWe could make this opt-in in a first release. Then after a few releases make it the default. That way users can still downgrade their node without losing access to the wallet.\r\n\r\nIt should be possible to `./configure` without BDB, but we'll probably have to ship with BDB 4.8 (at least the ability to read) until the heat death of the universe.",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/45",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45/labels",
            "id": 4914019,
            "node_id": "MDk6TWlsZXN0b25lNDkxNDAxOQ==",
            "number": 45,
            "state": "closed",
            "title": "0.21.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 132,
            "created_at": "2019-12-09T08:39:58Z",
            "updated_at": "2021-01-15T19:50:53Z",
            "closed_at": "2021-01-15T19:50:53Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 29,
          "closed_at": "2020-10-15T07:19:06Z",
          "created_at": "2020-05-08T16:25:36Z",
          "updated_at": "2022-02-15T10:48:12Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-15T08:36:45Z",
      "updated_at": "2020-10-15T08:36:45Z",
      "source": {
        "issue": {
          "id": 722123204,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTAzOTI4NTI1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20152",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20152/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20152/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20152/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20152",
          "number": 20152,
          "state": "closed",
          "state_reason": null,
          "title": "doc: Update wallet files in files.md",
          "body": "This PR is a #19077 follow up, and it addresses the [comment](https://github.com/bitcoin/bitcoin/pull/19077#discussion_r504805234):\r\n\r\n> If need to update, there are two corrections that could be made:\r\n> \r\n>  * Line 69 \"Wallets are Berkeley DB (BDB) databases\" is no longer true\r\n> \r\n>  * Line 76 \"Wallet lock file\" should say \"BDB wallet lock file\"",
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 148216,
              "node_id": "MDU6TGFiZWwxNDgyMTY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Docs",
              "name": "Docs",
              "color": "02d7e1",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/45",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45/labels",
            "id": 4914019,
            "node_id": "MDk6TWlsZXN0b25lNDkxNDAxOQ==",
            "number": 45,
            "state": "closed",
            "title": "0.21.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 132,
            "created_at": "2019-12-09T08:39:58Z",
            "updated_at": "2021-01-15T19:50:53Z",
            "closed_at": "2021-01-15T19:50:53Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20152",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20152",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20152.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20152.patch"
          },
          "closed_at": "2020-10-27T07:44:29Z",
          "created_at": "2020-10-15T08:36:44Z",
          "updated_at": "2022-02-15T10:48:20Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-15T22:17:41Z",
      "updated_at": "2020-10-15T22:17:41Z",
      "source": {
        "issue": {
          "id": 722711719,
          "node_id": "MDU6SXNzdWU3MjI3MTE3MTk=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20160",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20160/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20160/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20160/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/20160",
          "number": 20160,
          "state": "open",
          "state_reason": null,
          "title": "Proposed Timeline for Legacy Wallet and BDB removal",
          "body": "Here is a proposed timeline for the move from legacy wallets to descriptor wallets, and at the same time, bdb to sqlite, culminating with the removal of both legacy wallets and bdb. Even though the wallet type and the wallet storage format are orthogonal to each other, as noted in #19077, I would like to tie them together for the sake of simplicity when it comes to how we make new wallets and the migration of one type to another.\r\n\r\nThe 4 combinations of type and format are: legacy-bdb, legacy-sqlite, descriptor-bdb, and descriptor-sqlite. While all 4 types will be supported, we will primarily deal with legacy-bdb and descriptor-sqlite. Setting `descriptors=True` in `createwallet` (or checking the Descriptors option in the GUI) will always make a descriptor-sqlite. Setting that to `False` will always make a legacy-bdb.\r\n\r\n- [x] 0.21 (late 2020)\r\n  - [x] Initial release of descriptor type and sqlite format. (#16528, #19077)\r\n  - [x] Descriptor type is experimental with a warning as such (#16528)\r\n  - [x] Only legacy-bdb and descriptor-sqlite will be created (#19077)\r\n- [x] 22.0 (mid 2021)\r\n  - [x] Implement descriptor exports (#20226)\r\n  - [x] Legacy type remains default (no pr needed)\r\n  - [x] Introduce `dump` and `createfromdump` wallet tool commands with an additional `-format` option to specify the wallet type (#19137)\r\n    * Users may use `dump` and then `createfromdump` in order to make legacy-sqlite from legacy-bdb\r\n    * Users may use `dump` and then `createfromdump` in order to make descriptor-bdb from descriptor-sqlite\r\n  - [x] If a wallet specified in conf or command line doesn't exist, don't make a wallet and instead warn (#15454)\r\n- [x] 23.0 (early 2022)\r\n  - [x] Change descriptor type to non-experimental (#23002)\r\n  - [x] Change `createwallet` `descriptors` default to `True` (#23002)\r\n  - [x] Change wallet tool `create` `-descriptors` default to `True` (#23002)\r\n- [x] 24.0 (late 2022)\r\n  - [x] Introduce `migratewallet` command to migrate a legacy-bdb to descriptor-sqlite (#19602)\r\n  - [x] For newly created legacy-bdb wallets, warn that they are deprecated and will soon be unsupported (#24505)\r\n- [ ] 26.0 (late 2023)\r\n  - [ ] Reimplement legacy-bdb to descriptor-sqlite migration (maybe as a separate command or in the wallet tool) to be independent of `LegacyScriptPubKeyMan` and BDB (#26596)\r\n  - [ ] For `dump`, implement an independent BDB file loader (this should probably be shared with the previous) (#26606)\r\n  - [x] When loading legacy-bdb, descriptor-bdb, or legacy-sqlite wallets, warn that the legacy type and bdb format will soon be unsupported, as applicable. (#27869)\r\n- [ ] 27.0 (early 2024)\r\n  - [ ] Stop creating new legacy-bdb wallets (not yet started)\r\n  - [ ] Make the loading warning louder (not yet started)\r\n- [ ] 28.0 (late 2024)\r\n  - [ ] Stop loading legacy-bdb, descriptor-bdb, legacy-sqlite wallet entirely. Inform users how to migrate (not yet started)\r\n  - [ ] Remove `LegacyScriptPubKeyMan` except for the independent migration stuff (not yet started)\r\n  - [ ] Remove BDB except for independent loading for migration stuff (not yet started)\r\n\r\nThe migration code will probably be around for a long time/forever.\r\n\r\nNote that we expect users who go through the effort to make a legacy-sqlite or descriptor-bdb wallet to suck it up and deal with the consequences of doing something that isn't really supported. Such users should be able to figure out for themselves how to migrate their wallets. (Maybe `migratewallet` can migrate legacy-sqlite to descriptor-sqlite. bdb to sqlite is way easier than legacy to descriptor).",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/60",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/60",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/60/labels",
            "id": 9286970,
            "node_id": "MI_kwDOABII584AjbU6",
            "number": 60,
            "state": "open",
            "title": "26.0",
            "description": "",
            "creator": {
              "login": "fanquake",
              "id": 863730,
              "node_id": "MDQ6VXNlcjg2MzczMA==",
              "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/fanquake",
              "html_url": "https://github.com/fanquake",
              "followers_url": "https://api.github.com/users/fanquake/followers",
              "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
              "organizations_url": "https://api.github.com/users/fanquake/orgs",
              "repos_url": "https://api.github.com/users/fanquake/repos",
              "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/fanquake/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 7,
            "closed_issues": 23,
            "created_at": "2023-04-15T11:36:05Z",
            "updated_at": "2023-08-01T16:50:00Z"
          },
          "locked": false,
          "comments": 35,
          "created_at": "2020-10-15T22:17:41Z",
          "updated_at": "2023-07-06T10:08:14Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 3886744199,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4ODY3NDQxOTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3886744199",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ac1143b11dd8e0c5c8eb78f37b2bbdd5d40cec1f",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/ac1143b11dd8e0c5c8eb78f37b2bbdd5d40cec1f",
      "created_at": "2020-10-16T14:40:20Z"
    },
    {
      "event": "referenced",
      "id": 3887212368,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4ODcyMTIzNjg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3887212368",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c7e926b4cd4075b432321c8bb633ebe0736be253",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/c7e926b4cd4075b432321c8bb633ebe0736be253",
      "created_at": "2020-10-16T16:24:55Z"
    },
    {
      "event": "referenced",
      "id": 3895931605,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4OTU5MzE2MDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3895931605",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f5bd46a4cc6d395ce71ecb99852c1774235a249c",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5bd46a4cc6d395ce71ecb99852c1774235a249c",
      "created_at": "2020-10-19T23:35:50Z"
    },
    {
      "event": "referenced",
      "id": 3895974751,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4OTU5NzQ3NTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3895974751",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b01329c2ec6879499f87e77ebe93753f74ddb9c1",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/b01329c2ec6879499f87e77ebe93753f74ddb9c1",
      "created_at": "2020-10-19T23:56:08Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-20T12:41:16Z",
      "updated_at": "2020-10-20T12:41:16Z",
      "source": {
        "issue": {
          "id": 722358468,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTA0MTIyNjU1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20156",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20156/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20156/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20156/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20156",
          "number": 20156,
          "state": "closed",
          "state_reason": null,
          "title": "build: Make sqlite support optional (compile-time)",
          "body": "As a new requirement, sqlite support should be optional. This PR aims to be only minimum/blocker changes for 0.21.\r\n\r\nPotential follow-up PRs after this:\r\n* Make BDB support optional\r\n* Nicer error messages when user tries to load an unsupported wallet\r\n* Don't compile descriptor wallet code if sqlite disabled",
          "user": {
            "login": "luke-jr",
            "id": 1095675,
            "node_id": "MDQ6VXNlcjEwOTU2NzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/luke-jr",
            "html_url": "https://github.com/luke-jr",
            "followers_url": "https://api.github.com/users/luke-jr/followers",
            "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
            "organizations_url": "https://api.github.com/users/luke-jr/orgs",
            "repos_url": "https://api.github.com/users/luke-jr/repos",
            "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/luke-jr/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/45",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45/labels",
            "id": 4914019,
            "node_id": "MDk6TWlsZXN0b25lNDkxNDAxOQ==",
            "number": 45,
            "state": "closed",
            "title": "0.21.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 132,
            "created_at": "2019-12-09T08:39:58Z",
            "updated_at": "2021-01-15T19:50:53Z",
            "closed_at": "2021-01-15T19:50:53Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 15,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20156",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20156",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20156.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20156.patch"
          },
          "closed_at": "2020-10-29T11:04:16Z",
          "created_at": "2020-10-15T13:53:31Z",
          "updated_at": "2022-02-15T11:01:12Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-20T21:19:49Z",
      "updated_at": "2020-10-20T21:19:49Z",
      "source": {
        "issue": {
          "id": 725951984,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTA3MTAzMDE5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20206",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20206/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20206/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20206/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20206",
          "number": 20206,
          "state": "closed",
          "state_reason": null,
          "title": "wallet, refactor: Include headers instead of function declarations",
          "body": "This PR is a #19077 follow up: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502882199",
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20206",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20206",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20206.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20206.patch"
          },
          "closed_at": "2020-12-19T17:21:18Z",
          "created_at": "2020-10-20T21:19:48Z",
          "updated_at": "2022-02-15T10:39:54Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 3924427898,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5MjQ0Mjc4OTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3924427898",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "67d4643a1a763b893ee69f6bbbf59ef1f2cb0d51",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/67d4643a1a763b893ee69f6bbbf59ef1f2cb0d51",
      "created_at": "2020-10-27T07:44:11Z"
    },
    {
      "event": "referenced",
      "id": 3926492756,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5MjY0OTI3NTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3926492756",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4e8d3dc74dec47a2c5d71db01874589307654f93",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/4e8d3dc74dec47a2c5d71db01874589307654f93",
      "created_at": "2020-10-27T15:12:05Z"
    },
    {
      "event": "reviewed",
      "id": 524490449,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NDkwNDQ5",
      "url": null,
      "actor": null,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-524490449",
      "submitted_at": "2020-11-05T17:21:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "referenced",
      "id": 4077548808,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwNzc1NDg4MDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4077548808",
      "actor": {
        "login": "janus",
        "id": 6726,
        "node_id": "MDQ6VXNlcjY3MjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6726?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/janus",
        "html_url": "https://github.com/janus",
        "followers_url": "https://api.github.com/users/janus/followers",
        "following_url": "https://api.github.com/users/janus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/janus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/janus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/janus/subscriptions",
        "organizations_url": "https://api.github.com/users/janus/orgs",
        "repos_url": "https://api.github.com/users/janus/repos",
        "events_url": "https://api.github.com/users/janus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/janus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "969bd258e57dc116b7fa5487de426a84402be1dd",
      "commit_url": "https://api.github.com/repos/janus/bitgesell/commits/969bd258e57dc116b7fa5487de426a84402be1dd",
      "created_at": "2020-12-07T03:46:04Z"
    },
    {
      "event": "reviewed",
      "id": 760049288,
      "node_id": "PRR_kwDOABII584tTW6I",
      "url": null,
      "actor": null,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "baby636",
        "id": 61610729,
        "node_id": "MDQ6VXNlcjYxNjEwNzI5",
        "avatar_url": "https://avatars.githubusercontent.com/u/61610729?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/baby636",
        "html_url": "https://github.com/baby636",
        "followers_url": "https://api.github.com/users/baby636/followers",
        "following_url": "https://api.github.com/users/baby636/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/baby636/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/baby636/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/baby636/subscriptions",
        "organizations_url": "https://api.github.com/users/baby636/orgs",
        "repos_url": "https://api.github.com/users/baby636/repos",
        "events_url": "https://api.github.com/users/baby636/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/baby636/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-760049288",
      "submitted_at": "2021-09-21T17:27:21Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
    },
    {
      "event": "referenced",
      "id": 5409150201,
      "node_id": "REFE_lADOABII584lRc9hzwAAAAFCaRT5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5409150201",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9c7a754d593555ad21347c3e6fcd6508c2516caf",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/9c7a754d593555ad21347c3e6fcd6508c2516caf",
      "created_at": "2021-10-05T08:50:05Z"
    },
    {
      "event": "referenced",
      "id": 5677890644,
      "node_id": "REFE_lADOABII584lRc9hzwAAAAFSbbxU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5677890644",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "67f1d37746765a9d95ecc633eb6ecfe6e88ab92b",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/67f1d37746765a9d95ecc633eb6ecfe6e88ab92b",
      "created_at": "2021-11-26T14:09:12Z"
    },
    {
      "event": "referenced",
      "id": 5677906235,
      "node_id": "REFE_lADOABII584lRc9hzwAAAAFSbfk7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5677906235",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "347ff5cb233257f4e45b6550d2bbd398886e595b",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/347ff5cb233257f4e45b6550d2bbd398886e595b",
      "created_at": "2021-11-26T14:12:32Z"
    },
    {
      "event": "referenced",
      "id": 5677906240,
      "node_id": "REFE_lADOABII584lRc9hzwAAAAFSbflA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5677906240",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "688eebd27dff6916ba998cadb1f102a19c6750f6",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/688eebd27dff6916ba998cadb1f102a19c6750f6",
      "created_at": "2021-11-26T14:12:32Z"
    },
    {
      "event": "referenced",
      "id": 5677906243,
      "node_id": "REFE_lADOABII584lRc9hzwAAAAFSbflD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5677906243",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "57ccdc4b058d92adb30abfa9944071c041beabf1",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/57ccdc4b058d92adb30abfa9944071c041beabf1",
      "created_at": "2021-11-26T14:12:32Z"
    },
    {
      "event": "referenced",
      "id": 5677906250,
      "node_id": "REFE_lADOABII584lRc9hzwAAAAFSbflK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5677906250",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d5ebe098657aad01345755aeec4764be260349f2",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/d5ebe098657aad01345755aeec4764be260349f2",
      "created_at": "2021-11-26T14:12:32Z"
    },
    {
      "event": "referenced",
      "id": 5677906256,
      "node_id": "REFE_lADOABII584lRc9hzwAAAAFSbflQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5677906256",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7d374d61e6828d026a6a205a1b17082c5bd7e70f",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/7d374d61e6828d026a6a205a1b17082c5bd7e70f",
      "created_at": "2021-11-26T14:12:32Z"
    },
    {
      "event": "referenced",
      "id": 5677906261,
      "node_id": "REFE_lADOABII584lRc9hzwAAAAFSbflV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5677906261",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6df17019b1823a6c58eaa59f6b59fb75fbb3f716",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/6df17019b1823a6c58eaa59f6b59fb75fbb3f716",
      "created_at": "2021-11-26T14:12:32Z"
    },
    {
      "event": "referenced",
      "id": 5677906265,
      "node_id": "REFE_lADOABII584lRc9hzwAAAAFSbflZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5677906265",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "cb6d8fadf60917808506ce223e136b3c550b8990",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/cb6d8fadf60917808506ce223e136b3c550b8990",
      "created_at": "2021-11-26T14:12:32Z"
    },
    {
      "event": "referenced",
      "id": 5677906268,
      "node_id": "REFE_lADOABII584lRc9hzwAAAAFSbflc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5677906268",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0b1a532696e9b256be839315e736e65973871dba",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/0b1a532696e9b256be839315e736e65973871dba",
      "created_at": "2021-11-26T14:12:32Z"
    },
    {
      "event": "referenced",
      "id": 5677906276,
      "node_id": "REFE_lADOABII584lRc9hzwAAAAFSbflk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5677906276",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "74697b45545fab9dfe4995b963044401df6ef1f3",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/74697b45545fab9dfe4995b963044401df6ef1f3",
      "created_at": "2021-11-26T14:12:33Z"
    },
    {
      "event": "referenced",
      "id": 5718882145,
      "node_id": "REFE_lADOABII584lRc9hzwAAAAFU3zdh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5718882145",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9621980786207edaf5b0493673961e0bcfc85ff9",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/9621980786207edaf5b0493673961e0bcfc85ff9",
      "created_at": "2021-12-06T08:28:36Z"
    },
    {
      "event": "referenced",
      "id": 5718882152,
      "node_id": "REFE_lADOABII584lRc9hzwAAAAFU3zdo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5718882152",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "27c1c3ad1fe0189d9a36817b661f624ccbe4066b",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/27c1c3ad1fe0189d9a36817b661f624ccbe4066b",
      "created_at": "2021-12-06T08:28:36Z"
    },
    {
      "event": "referenced",
      "id": 5718882162,
      "node_id": "REFE_lADOABII584lRc9hzwAAAAFU3zdy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5718882162",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b35b9465a27059bc1c2158c0fdac1826929a0af0",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/b35b9465a27059bc1c2158c0fdac1826929a0af0",
      "created_at": "2021-12-06T08:28:36Z"
    },
    {
      "event": "referenced",
      "id": 5718882172,
      "node_id": "REFE_lADOABII584lRc9hzwAAAAFU3zd8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5718882172",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "67d1d3dc6b4d126d68639f91f8a0e9f881595ea0",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/67d1d3dc6b4d126d68639f91f8a0e9f881595ea0",
      "created_at": "2021-12-06T08:28:36Z"
    },
    {
      "event": "referenced",
      "id": 5718882181,
      "node_id": "REFE_lADOABII584lRc9hzwAAAAFU3zeF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5718882181",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4650c91b6be90a132cab3af1c45a24f28524f92b",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/4650c91b6be90a132cab3af1c45a24f28524f92b",
      "created_at": "2021-12-06T08:28:36Z"
    },
    {
      "event": "referenced",
      "id": 7198638179,
      "node_id": "REFE_lADOABII584lRc9hzwAAAAGtEoBj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7198638179",
      "actor": {
        "login": "PiRK",
        "id": 419570,
        "node_id": "MDQ6VXNlcjQxOTU3MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/419570?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PiRK",
        "html_url": "https://github.com/PiRK",
        "followers_url": "https://api.github.com/users/PiRK/followers",
        "following_url": "https://api.github.com/users/PiRK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PiRK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PiRK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PiRK/subscriptions",
        "organizations_url": "https://api.github.com/users/PiRK/orgs",
        "repos_url": "https://api.github.com/users/PiRK/repos",
        "events_url": "https://api.github.com/users/PiRK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PiRK/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7a597058bb6038bb32d0a6ed7586234df8df55c1",
      "commit_url": "https://api.github.com/repos/PiRK/lotusd/commits/7a597058bb6038bb32d0a6ed7586234df8df55c1",
      "created_at": "2022-08-16T16:09:11Z"
    },
    {
      "event": "locked",
      "id": 7699632904,
      "node_id": "LOE_lADOABII584lRc9hzwAAAAHK7xMI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7699632904",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-30T19:10:25Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460269271",
      "pull_request_review_id": 455162194,
      "id": 460269271,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI2OTI3MQ==",
      "diff_hunk": "@@ -101,9 +101,23 @@ WalletLocation::WalletLocation(const std::string& name)\n bool WalletLocation::Exists() const\n {\n     fs::path path = m_path;\n-    // For the default wallet, check specifically for the wallet.dat file\n-    if (m_name.empty()) {\n+\n+    fs::file_type path_type = fs::symlink_status(path).type();\n+    // Short circuit if it just doesn't exist\n+    if (path_type == fs::file_not_found) {\n+        return false;\n+    }\n+\n+    // If it's a file, it exists (duh)\n+    if (path_type == fs::regular_file) {\n+        return true;\n+    }\n+\n+    // If it's a directory, check specifically for the wallet.dat files\n+    if (path_type == fs::directory_file || (path_type == fs::symlink_file && fs::is_directory(path))) {\n         path = fs::absolute(\"wallet.dat\", m_path);\n+        return fs::symlink_status(path).type() != fs::file_not_found;\n     }\n-    return fs::symlink_status(path).type() != fs::file_not_found;\n+    // Something exists here but we don't know what it is... Just say something exists so an error can be caught later",
      "path": "src/wallet/walletutil.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "6e7ef52e359e55bc82a30207a701995f0ca255d7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Change WalletLocation::Exists to check for wallet file existence\" (6e7ef52e359e55bc82a30207a701995f0ca255d7)\r\n\r\nMinor: I can't really figure out what this commit and also the previous commit \"wallet: Don't Verify if database location doesn't exist\" (b64e40310742e3975ae704a801ccafa73d8617bf) are doing. Changes seem harmless, but they are making code more complicated. It would be good if commit messages mentioned motivations in commits like these where the motivations aren't obvious.",
      "created_at": "2020-07-24T20:20:16Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460269271",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460269271"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460275191",
      "pull_request_review_id": 455162194,
      "id": 460275191,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI3NTE5MQ==",
      "diff_hunk": "@@ -1138,6 +1138,9 @@ fi\n if test x$enable_wallet != xno; then\n     dnl Check for libdb_cxx only if wallet enabled\n     BITCOIN_FIND_BDB48\n+\n+    dnl Check for sqlite3\n+    AC_CHECK_HEADERS([sqlite3.h], [AC_CHECK_LIB([sqlite3], [sqlite3_open], [SQLITE_LIBS=-lsqlite3], [AC_MSG_ERROR(sqlite3_open missing from libsqlite3)], [-pthread -lpthread])], [AC_MSG_ERROR(sqlite3.h headers missing)])",
      "path": "configure.ac",
      "position": null,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "31243f5482bb1c8a71affbe7ced6653a09bd6829",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add libsqlite3\" (31243f5482bb1c8a71affbe7ced6653a09bd6829)\r\n\r\nWould suggest splitting this commit and other build and depends and travis related commits into a separate build PR so it can get feedback from bitcoin build aficionados (and so this PR can more approachable for regular and wallet reviewers).\r\n\r\nI think probably build reviewers will want a `--with-sqlite` configure option to allow sqlite to be disabled in the build even if it is present in the system. They might also want the sqlite location to be determined through pkgconfig instead of assumed to be in the system include directory.",
      "created_at": "2020-07-24T20:34:37Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460275191",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460275191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460276199",
      "pull_request_review_id": 455162194,
      "id": 460276199,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI3NjE5OQ==",
      "diff_hunk": "@@ -83,6 +92,8 @@ class SQLiteDatabase : public WalletDatabase\n \n     /** Make a SQLiteBatch connected to this database */\n     std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n+\n+    sqlite3* m_db;",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 55,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "08847ca4de58c112da4b6455230f7b454afa543c",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Constructors, destructors, and relevant private fields for SQLiteDatabase/Batch\" (08847ca4de58c112da4b6455230f7b454afa543c)\r\n\r\nMinor: Suggest `sqlite3* m_db{nullptr};` or `sqlite3* m_db = nullptr;` here to be sure this is safe without looking and even if someone adds another constructor.",
      "created_at": "2020-07-24T20:37:14Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460276199",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460276199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460278213",
      "pull_request_review_id": 455162194,
      "id": 460278213,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI3ODIxMw==",
      "diff_hunk": "@@ -5,12 +5,20 @@\n #include <wallet/sqlite.h>\n \n #include <logging.h>\n+#include <sync.h>\n #include <util/strencodings.h>\n #include <util/translation.h>\n #include <wallet/db.h>\n \n #include <sqlite3.h>\n #include <stdint.h>\n+#include <unordered_set>\n+\n+namespace {\n+    RecursiveMutex cs_sqlite;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "d038d04a4e3e0522a51cf0d39110749f8395f61a",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Introduce g_file_paths\" (d038d04a4e3e0522a51cf0d39110749f8395f61a)\r\n\r\nMinor: Pretty sure we can get rid of these globals with more sane loading code in the wallet, but in any case could consider switching RecursiveMutex to Mutex if possible and switching `cs_sqlite` to `g_sqlite_mutex` to follow newer conventions",
      "created_at": "2020-07-24T20:41:46Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460278213",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460278213"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460279135",
      "pull_request_review_id": 455162194,
      "id": 460279135,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI3OTEzNQ==",
      "diff_hunk": "@@ -124,3 +125,8 @@ bool SQLiteBatch::TxnAbort()\n {\n     return false;\n }\n+\n+std::string SQLiteDatabaseVersion()",
      "path": "src/wallet/sqlite.cpp",
      "position": 592,
      "original_position": 13,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "b2f2e7171861fe2998f2c27af44b65b0e1f558aa",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteDatabaseVersion\" (b2f2e7171861fe2998f2c27af44b65b0e1f558aa)\r\n\r\nMinor: SQLiteLibraryVersion might be a more descriptive name",
      "created_at": "2020-07-24T20:43:50Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460279135",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460279135"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 592,
      "original_line": 592,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460280638",
      "pull_request_review_id": 455162194,
      "id": 460280638,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI4MDYzOA==",
      "diff_hunk": "@@ -34,6 +34,10 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n     LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n \n+    int ret = sqlite3_initialize();",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "5c78c9094a0158e4d466b696a3bbbcbd35b51b15",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Initialize and Shutdown sqlite3 globals\" (5c78c9094a0158e4d466b696a3bbbcbd35b51b15)\r\n\r\nMinor: Would add comment saying this is a no-op if it is already called. Another option would be to only call it when g_file_paths is empty.",
      "created_at": "2020-07-24T20:47:36Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460280638",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460280638"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460281099",
      "pull_request_review_id": 455162194,
      "id": 460281099,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI4MTA5OQ==",
      "diff_hunk": "@@ -44,6 +48,9 @@ SQLiteDatabase::~SQLiteDatabase()\n     Close();\n     LOCK(cs_sqlite);\n     g_file_paths.erase(m_file_path);\n+    if (g_file_paths.empty()) {\n+        sqlite3_shutdown();",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "5c78c9094a0158e4d466b696a3bbbcbd35b51b15",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Initialize and Shutdown sqlite3 globals\" (5c78c9094a0158e4d466b696a3bbbcbd35b51b15)\r\n\r\nReturn value isn't checked here. Would suggest at least logging an error so we know if something has gone wrong.",
      "created_at": "2020-07-24T20:48:46Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460281099",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460281099"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460293438",
      "pull_request_review_id": 455192029,
      "id": 460293438,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5MzQzOA==",
      "diff_hunk": "@@ -101,9 +101,23 @@ WalletLocation::WalletLocation(const std::string& name)\n bool WalletLocation::Exists() const\n {\n     fs::path path = m_path;\n-    // For the default wallet, check specifically for the wallet.dat file\n-    if (m_name.empty()) {\n+\n+    fs::file_type path_type = fs::symlink_status(path).type();\n+    // Short circuit if it just doesn't exist\n+    if (path_type == fs::file_not_found) {\n+        return false;\n+    }\n+\n+    // If it's a file, it exists (duh)\n+    if (path_type == fs::regular_file) {\n+        return true;\n+    }\n+\n+    // If it's a directory, check specifically for the wallet.dat files\n+    if (path_type == fs::directory_file || (path_type == fs::symlink_file && fs::is_directory(path))) {\n         path = fs::absolute(\"wallet.dat\", m_path);\n+        return fs::symlink_status(path).type() != fs::file_not_found;\n     }\n-    return fs::symlink_status(path).type() != fs::file_not_found;\n+    // Something exists here but we don't know what it is... Just say something exists so an error can be caught later",
      "path": "src/wallet/walletutil.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "6e7ef52e359e55bc82a30207a701995f0ca255d7",
      "in_reply_to_id": 460269271,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The motivation is so that we check the wallet file itself as part of the db type checking later on. IIRC there were some issues with where the wrong file type was being used that necessitated these changes.\r\n\r\nI'll try to expand the commit message ",
      "created_at": "2020-07-24T21:20:52Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460293438",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460293438"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460596136",
      "pull_request_review_id": 455413175,
      "id": 460596136,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5NjEzNg==",
      "diff_hunk": "@@ -83,6 +92,8 @@ class SQLiteDatabase : public WalletDatabase\n \n     /** Make a SQLiteBatch connected to this database */\n     std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n+\n+    sqlite3* m_db;",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 55,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "08847ca4de58c112da4b6455230f7b454afa543c",
      "in_reply_to_id": 460276199,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-07-27T00:47:32Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460596136",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460596136"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460596148",
      "pull_request_review_id": 455413190,
      "id": 460596148,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5NjE0OA==",
      "diff_hunk": "@@ -5,12 +5,20 @@\n #include <wallet/sqlite.h>\n \n #include <logging.h>\n+#include <sync.h>\n #include <util/strencodings.h>\n #include <util/translation.h>\n #include <wallet/db.h>\n \n #include <sqlite3.h>\n #include <stdint.h>\n+#include <unordered_set>\n+\n+namespace {\n+    RecursiveMutex cs_sqlite;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "d038d04a4e3e0522a51cf0d39110749f8395f61a",
      "in_reply_to_id": 460278213,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Renamed",
      "created_at": "2020-07-27T00:47:39Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460596148",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460596148"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460596211",
      "pull_request_review_id": 455413266,
      "id": 460596211,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5NjIxMQ==",
      "diff_hunk": "@@ -124,3 +125,8 @@ bool SQLiteBatch::TxnAbort()\n {\n     return false;\n }\n+\n+std::string SQLiteDatabaseVersion()",
      "path": "src/wallet/sqlite.cpp",
      "position": 592,
      "original_position": 13,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "b2f2e7171861fe2998f2c27af44b65b0e1f558aa",
      "in_reply_to_id": 460279135,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Probably, but I'm also following the convention set by `BerkeleyDatabaseVersion`.",
      "created_at": "2020-07-27T00:48:16Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460596211",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460596211"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 592,
      "original_line": 592,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460596216",
      "pull_request_review_id": 455413284,
      "id": 460596216,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5NjIxNg==",
      "diff_hunk": "@@ -34,6 +34,10 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n     LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n \n+    int ret = sqlite3_initialize();",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "5c78c9094a0158e4d466b696a3bbbcbd35b51b15",
      "in_reply_to_id": 460280638,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-07-27T00:48:21Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460596216",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460596216"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460596231",
      "pull_request_review_id": 455413296,
      "id": 460596231,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5NjIzMQ==",
      "diff_hunk": "@@ -44,6 +48,9 @@ SQLiteDatabase::~SQLiteDatabase()\n     Close();\n     LOCK(cs_sqlite);\n     g_file_paths.erase(m_file_path);\n+    if (g_file_paths.empty()) {\n+        sqlite3_shutdown();",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "5c78c9094a0158e4d466b696a3bbbcbd35b51b15",
      "in_reply_to_id": 460281099,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-07-27T00:48:27Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460596231",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460596231"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464085954",
      "pull_request_review_id": 459654361,
      "id": 464085954,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA4NTk1NA==",
      "diff_hunk": "@@ -40,18 +42,7 @@ static bool IsBerkeleyBtree(const fs::path& path)\n     if (ec) LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), path.string());\n     if (size < 4096) return false;\n \n-    fsbridge::ifstream file(path, std::ios::binary);\n-    if (!file.is_open()) return false;\n-\n-    file.seekg(12, std::ios::beg); // Magic bytes start at offset 12\n-    uint32_t data = 0;\n-    file.read((char*) &data, sizeof(data)); // Read 4 bytes of file to compare against magic\n-\n-    // Berkeley DB Btree magic bytes, from:\n-    //  https://github.com/file/file/blob/5824af38469ec1ca9ac3ffd251e7afe9dc11e227/magic/Magdir/database#L74-L75\n-    //  - big endian systems - 00 05 31 62\n-    //  - little endian systems - 62 31 05 00\n-    return data == 0x00053162 || data == 0x62310500;\n+    return IsBDBFile(path) || IsSQLiteFile(path);",
      "path": "src/wallet/walletutil.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "e68484878b539692be5030b8941fd3fe81d79870",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A couple of comments here:\r\n\r\n- file at path is opened twice.\r\n- nit, in `DetermineStorageType` you check `IsSQLiteFile` first, maybe change there for now as most is BDB.\r\n- maybe follow up, this could use `DetermineStorageType`.\r\n",
      "created_at": "2020-08-02T14:41:06Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r464085954",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464085954"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465347410",
      "pull_request_review_id": 461195815,
      "id": 465347410,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0NzQxMA==",
      "diff_hunk": "@@ -40,18 +42,7 @@ static bool IsBerkeleyBtree(const fs::path& path)\n     if (ec) LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), path.string());\n     if (size < 4096) return false;\n \n-    fsbridge::ifstream file(path, std::ios::binary);\n-    if (!file.is_open()) return false;\n-\n-    file.seekg(12, std::ios::beg); // Magic bytes start at offset 12\n-    uint32_t data = 0;\n-    file.read((char*) &data, sizeof(data)); // Read 4 bytes of file to compare against magic\n-\n-    // Berkeley DB Btree magic bytes, from:\n-    //  https://github.com/file/file/blob/5824af38469ec1ca9ac3ffd251e7afe9dc11e227/magic/Magdir/database#L74-L75\n-    //  - big endian systems - 00 05 31 62\n-    //  - little endian systems - 62 31 05 00\n-    return data == 0x00053162 || data == 0x62310500;\n+    return IsBDBFile(path) || IsSQLiteFile(path);",
      "path": "src/wallet/walletutil.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "e68484878b539692be5030b8941fd3fe81d79870",
      "in_reply_to_id": 464085954,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> file at path is opened twice.\r\n\r\nIt is?\r\n\r\nDone the other 2 suggestions.",
      "created_at": "2020-08-04T21:43:46Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r465347410",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465347410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465348577",
      "pull_request_review_id": 461197201,
      "id": 465348577,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0ODU3Nw==",
      "diff_hunk": "@@ -40,18 +42,7 @@ static bool IsBerkeleyBtree(const fs::path& path)\n     if (ec) LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), path.string());\n     if (size < 4096) return false;\n \n-    fsbridge::ifstream file(path, std::ios::binary);\n-    if (!file.is_open()) return false;\n-\n-    file.seekg(12, std::ios::beg); // Magic bytes start at offset 12\n-    uint32_t data = 0;\n-    file.read((char*) &data, sizeof(data)); // Read 4 bytes of file to compare against magic\n-\n-    // Berkeley DB Btree magic bytes, from:\n-    //  https://github.com/file/file/blob/5824af38469ec1ca9ac3ffd251e7afe9dc11e227/magic/Magdir/database#L74-L75\n-    //  - big endian systems - 00 05 31 62\n-    //  - little endian systems - 62 31 05 00\n-    return data == 0x00053162 || data == 0x62310500;\n+    return IsBDBFile(path) || IsSQLiteFile(path);",
      "path": "src/wallet/walletutil.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "e68484878b539692be5030b8941fd3fe81d79870",
      "in_reply_to_id": 464085954,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "At worst case it is.",
      "created_at": "2020-08-04T21:46:23Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r465348577",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465348577"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467193743",
      "pull_request_review_id": 463507539,
      "id": 467193743,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5Mzc0Mw==",
      "diff_hunk": "@@ -269,7 +269,7 @@ def wallet_file(name):\n \n         # Fail to load if a directory is specified that doesn't contain a wallet\n         os.mkdir(wallet_dir('empty_wallet_dir'))\n-        assert_raises_rpc_error(-18, \"Directory empty_wallet_dir does not contain a wallet.dat file\", self.nodes[0].loadwallet, 'empty_wallet_dir')\n+        assert_raises_rpc_error(-18, \"Wallet empty_wallet_dir not found.\", self.nodes[0].loadwallet, 'empty_wallet_dir')",
      "path": "test/functional/wallet_multiwallet.py",
      "position": null,
      "original_position": 5,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "787047133d22f014bea2646d3b23cd18801f19c2",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "787047133d22f014bea2646d3b23cd18801f19c2: you can drop the `else if (fs::is_directory(location.GetPath()` branch from `rpcwallet.cpp`",
      "created_at": "2020-08-07T18:09:06Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r467193743",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467193743"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 272,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467304981",
      "pull_request_review_id": 463662644,
      "id": 467304981,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNDk4MQ==",
      "diff_hunk": "@@ -5,12 +5,20 @@\n #include <wallet/sqlite.h>\n \n #include <logging.h>\n+#include <sync.h>\n #include <util/strencodings.h>\n #include <util/translation.h>\n #include <wallet/db.h>\n \n #include <sqlite3.h>\n #include <stdint.h>\n+#include <unordered_set>\n+\n+namespace {\n+    Mutex g_sqlite_mutex;\n+    //! Set of wallet file paths in use\n+    std::unordered_set<std::string> g_file_paths GUARDED_BY(g_sqlite_mutex);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fe790158c8a6c2019ebcb97b6637e1c069b76ed6",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add/Remove m_file_path to/from g_file_paths in con/destructor\" (316002da052cad68c54a48e918d1d5f2ca58c0d0)\r\n\r\nMinor: Developer notes and current clang-format config don't indent namespace contents\r\n\r\nAlso, I wonder if these variables are even necessary. If sqlite supports opening databases in an exclusive mode, there should be no need for our code to maintain this additional list of database files.",
      "created_at": "2020-08-07T22:02:29Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r467304981",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467304981"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468239295",
      "pull_request_review_id": 464651826,
      "id": 468239295,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzOTI5NQ==",
      "diff_hunk": "@@ -5,12 +5,20 @@\n #include <wallet/sqlite.h>\n \n #include <logging.h>\n+#include <sync.h>\n #include <util/strencodings.h>\n #include <util/translation.h>\n #include <wallet/db.h>\n \n #include <sqlite3.h>\n #include <stdint.h>\n+#include <unordered_set>\n+\n+namespace {\n+    Mutex g_sqlite_mutex;\n+    //! Set of wallet file paths in use\n+    std::unordered_set<std::string> g_file_paths GUARDED_BY(g_sqlite_mutex);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fe790158c8a6c2019ebcb97b6637e1c069b76ed6",
      "in_reply_to_id": 467304981,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "sqlite does have a way to open databases in an exclusive mode but we don't use it. But we also do that ourselves with the `.walletlock` file. So I think this is just unnecessary anyways and thus I've removed it.",
      "created_at": "2020-08-10T23:24:53Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r468239295",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468239295"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491332879",
      "pull_request_review_id": 491982796,
      "id": 491332879,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMzMjg3OQ==",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+    bool m_cursor_init = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+    ~SQLiteBatch() override { Close(); }\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+    bool PrepareDirectory() const;\n+\n+    void SetupSQLStatements();\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    bool Verify(bilingual_str& error);\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override;\n+    /** Indicate that database user has stopped using the database. Decrement m_refcount */\n+    void RemoveRef() override;\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* skip=nullptr) override;\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& dest) const override;\n+\n+    /** Make sure all changes are flushed to disk.\n+     */\n+    void Flush() override;\n+    /* flush the wallet passively (TRY_LOCK)\n+       ideal to be called periodically */\n+    bool PeriodicFlush() override;\n+\n+    void IncrementUpdateCounter() override { ++nUpdateCounter; }\n+\n+    void ReloadDbEnv() override;\n+\n+    std::string Filename() override { return m_file_path; };\n+\n+    /** Make a SQLiteBatch connected to this database */\n+    std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n+\n+    sqlite3* m_db{nullptr};\n+\n+    sqlite3_stmt* m_read_stmt = nullptr;",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 106,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1) I suppose the locking is done in the calling code. Do I understand correctly that it's managed by `cs_wallet`? \r\n\r\n2) nit: I believe it's better to have all members private. Why not make `SQLiteBatch` a friend class or just pass the statement handlers when we construct `SQLiteBatch` object.",
      "created_at": "2020-09-19T08:37:16Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r491332879",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491332879"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491354812",
      "pull_request_review_id": 491982796,
      "id": 491354812,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTM1NDgxMg==",
      "diff_hunk": "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 126,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I double pstratem's comment regarding `fullsync` and `checkpoint_fullsync`",
      "created_at": "2020-09-19T09:45:04Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r491354812",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491354812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491360876",
      "pull_request_review_id": 491982796,
      "id": 491360876,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTM2MDg3Ng==",
      "diff_hunk": "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);\n+    }\n+    sqlite3_finalize(stmt);\n+    sqlite3_close(db);\n+    return error.original.empty();\n+}\n+\n+void SQLiteDatabase::Open(const char* mode)\n+{\n+    if (!PrepareDirectory()) {\n+        throw std::runtime_error(\"Cannot obtain a lock on wallet directory\");\n+    }\n+\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {",
      "path": "src/wallet/sqlite.cpp",
      "position": 208,
      "original_position": 227,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What if we create read-only batch first and then a read-write batch? Looks like it's going to fail since the connection will remain read-only.",
      "created_at": "2020-09-19T10:03:19Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r491360876",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491360876"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 208,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491362245",
      "pull_request_review_id": 491982796,
      "id": 491362245,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTM2MjI0NQ==",
      "diff_hunk": "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);\n+    }\n+    sqlite3_finalize(stmt);\n+    sqlite3_close(db);\n+    return error.original.empty();\n+}\n+\n+void SQLiteDatabase::Open(const char* mode)\n+{\n+    if (!PrepareDirectory()) {\n+        throw std::runtime_error(\"Cannot obtain a lock on wallet directory\");\n+    }\n+\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));",
      "path": "src/wallet/sqlite.cpp",
      "position": 212,
      "original_position": 231,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: IIUC we need to close db handler even in the case of an error.",
      "created_at": "2020-09-19T10:06:55Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r491362245",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491362245"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 212,
      "original_line": 212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491651973",
      "pull_request_review_id": 491982796,
      "id": 491651973,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY1MTk3Mw==",
      "diff_hunk": "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);\n+    }\n+    sqlite3_finalize(stmt);\n+    sqlite3_close(db);\n+    return error.original.empty();\n+}\n+\n+void SQLiteDatabase::Open(const char* mode)\n+{\n+    if (!PrepareDirectory()) {\n+        throw std::runtime_error(\"Cannot obtain a lock on wallet directory\");\n+    }\n+\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            bool table_exists;\n+            // Check that the main table exists\n+            sqlite3_stmt* check_main_stmt;\n+            std::string check_main = \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\";\n+            ret = sqlite3_prepare_v2(db, check_main.c_str(), -1, &check_main_stmt, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to prepare statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            ret = sqlite3_step(check_main_stmt);\n+            if (sqlite3_finalize(check_main_stmt) != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to finalize statement checking table existence: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            if (ret == SQLITE_DONE) {\n+                table_exists = false;\n+            } else if (ret == SQLITE_ROW) {\n+                table_exists = true;\n+            } else {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to execute statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+\n+            if (!table_exists) {\n+                // Make the table for our key-value pairs\n+                std::string create_stmt = \"CREATE TABLE main(key BLOB PRIMARY KEY, value BLOB)\";\n+                ret = sqlite3_exec(db, create_stmt.c_str(), nullptr, nullptr, nullptr);\n+                if (ret != SQLITE_OK) {\n+                    throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+                }\n+            }\n+\n+            // Set the application id\n+            uint32_t app_id = ReadBE32(Params().MessageStart());\n+            std::string set_app_id = strprintf(\"PRAGMA application_id = %d\", (int32_t)app_id);\n+            ret = sqlite3_exec(db, set_app_id.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to set the application id: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+\n+            // Set the user version\n+            std::string set_user_ver = strprintf(\"PRAGMA user_version = %d\", WALLET_SCHEMA_VERSION);\n+            ret = sqlite3_exec(db, set_user_ver.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to set the wallet schema version: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+\n+        m_db = db;\n+    }\n+    SetupSQLStatements();\n+}\n+\n+bool SQLiteDatabase::Rewrite(const char* skip)\n+{\n+    while (true) {\n+        if (m_refcount == 0) {\n+            break;\n+        }\n+        UninterruptibleSleep(std::chrono::milliseconds{100});\n+    }\n+\n+    // Rewrite the database using the VACUUM command: https://sqlite.org/lang_vacuum.html\n+    int ret = sqlite3_exec(m_db, \"VACUUM\", nullptr, nullptr, nullptr);\n+    return ret == SQLITE_OK;\n+}\n+\n+bool SQLiteDatabase::PeriodicFlush()\n+{\n+    return true;\n+}\n+\n+bool SQLiteDatabase::Backup(const std::string& dest) const\n+{\n+    sqlite3* db_copy;\n+    int res = sqlite3_open(dest.c_str(), &db_copy);\n+    if (res != SQLITE_OK) {\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    sqlite3_backup* backup = sqlite3_backup_init(db_copy, \"main\", m_db, \"main\");\n+    if (!backup) {\n+        sqlite3_backup_finish(backup);\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    // Copy all of the pages using -1\n+    res = sqlite3_backup_step(backup, -1);\n+    if (res != SQLITE_DONE) {\n+        sqlite3_backup_finish(backup);\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    res = sqlite3_backup_finish(backup);\n+    sqlite3_close(db_copy);\n+    return res == SQLITE_OK;\n+}\n+\n+void SQLiteDatabase::Close()\n+{\n+    if (!m_db) return;\n+\n+    assert(m_refcount == 0);\n+\n+    // Free all of the prepared statements\n+    sqlite3_finalize(m_read_stmt);\n+    sqlite3_finalize(m_insert_stmt);\n+    sqlite3_finalize(m_overwrite_stmt);\n+    sqlite3_finalize(m_delete_stmt);\n+    sqlite3_finalize(m_cursor_stmt);\n+\n+    int res = sqlite3_close(m_db);\n+    if (res != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to close database: %s\\n\", sqlite3_errstr(res)));\n+    }\n+    m_db = nullptr;\n+\n+    UnlockDirectory(m_dir_path, \".walletlock\");\n+}\n+\n+void SQLiteDatabase::Flush() {}\n+\n+void SQLiteDatabase::ReloadDbEnv() {}\n+\n+void SQLiteDatabase::RemoveRef()\n+{\n+    m_refcount--;\n+}\n+\n+void SQLiteDatabase::AddRef()\n+{\n+    m_refcount++;\n+}\n+\n+std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(const char* mode, bool flush_on_close)\n+{\n+    // We ignore flush_on_close because we don't do manual flushing for SQLite\n+    return MakeUnique<SQLiteBatch>(*this, mode);\n+}\n+\n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n+    : m_database(database)\n+{\n+    m_read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+    m_database.AddRef();\n+    m_database.Open(mode);\n+}\n+\n+void SQLiteBatch::Flush() {}\n+\n+void SQLiteBatch::Close()\n+{\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        TxnAbort();\n+    }\n+    m_database.RemoveRef();\n+}\n+\n+bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_database.m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_database.m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_database.m_read_stmt);\n+        sqlite3_reset(m_database.m_read_stmt);\n+        return false;\n+    }\n+    res = sqlite3_step(m_database.m_read_stmt);\n+    if (res != SQLITE_ROW) {\n+        sqlite3_clear_bindings(m_database.m_read_stmt);\n+        sqlite3_reset(m_database.m_read_stmt);\n+        return false;\n+    }\n+    // Leftmost column in result is index 0\n+    const char* data = (const char*)sqlite3_column_blob(m_database.m_read_stmt, 0);\n+    int data_size = sqlite3_column_bytes(m_database.m_read_stmt, 0);\n+    value.write(data, data_size);\n+\n+    sqlite3_clear_bindings(m_database.m_read_stmt);\n+    sqlite3_reset(m_database.m_read_stmt);\n+    return true;\n+}\n+\n+bool SQLiteBatch::WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite)\n+{\n+    if (!m_database.m_db) return false;\n+    if (m_read_only) assert(!\"Write called on database in read-only mode\");\n+    assert(m_database.m_insert_stmt && m_database.m_overwrite_stmt);\n+\n+    sqlite3_stmt* stmt;\n+    if (overwrite) {\n+        stmt = m_database.m_overwrite_stmt;\n+    } else {\n+        stmt = m_database.m_insert_stmt;\n+    }\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    // Insert index 1 is key, 2 is value\n+    int res = sqlite3_bind_blob(stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n+        return false;\n+    }\n+    res = sqlite3_bind_blob(stmt, 2, value.data(), value.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n+        return false;\n+    }\n+\n+    // Execute\n+    res = sqlite3_step(stmt);\n+    sqlite3_clear_bindings(stmt);\n+    sqlite3_reset(stmt);\n+    return res == SQLITE_DONE;\n+}\n+\n+bool SQLiteBatch::EraseKey(CDataStream&& key)\n+{\n+    if (!m_database.m_db) return false;\n+    if (m_read_only) assert(!\"Erase called on database in read-only mode\");\n+    assert(m_database.m_delete_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_database.m_delete_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_database.m_delete_stmt);\n+        sqlite3_reset(m_database.m_delete_stmt);\n+        return false;\n+    }\n+\n+    // Execute\n+    res = sqlite3_step(m_database.m_delete_stmt);\n+    sqlite3_clear_bindings(m_database.m_delete_stmt);\n+    sqlite3_reset(m_database.m_delete_stmt);\n+    return res == SQLITE_DONE;\n+}\n+\n+bool SQLiteBatch::HasKey(CDataStream&& key)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_database.m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    bool ret = false;\n+    int res = sqlite3_bind_blob(m_database.m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res == SQLITE_OK) {\n+        res = sqlite3_step(m_database.m_read_stmt);\n+        if (res == SQLITE_ROW) {\n+            ret = true;\n+        }\n+    }\n+\n+    sqlite3_clear_bindings(m_database.m_read_stmt);\n+    sqlite3_reset(m_database.m_read_stmt);\n+    return ret;\n+}\n+\n+bool SQLiteBatch::StartCursor()\n+{\n+    assert(!m_cursor_init);\n+    if (!m_database.m_db) return false;\n+    m_cursor_init = true;\n+    return true;\n+}\n+\n+bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& complete)\n+{\n+    complete = false;",
      "path": "src/wallet/sqlite.cpp",
      "position": 509,
      "original_position": 505,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: why not verify `m_cursor_init` just in case?",
      "created_at": "2020-09-20T04:46:01Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r491651973",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491651973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 509,
      "original_line": 509,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491662874",
      "pull_request_review_id": 491982796,
      "id": 491662874,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY2Mjg3NA==",
      "diff_hunk": "@@ -170,7 +170,16 @@ void SQLiteDatabase::Open(const char* mode)\n \n bool SQLiteDatabase::Rewrite(const char* skip)\n {\n-    return false;\n+    while (true) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "ceac790fb2be0bcd5a1e20b275612c3b75df7786",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: maybe add an upper limit to avoid hanging the thread in case something went wrong?",
      "created_at": "2020-09-20T07:22:39Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r491662874",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491662874"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492397526",
      "pull_request_review_id": 493042692,
      "id": 492397526,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM5NzUyNg==",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+    bool m_cursor_init = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+    ~SQLiteBatch() override { Close(); }\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+    bool PrepareDirectory() const;\n+\n+    void SetupSQLStatements();\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    bool Verify(bilingual_str& error);\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override;\n+    /** Indicate that database user has stopped using the database. Decrement m_refcount */\n+    void RemoveRef() override;\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* skip=nullptr) override;\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& dest) const override;\n+\n+    /** Make sure all changes are flushed to disk.\n+     */\n+    void Flush() override;\n+    /* flush the wallet passively (TRY_LOCK)\n+       ideal to be called periodically */\n+    bool PeriodicFlush() override;\n+\n+    void IncrementUpdateCounter() override { ++nUpdateCounter; }\n+\n+    void ReloadDbEnv() override;\n+\n+    std::string Filename() override { return m_file_path; };\n+\n+    /** Make a SQLiteBatch connected to this database */\n+    std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n+\n+    sqlite3* m_db{nullptr};\n+\n+    sqlite3_stmt* m_read_stmt = nullptr;",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 106,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "in_reply_to_id": 491332879,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I suppose the locking is done in the calling code. Do I understand correctly that it's managed by `cs_wallet`?\r\n\r\nFor the most part, yes. Sometimes we do need to handle concurrency withing `SQLiteDatabase` but those should already be handled by `m_refcount` and sqlite itself.\r\n\r\n> nit: I believe it's better to have all members private. Why not make `SQLiteBatch` a friend class or just pass the statement handlers when we construct `SQLiteBatch` object.\r\n\r\nI suppose now we could pass them in. In a previous revision, I don't think that was possible.\r\n\r\nBut it's easier to just let them be public members. It would be 6 extra arguments to pass them in and we are already giving the `SQLiteDatabase` container.",
      "created_at": "2020-09-21T23:14:48Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492397526",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492397526"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492417032",
      "pull_request_review_id": 493064287,
      "id": 492417032,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQxNzAzMg==",
      "diff_hunk": "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);\n+    }\n+    sqlite3_finalize(stmt);\n+    sqlite3_close(db);\n+    return error.original.empty();\n+}\n+\n+void SQLiteDatabase::Open(const char* mode)\n+{\n+    if (!PrepareDirectory()) {\n+        throw std::runtime_error(\"Cannot obtain a lock on wallet directory\");\n+    }\n+\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {",
      "path": "src/wallet/sqlite.cpp",
      "position": 208,
      "original_position": 227,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "in_reply_to_id": 491360876,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we always open in read-write mode first so that doesn't have any effect. But I suppose we should still have a check for that.",
      "created_at": "2020-09-22T00:25:12Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492417032",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492417032"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 208,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492417585",
      "pull_request_review_id": 493064873,
      "id": 492417585,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQxNzU4NQ==",
      "diff_hunk": "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);\n+    }\n+    sqlite3_finalize(stmt);\n+    sqlite3_close(db);\n+    return error.original.empty();\n+}\n+\n+void SQLiteDatabase::Open(const char* mode)\n+{\n+    if (!PrepareDirectory()) {\n+        throw std::runtime_error(\"Cannot obtain a lock on wallet directory\");\n+    }\n+\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));",
      "path": "src/wallet/sqlite.cpp",
      "position": 212,
      "original_position": 231,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "in_reply_to_id": 491362245,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It will be closed when the `SQLiteDatabase` is destructed.",
      "created_at": "2020-09-22T00:27:30Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492417585",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492417585"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 212,
      "original_line": 212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492418121",
      "pull_request_review_id": 493065456,
      "id": 492418121,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQxODEyMQ==",
      "diff_hunk": "@@ -170,7 +170,16 @@ void SQLiteDatabase::Open(const char* mode)\n \n bool SQLiteDatabase::Rewrite(const char* skip)\n {\n-    return false;\n+    while (true) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "ceac790fb2be0bcd5a1e20b275612c3b75df7786",
      "in_reply_to_id": 491662874,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's fine",
      "created_at": "2020-09-22T00:29:49Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492418121",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492418121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492428340",
      "pull_request_review_id": 493076274,
      "id": 492428340,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyODM0MA==",
      "diff_hunk": "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 126,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "in_reply_to_id": 491354812,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added `fullfsync` enabling. `checkpoint_fullsync` is not needed as we don't use WAL mode.",
      "created_at": "2020-09-22T01:13:56Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492428340",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492428340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492428354",
      "pull_request_review_id": 493076299,
      "id": 492428354,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyODM1NA==",
      "diff_hunk": "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);\n+    }\n+    sqlite3_finalize(stmt);\n+    sqlite3_close(db);\n+    return error.original.empty();\n+}\n+\n+void SQLiteDatabase::Open(const char* mode)\n+{\n+    if (!PrepareDirectory()) {\n+        throw std::runtime_error(\"Cannot obtain a lock on wallet directory\");\n+    }\n+\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            bool table_exists;\n+            // Check that the main table exists\n+            sqlite3_stmt* check_main_stmt;\n+            std::string check_main = \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\";\n+            ret = sqlite3_prepare_v2(db, check_main.c_str(), -1, &check_main_stmt, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to prepare statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            ret = sqlite3_step(check_main_stmt);\n+            if (sqlite3_finalize(check_main_stmt) != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to finalize statement checking table existence: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            if (ret == SQLITE_DONE) {\n+                table_exists = false;\n+            } else if (ret == SQLITE_ROW) {\n+                table_exists = true;\n+            } else {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to execute statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+\n+            if (!table_exists) {\n+                // Make the table for our key-value pairs\n+                std::string create_stmt = \"CREATE TABLE main(key BLOB PRIMARY KEY, value BLOB)\";\n+                ret = sqlite3_exec(db, create_stmt.c_str(), nullptr, nullptr, nullptr);\n+                if (ret != SQLITE_OK) {\n+                    throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+                }\n+            }\n+\n+            // Set the application id\n+            uint32_t app_id = ReadBE32(Params().MessageStart());\n+            std::string set_app_id = strprintf(\"PRAGMA application_id = %d\", (int32_t)app_id);\n+            ret = sqlite3_exec(db, set_app_id.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to set the application id: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+\n+            // Set the user version\n+            std::string set_user_ver = strprintf(\"PRAGMA user_version = %d\", WALLET_SCHEMA_VERSION);\n+            ret = sqlite3_exec(db, set_user_ver.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to set the wallet schema version: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+\n+        m_db = db;\n+    }\n+    SetupSQLStatements();\n+}\n+\n+bool SQLiteDatabase::Rewrite(const char* skip)\n+{\n+    while (true) {\n+        if (m_refcount == 0) {\n+            break;\n+        }\n+        UninterruptibleSleep(std::chrono::milliseconds{100});\n+    }\n+\n+    // Rewrite the database using the VACUUM command: https://sqlite.org/lang_vacuum.html\n+    int ret = sqlite3_exec(m_db, \"VACUUM\", nullptr, nullptr, nullptr);\n+    return ret == SQLITE_OK;\n+}\n+\n+bool SQLiteDatabase::PeriodicFlush()\n+{\n+    return true;\n+}\n+\n+bool SQLiteDatabase::Backup(const std::string& dest) const\n+{\n+    sqlite3* db_copy;\n+    int res = sqlite3_open(dest.c_str(), &db_copy);\n+    if (res != SQLITE_OK) {\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    sqlite3_backup* backup = sqlite3_backup_init(db_copy, \"main\", m_db, \"main\");\n+    if (!backup) {\n+        sqlite3_backup_finish(backup);\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    // Copy all of the pages using -1\n+    res = sqlite3_backup_step(backup, -1);\n+    if (res != SQLITE_DONE) {\n+        sqlite3_backup_finish(backup);\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    res = sqlite3_backup_finish(backup);\n+    sqlite3_close(db_copy);\n+    return res == SQLITE_OK;\n+}\n+\n+void SQLiteDatabase::Close()\n+{\n+    if (!m_db) return;\n+\n+    assert(m_refcount == 0);\n+\n+    // Free all of the prepared statements\n+    sqlite3_finalize(m_read_stmt);\n+    sqlite3_finalize(m_insert_stmt);\n+    sqlite3_finalize(m_overwrite_stmt);\n+    sqlite3_finalize(m_delete_stmt);\n+    sqlite3_finalize(m_cursor_stmt);\n+\n+    int res = sqlite3_close(m_db);\n+    if (res != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to close database: %s\\n\", sqlite3_errstr(res)));\n+    }\n+    m_db = nullptr;\n+\n+    UnlockDirectory(m_dir_path, \".walletlock\");\n+}\n+\n+void SQLiteDatabase::Flush() {}\n+\n+void SQLiteDatabase::ReloadDbEnv() {}\n+\n+void SQLiteDatabase::RemoveRef()\n+{\n+    m_refcount--;\n+}\n+\n+void SQLiteDatabase::AddRef()\n+{\n+    m_refcount++;\n+}\n+\n+std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(const char* mode, bool flush_on_close)\n+{\n+    // We ignore flush_on_close because we don't do manual flushing for SQLite\n+    return MakeUnique<SQLiteBatch>(*this, mode);\n+}\n+\n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n+    : m_database(database)\n+{\n+    m_read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+    m_database.AddRef();\n+    m_database.Open(mode);\n+}\n+\n+void SQLiteBatch::Flush() {}\n+\n+void SQLiteBatch::Close()\n+{\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        TxnAbort();\n+    }\n+    m_database.RemoveRef();\n+}\n+\n+bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_database.m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_database.m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_database.m_read_stmt);\n+        sqlite3_reset(m_database.m_read_stmt);\n+        return false;\n+    }\n+    res = sqlite3_step(m_database.m_read_stmt);\n+    if (res != SQLITE_ROW) {\n+        sqlite3_clear_bindings(m_database.m_read_stmt);\n+        sqlite3_reset(m_database.m_read_stmt);\n+        return false;\n+    }\n+    // Leftmost column in result is index 0\n+    const char* data = (const char*)sqlite3_column_blob(m_database.m_read_stmt, 0);\n+    int data_size = sqlite3_column_bytes(m_database.m_read_stmt, 0);\n+    value.write(data, data_size);\n+\n+    sqlite3_clear_bindings(m_database.m_read_stmt);\n+    sqlite3_reset(m_database.m_read_stmt);\n+    return true;\n+}\n+\n+bool SQLiteBatch::WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite)\n+{\n+    if (!m_database.m_db) return false;\n+    if (m_read_only) assert(!\"Write called on database in read-only mode\");\n+    assert(m_database.m_insert_stmt && m_database.m_overwrite_stmt);\n+\n+    sqlite3_stmt* stmt;\n+    if (overwrite) {\n+        stmt = m_database.m_overwrite_stmt;\n+    } else {\n+        stmt = m_database.m_insert_stmt;\n+    }\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    // Insert index 1 is key, 2 is value\n+    int res = sqlite3_bind_blob(stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n+        return false;\n+    }\n+    res = sqlite3_bind_blob(stmt, 2, value.data(), value.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n+        return false;\n+    }\n+\n+    // Execute\n+    res = sqlite3_step(stmt);\n+    sqlite3_clear_bindings(stmt);\n+    sqlite3_reset(stmt);\n+    return res == SQLITE_DONE;\n+}\n+\n+bool SQLiteBatch::EraseKey(CDataStream&& key)\n+{\n+    if (!m_database.m_db) return false;\n+    if (m_read_only) assert(!\"Erase called on database in read-only mode\");\n+    assert(m_database.m_delete_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_database.m_delete_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_database.m_delete_stmt);\n+        sqlite3_reset(m_database.m_delete_stmt);\n+        return false;\n+    }\n+\n+    // Execute\n+    res = sqlite3_step(m_database.m_delete_stmt);\n+    sqlite3_clear_bindings(m_database.m_delete_stmt);\n+    sqlite3_reset(m_database.m_delete_stmt);\n+    return res == SQLITE_DONE;\n+}\n+\n+bool SQLiteBatch::HasKey(CDataStream&& key)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_database.m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    bool ret = false;\n+    int res = sqlite3_bind_blob(m_database.m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res == SQLITE_OK) {\n+        res = sqlite3_step(m_database.m_read_stmt);\n+        if (res == SQLITE_ROW) {\n+            ret = true;\n+        }\n+    }\n+\n+    sqlite3_clear_bindings(m_database.m_read_stmt);\n+    sqlite3_reset(m_database.m_read_stmt);\n+    return ret;\n+}\n+\n+bool SQLiteBatch::StartCursor()\n+{\n+    assert(!m_cursor_init);\n+    if (!m_database.m_db) return false;\n+    m_cursor_init = true;\n+    return true;\n+}\n+\n+bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& complete)\n+{\n+    complete = false;",
      "path": "src/wallet/sqlite.cpp",
      "position": 509,
      "original_position": 505,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "in_reply_to_id": 491651973,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-09-22T01:14:02Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492428354",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492428354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 509,
      "original_line": 509,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492428410",
      "pull_request_review_id": 493076352,
      "id": 492428410,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyODQxMA==",
      "diff_hunk": "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);\n+    }\n+    sqlite3_finalize(stmt);\n+    sqlite3_close(db);\n+    return error.original.empty();\n+}\n+\n+void SQLiteDatabase::Open(const char* mode)\n+{\n+    if (!PrepareDirectory()) {\n+        throw std::runtime_error(\"Cannot obtain a lock on wallet directory\");\n+    }\n+\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {",
      "path": "src/wallet/sqlite.cpp",
      "position": 208,
      "original_position": 227,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "in_reply_to_id": 491360876,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-09-22T01:14:14Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492428410",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492428410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 208,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492632145",
      "pull_request_review_id": 493324893,
      "id": 492632145,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYzMjE0NQ==",
      "diff_hunk": "@@ -134,7 +134,10 @@ qrencode_packages_$(NO_QR) = $(qrencode_packages)\n \n qt_packages_$(NO_QT) = $(qt_packages) $(qt_$(host_os)_packages) $(qt_$(host_arch)_$(host_os)_packages) $(qrencode_packages_)\n \n-wallet_packages_$(NO_WALLET) = $(wallet_packages)\n+bdb_packages_$(NO_BDB) = $(bdb_packages)\n+sqlite_packages_$(NO_SQLITE) = $(sqlite_packages)",
      "path": "depends/Makefile",
      "position": 6,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "5ece9f577a6e6463b15b0d88f35a7f18808936f2",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`NO_SQLITE` and `NO_BDB` (hooray!) needs a mention in depends/README",
      "created_at": "2020-09-22T10:33:08Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492632145",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492632145"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 138,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492663400",
      "pull_request_review_id": 493367050,
      "id": 492663400,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY2MzQwMA==",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+    bool m_cursor_init = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+    ~SQLiteBatch() override { Close(); }\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+    bool PrepareDirectory() const;\n+\n+    void SetupSQLStatements();\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    bool Verify(bilingual_str& error);\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override;\n+    /** Indicate that database user has stopped using the database. Decrement m_refcount */\n+    void RemoveRef() override;\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* skip=nullptr) override;\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& dest) const override;\n+\n+    /** Make sure all changes are flushed to disk.\n+     */\n+    void Flush() override;\n+    /* flush the wallet passively (TRY_LOCK)\n+       ideal to be called periodically */\n+    bool PeriodicFlush() override;\n+\n+    void IncrementUpdateCounter() override { ++nUpdateCounter; }\n+\n+    void ReloadDbEnv() override;\n+\n+    std::string Filename() override { return m_file_path; };\n+\n+    /** Make a SQLiteBatch connected to this database */\n+    std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n+\n+    sqlite3* m_db{nullptr};\n+\n+    sqlite3_stmt* m_read_stmt = nullptr;",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 106,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "in_reply_to_id": 491332879,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> For the most part, yes. Sometimes we do need to handle concurrency withing SQLiteDatabase but those should already be handled by m_refcount and sqlite itself.\r\n\r\nCould you please elaborate on this part? It looks like there are indeed places when we access `WalletDatabase` instance from another thread without acquiring lock first. For example `CWallet::chainStateFlushed`. From my understanding of sqlite it's safe to use by multiple threads, but they should be using different connections. Which is not the case in this example. And I'm not sure how `m_refcount` will help with that.\r\n\r\nI guess in BDB this was handled by `cs_db` within `BerkeleyDatabase::Open`",
      "created_at": "2020-09-22T11:35:09Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492663400",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492663400"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492671660",
      "pull_request_review_id": 493378039,
      "id": 492671660,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY3MTY2MA==",
      "diff_hunk": "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);\n+    }\n+    sqlite3_finalize(stmt);\n+    sqlite3_close(db);\n+    return error.original.empty();\n+}\n+\n+void SQLiteDatabase::Open(const char* mode)\n+{\n+    if (!PrepareDirectory()) {\n+        throw std::runtime_error(\"Cannot obtain a lock on wallet directory\");\n+    }\n+\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {",
      "path": "src/wallet/sqlite.cpp",
      "position": 208,
      "original_position": 227,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "in_reply_to_id": 491360876,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Actually, I couldn't find a single place when we create read-only batch at all. Maybe I'm missing something. Do you know what was the original purpose to add read-only mode?",
      "created_at": "2020-09-22T11:51:14Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492671660",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492671660"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 208,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492889600",
      "pull_request_review_id": 493663647,
      "id": 492889600,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg4OTYwMA==",
      "diff_hunk": "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);\n+    }\n+    sqlite3_finalize(stmt);\n+    sqlite3_close(db);\n+    return error.original.empty();\n+}\n+\n+void SQLiteDatabase::Open(const char* mode)\n+{\n+    if (!PrepareDirectory()) {\n+        throw std::runtime_error(\"Cannot obtain a lock on wallet directory\");\n+    }\n+\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {",
      "path": "src/wallet/sqlite.cpp",
      "position": 208,
      "original_position": 227,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "in_reply_to_id": 491360876,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's pretty much just a leftover from BDB. The single place a readonly batch is used is in `BerkeleyDatabase::Rewrite`. Maybe we should just remove the readonly stuff, but that could be done in a followup.",
      "created_at": "2020-09-22T16:53:14Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492889600",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492889600"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 208,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492892531",
      "pull_request_review_id": 493667274,
      "id": 492892531,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5MjUzMQ==",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+    bool m_cursor_init = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+    ~SQLiteBatch() override { Close(); }\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+    bool PrepareDirectory() const;\n+\n+    void SetupSQLStatements();\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    bool Verify(bilingual_str& error);\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override;\n+    /** Indicate that database user has stopped using the database. Decrement m_refcount */\n+    void RemoveRef() override;\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* skip=nullptr) override;\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& dest) const override;\n+\n+    /** Make sure all changes are flushed to disk.\n+     */\n+    void Flush() override;\n+    /* flush the wallet passively (TRY_LOCK)\n+       ideal to be called periodically */\n+    bool PeriodicFlush() override;\n+\n+    void IncrementUpdateCounter() override { ++nUpdateCounter; }\n+\n+    void ReloadDbEnv() override;\n+\n+    std::string Filename() override { return m_file_path; };\n+\n+    /** Make a SQLiteBatch connected to this database */\n+    std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n+\n+    sqlite3* m_db{nullptr};\n+\n+    sqlite3_stmt* m_read_stmt = nullptr;",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 106,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "in_reply_to_id": 491332879,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "According to https://sqlite.org/threadsafe.html, the default multithreading mode is serialized which means that a single database connection can be used from multiple threads safely. So no locking is needed with that.\r\n\r\nI suppose we should enforce that when opening by setting `SQLITE_OPEN_FULLMUTEX`?",
      "created_at": "2020-09-22T16:57:47Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492892531",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492892531"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493400426",
      "pull_request_review_id": 494498634,
      "id": 493400426,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQwMDQyNg==",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+    bool m_cursor_init = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+    ~SQLiteBatch() override { Close(); }\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+    bool PrepareDirectory() const;\n+\n+    void SetupSQLStatements();\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    bool Verify(bilingual_str& error);\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override;\n+    /** Indicate that database user has stopped using the database. Decrement m_refcount */\n+    void RemoveRef() override;\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* skip=nullptr) override;\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& dest) const override;\n+\n+    /** Make sure all changes are flushed to disk.\n+     */\n+    void Flush() override;\n+    /* flush the wallet passively (TRY_LOCK)\n+       ideal to be called periodically */\n+    bool PeriodicFlush() override;\n+\n+    void IncrementUpdateCounter() override { ++nUpdateCounter; }\n+\n+    void ReloadDbEnv() override;\n+\n+    std::string Filename() override { return m_file_path; };\n+\n+    /** Make a SQLiteBatch connected to this database */\n+    std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n+\n+    sqlite3* m_db{nullptr};\n+\n+    sqlite3_stmt* m_read_stmt = nullptr;",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 106,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "in_reply_to_id": 491332879,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for clarification.\r\n\r\n> I suppose we should enforce that when opening by setting `SQLITE_OPEN_FULLMUTEX`?\r\n\r\nI think that's a great idea. I would say that [SQLITE_CONFIG_SERIALIZED](https://sqlite.org/c3ref/c_config_covering_index_scan.html#sqliteconfigserialized) is even better. It explicitly say that it's safe to use both connection and **prepared statement** objects.\r\n",
      "created_at": "2020-09-23T10:03:20Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r493400426",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493400426"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493721352",
      "pull_request_review_id": 494830394,
      "id": 493721352,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyMTM1Mg==",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+    bool m_cursor_init = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+    ~SQLiteBatch() override { Close(); }\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+    bool PrepareDirectory() const;\n+\n+    void SetupSQLStatements();\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    bool Verify(bilingual_str& error);\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override;\n+    /** Indicate that database user has stopped using the database. Decrement m_refcount */\n+    void RemoveRef() override;\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* skip=nullptr) override;\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& dest) const override;\n+\n+    /** Make sure all changes are flushed to disk.\n+     */\n+    void Flush() override;\n+    /* flush the wallet passively (TRY_LOCK)\n+       ideal to be called periodically */\n+    bool PeriodicFlush() override;\n+\n+    void IncrementUpdateCounter() override { ++nUpdateCounter; }\n+\n+    void ReloadDbEnv() override;\n+\n+    std::string Filename() override { return m_file_path; };\n+\n+    /** Make a SQLiteBatch connected to this database */\n+    std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n+\n+    sqlite3* m_db{nullptr};\n+\n+    sqlite3_stmt* m_read_stmt = nullptr;",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 106,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "in_reply_to_id": 491332879,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "DOne",
      "created_at": "2020-09-23T16:17:04Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r493721352",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493721352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495585293",
      "pull_request_review_id": 497090123,
      "id": 495585293,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU4NTI5Mw==",
      "diff_hunk": "@@ -15,7 +15,7 @@ export BDB_PREFIX=\"${BASE_ROOT_DIR}/db4\"\n \n export CONTAINER_NAME=\"ci_native_msan\"\n export PACKAGES=\"clang-9 llvm-9 cmake\"\n-export DEP_OPTS=\"NO_WALLET=1 NO_QT=1 CC='clang' CXX='clang++' CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' boost_cxxflags='-std=c++11 -fvisibility=hidden -fPIC ${MSAN_AND_LIBCXX_FLAGS}' zeromq_cxxflags='-std=c++11 ${MSAN_AND_LIBCXX_FLAGS}'\"\n+export DEP_OPTS=\"NO_BDB=1 NO_QT=1 CC='clang' CXX='clang++' CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' boost_cxxflags='-std=c++11 -fvisibility=hidden -fPIC ${MSAN_AND_LIBCXX_FLAGS}' zeromq_cxxflags='-std=c++11 ${MSAN_AND_LIBCXX_FLAGS}'\"",
      "path": "ci/test/00_setup_env_native_msan.sh",
      "position": 5,
      "original_position": 5,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "5ece9f577a6e6463b15b0d88f35a7f18808936f2",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "5ece9f577a6e6463b15b0d88f35a7f18808936f2\r\n\r\nWhy not keep it as `NO_WALLET`?",
      "created_at": "2020-09-27T15:40:32Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495585293",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495585293"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 18,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495589636",
      "pull_request_review_id": 497090123,
      "id": 495589636,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU4OTYzNg==",
      "diff_hunk": "@@ -15,16 +15,42 @@\n \n static const char* DATABASE_FILENAME = \"wallet.dat\";\n \n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "8c7832a45f9acb088a87689573c2be47870b5c8a",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "8c7832a45f9acb088a87689573c2be47870b5c8a\r\n\r\nIt feels strange to me that the log callback makes everything blow up in a special case. I think we use asserts for developer errors but I don't think that's the case here. Also doesn't this mean that the `throw std::runtime_error` on L36 will never be used? ",
      "created_at": "2020-09-27T16:25:30Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495589636",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495589636"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495591171",
      "pull_request_review_id": 497090123,
      "id": 495591171,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5MTE3MQ==",
      "diff_hunk": "@@ -53,8 +53,74 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "cf3a2373b0aa7a20ff15367730161ac18f3f302b",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "cf3a2373b0aa7a20ff15367730161ac18f3f302b\r\n\r\nnit\r\n```suggestion\r\n    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\r\n    const bool create = strchr(mode, 'c') != nullptr;\r\n    int flags;\r\n\r\n```",
      "created_at": "2020-09-27T16:41:32Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495591171",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495591171"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": 58,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495602648",
      "pull_request_review_id": 497090123,
      "id": 495602648,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYwMjY0OA==",
      "diff_hunk": "@@ -259,22 +259,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_database.m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_database.m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_database.m_read_stmt);\n+        sqlite3_reset(m_database.m_read_stmt);\n+        return false;\n+    }\n+    res = sqlite3_step(m_database.m_read_stmt);\n+    if (res != SQLITE_ROW) {\n+        sqlite3_clear_bindings(m_database.m_read_stmt);\n+        sqlite3_reset(m_database.m_read_stmt);\n+        return false;\n+    }\n+    // Leftmost column in result is index 0\n+    const char* data = (const char*)sqlite3_column_blob(m_database.m_read_stmt, 0);\n+    int data_size = sqlite3_column_bytes(m_database.m_read_stmt, 0);\n+    value.write(data, data_size);\n+\n+    sqlite3_clear_bindings(m_database.m_read_stmt);\n+    sqlite3_reset(m_database.m_read_stmt);\n+    return true;\n }\n \n bool SQLiteBatch::WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    if (m_read_only) assert(!\"Write called on database in read-only mode\");",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "e4d88e26a5da6f119b6a0124fb18ee9909e486a4",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "e4d88e26a5da6f119b6a0124fb18ee9909e486a4\r\n\r\nMaybe use a runtime_error here instead of an assert? Same in `EraseKey`.",
      "created_at": "2020-09-27T18:47:36Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495602648",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495602648"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 291,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495611715",
      "pull_request_review_id": 497108156,
      "id": 495611715,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxMTcxNQ==",
      "diff_hunk": "@@ -97,6 +99,12 @@ class SQLiteDatabase : public WalletDatabase\n     std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n \n     sqlite3* m_db{nullptr};\n+\n+    sqlite3_stmt* m_read_stmt = nullptr;",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 14,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "01b3cb026806784ae20eb670bd9aa40c43a94e54",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "01b3cb026806784ae20eb670bd9aa40c43a94e54\r\n\r\nnit, use initializer `{nullptr}`?",
      "created_at": "2020-09-27T20:21:44Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495611715",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495611715"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495612384",
      "pull_request_review_id": 497090123,
      "id": 495612384,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxMjM4NA==",
      "diff_hunk": "@@ -1029,6 +1038,18 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n         return nullptr;\n     }\n \n+    if (format && options.require_format && *format != options.require_format) {\n+        error = Untranslated(strprintf(\"Failed to load database path '%s'. Data is not in required format.\", path.string()));\n+        status = DatabaseStatus::FAILED_BAD_FORMAT;\n+        return nullptr;\n+    }\n+\n+    if (!format && options.require_format) format = options.require_format;",
      "path": "src/wallet/walletdb.cpp",
      "position": 35,
      "original_position": 33,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "94d5ee30677b2282e87f79a6f945bceff41faaad",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "94d5ee30677b2282e87f79a6f945bceff41faaad\r\n\r\nThis is the case when neither DB exists and a new one is created, right? Would be worth a comment here I think.",
      "created_at": "2020-09-27T20:27:46Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495612384",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495612384"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1049,
      "original_line": 1049,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495613541",
      "pull_request_review_id": 497090123,
      "id": 495613541,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxMzU0MQ==",
      "diff_hunk": "@@ -243,11 +243,13 @@ std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string&\n     return wallet;\n }\n \n-std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     uint64_t wallet_creation_flags = options.create_flags;\n     const SecureString& passphrase = options.create_passphrase;\n \n+    if (wallet_creation_flags & WALLET_FLAG_DESCRIPTORS) options.require_format = DatabaseFormat::SQLITE;",
      "path": "src/wallet/wallet.cpp",
      "position": 10,
      "original_position": 10,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "81d9ce910f61aed16c7298150775b973102db498",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "81d9ce910f61aed16c7298150775b973102db498\r\n\r\nMaybe check and error if a different format was passed?",
      "created_at": "2020-09-27T20:38:22Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495613541",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495613541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 251,
      "original_line": 251,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495653143",
      "pull_request_review_id": 497145104,
      "id": 495653143,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1MzE0Mw==",
      "diff_hunk": "@@ -15,7 +15,7 @@ export BDB_PREFIX=\"${BASE_ROOT_DIR}/db4\"\n \n export CONTAINER_NAME=\"ci_native_msan\"\n export PACKAGES=\"clang-9 llvm-9 cmake\"\n-export DEP_OPTS=\"NO_WALLET=1 NO_QT=1 CC='clang' CXX='clang++' CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' boost_cxxflags='-std=c++11 -fvisibility=hidden -fPIC ${MSAN_AND_LIBCXX_FLAGS}' zeromq_cxxflags='-std=c++11 ${MSAN_AND_LIBCXX_FLAGS}'\"\n+export DEP_OPTS=\"NO_BDB=1 NO_QT=1 CC='clang' CXX='clang++' CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' boost_cxxflags='-std=c++11 -fvisibility=hidden -fPIC ${MSAN_AND_LIBCXX_FLAGS}' zeromq_cxxflags='-std=c++11 ${MSAN_AND_LIBCXX_FLAGS}'\"",
      "path": "ci/test/00_setup_env_native_msan.sh",
      "position": 5,
      "original_position": 5,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "5ece9f577a6e6463b15b0d88f35a7f18808936f2",
      "in_reply_to_id": 495585293,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`NO_WALLET` means both no BDB and no SQLite",
      "created_at": "2020-09-28T01:54:36Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495653143",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495653143"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 18,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495654073",
      "pull_request_review_id": 497146093,
      "id": 495654073,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1NDA3Mw==",
      "diff_hunk": "@@ -15,16 +15,42 @@\n \n static const char* DATABASE_FILENAME = \"wallet.dat\";\n \n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "8c7832a45f9acb088a87689573c2be47870b5c8a",
      "in_reply_to_id": 495589636,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> It feels strange to me that the log callback makes everything blow up in a special case. I think we use asserts for developer errors but I don't think that's the case here.\r\n\r\nThis would only be hit in a developer error or a sqlite bug.\r\n\r\n> Also doesn't this mean that the `throw std::runtime_error` on L36 will never be used?\r\n\r\nI don't think so?",
      "created_at": "2020-09-28T01:59:12Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495654073",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495654073"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496121953",
      "pull_request_review_id": 497754498,
      "id": 496121953,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEyMTk1Mw==",
      "diff_hunk": "@@ -15,7 +15,7 @@ export BDB_PREFIX=\"${BASE_ROOT_DIR}/db4\"\n \n export CONTAINER_NAME=\"ci_native_msan\"\n export PACKAGES=\"clang-9 llvm-9 cmake\"\n-export DEP_OPTS=\"NO_WALLET=1 NO_QT=1 CC='clang' CXX='clang++' CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' boost_cxxflags='-std=c++11 -fvisibility=hidden -fPIC ${MSAN_AND_LIBCXX_FLAGS}' zeromq_cxxflags='-std=c++11 ${MSAN_AND_LIBCXX_FLAGS}'\"\n+export DEP_OPTS=\"NO_BDB=1 NO_QT=1 CC='clang' CXX='clang++' CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' boost_cxxflags='-std=c++11 -fvisibility=hidden -fPIC ${MSAN_AND_LIBCXX_FLAGS}' zeromq_cxxflags='-std=c++11 ${MSAN_AND_LIBCXX_FLAGS}'\"",
      "path": "ci/test/00_setup_env_native_msan.sh",
      "position": 5,
      "original_position": 5,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "5ece9f577a6e6463b15b0d88f35a7f18808936f2",
      "in_reply_to_id": 495585293,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "My question was unclear: I meant to ask why are we adding SQLite to this environment while we are excluding BDB here?",
      "created_at": "2020-09-28T17:36:50Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r496121953",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496121953"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 18,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496121996",
      "pull_request_review_id": 497754542,
      "id": 496121996,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEyMTk5Ng==",
      "diff_hunk": "@@ -15,16 +15,42 @@\n \n static const char* DATABASE_FILENAME = \"wallet.dat\";\n \n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "8c7832a45f9acb088a87689573c2be47870b5c8a",
      "in_reply_to_id": 495589636,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hm, the docs aren't very clear on this (or I can't find the right place) so I can not say yet if there are cases where `ret == SQLITE_OK` but the log callback is still being called. That would be the only case when this seems valuable because otherwise the `runtime_error` would be hit in case there is a problem and the error message would be clearer I think? Yes, this could be a bug in SQLite but in general, we are trusting that the ret/res codes are not lying so I don't know why we would do it differently here.\r\n\r\nOn the flip side, the `runtime_error` will currently only be hit if `ret != SQLITE_OK` but the `ErrorLogCallback` is not being called. Again, I couldn't find details/guarantees on this in the docs but at least they say the callback will be used ['whenever anomalies occur'](https://www.sqlite.org/errlog.html), so my expectation is that it would always be called as whenever `ret != SQLITE_OK` is true. So I think the `runtime_error` may never be hit unless there is a bug in SQLite.\r\n\r\nOverall it just feels strange to do anything but logging in a function that is called `*LogCallback`.",
      "created_at": "2020-09-28T17:36:54Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r496121996",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496121996"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496132342",
      "pull_request_review_id": 497767319,
      "id": 496132342,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEzMjM0Mg==",
      "diff_hunk": "@@ -15,7 +15,7 @@ export BDB_PREFIX=\"${BASE_ROOT_DIR}/db4\"\n \n export CONTAINER_NAME=\"ci_native_msan\"\n export PACKAGES=\"clang-9 llvm-9 cmake\"\n-export DEP_OPTS=\"NO_WALLET=1 NO_QT=1 CC='clang' CXX='clang++' CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' boost_cxxflags='-std=c++11 -fvisibility=hidden -fPIC ${MSAN_AND_LIBCXX_FLAGS}' zeromq_cxxflags='-std=c++11 ${MSAN_AND_LIBCXX_FLAGS}'\"\n+export DEP_OPTS=\"NO_BDB=1 NO_QT=1 CC='clang' CXX='clang++' CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' boost_cxxflags='-std=c++11 -fvisibility=hidden -fPIC ${MSAN_AND_LIBCXX_FLAGS}' zeromq_cxxflags='-std=c++11 ${MSAN_AND_LIBCXX_FLAGS}'\"",
      "path": "ci/test/00_setup_env_native_msan.sh",
      "position": 5,
      "original_position": 5,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "5ece9f577a6e6463b15b0d88f35a7f18808936f2",
      "in_reply_to_id": 495585293,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This test environment is a little weird.\r\n\r\nThe wallet is actually enabled and BDB is being used. However the BDB being used needs to be built with some special flags, so it can't be built via depends. What this option does is disable BDB in depends so that BDB can be built separately with whatever it needs to work in this env. Because SQLite doesn't need this special building, it can be built by depends. So we don't want `NO_WALLET` because we actually still want the wallet here. We just want `NO_BDB` so we can deal with it later.",
      "created_at": "2020-09-28T17:54:57Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r496132342",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496132342"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 18,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496134921",
      "pull_request_review_id": 497770582,
      "id": 496134921,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEzNDkyMQ==",
      "diff_hunk": "@@ -15,16 +15,42 @@\n \n static const char* DATABASE_FILENAME = \"wallet.dat\";\n \n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "8c7832a45f9acb088a87689573c2be47870b5c8a",
      "in_reply_to_id": 495589636,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think if `ret != SQLITE_OK` both `ErrorLogCallback` and `runtime_error` get called. The `ErrorLogCallback` doesn't change `ret` to `SQLITE_OK` and it doesn't throw it's own exception. The assertion should never fail so that won't cause a program exit either.",
      "created_at": "2020-09-28T17:59:21Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r496134921",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496134921"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497629841",
      "pull_request_review_id": 499591972,
      "id": 497629841,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYyOTg0MQ==",
      "diff_hunk": "@@ -243,11 +243,13 @@ std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string&\n     return wallet;\n }\n \n-std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     uint64_t wallet_creation_flags = options.create_flags;\n     const SecureString& passphrase = options.create_passphrase;\n \n+    if (wallet_creation_flags & WALLET_FLAG_DESCRIPTORS) options.require_format = DatabaseFormat::SQLITE;",
      "path": "src/wallet/wallet.cpp",
      "position": 10,
      "original_position": 10,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "81d9ce910f61aed16c7298150775b973102db498",
      "in_reply_to_id": 495613541,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think that is necessary.",
      "created_at": "2020-09-30T16:07:04Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497629841",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497629841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 251,
      "original_line": 251,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497641658",
      "pull_request_review_id": 499607409,
      "id": 497641658,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY0MTY1OA==",
      "diff_hunk": "@@ -97,6 +99,12 @@ class SQLiteDatabase : public WalletDatabase\n     std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n \n     sqlite3* m_db{nullptr};\n+\n+    sqlite3_stmt* m_read_stmt = nullptr;",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 14,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "01b3cb026806784ae20eb670bd9aa40c43a94e54",
      "in_reply_to_id": 495611715,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-09-30T16:24:48Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497641658",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497641658"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497641719",
      "pull_request_review_id": 499607503,
      "id": 497641719,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY0MTcxOQ==",
      "diff_hunk": "@@ -53,8 +53,74 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "cf3a2373b0aa7a20ff15367730161ac18f3f302b",
      "in_reply_to_id": 495591171,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-09-30T16:24:53Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497641719",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497641719"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": 58,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497641745",
      "pull_request_review_id": 499607533,
      "id": 497641745,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY0MTc0NQ==",
      "diff_hunk": "@@ -259,22 +259,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_database.m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_database.m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_database.m_read_stmt);\n+        sqlite3_reset(m_database.m_read_stmt);\n+        return false;\n+    }\n+    res = sqlite3_step(m_database.m_read_stmt);\n+    if (res != SQLITE_ROW) {\n+        sqlite3_clear_bindings(m_database.m_read_stmt);\n+        sqlite3_reset(m_database.m_read_stmt);\n+        return false;\n+    }\n+    // Leftmost column in result is index 0\n+    const char* data = (const char*)sqlite3_column_blob(m_database.m_read_stmt, 0);\n+    int data_size = sqlite3_column_bytes(m_database.m_read_stmt, 0);\n+    value.write(data, data_size);\n+\n+    sqlite3_clear_bindings(m_database.m_read_stmt);\n+    sqlite3_reset(m_database.m_read_stmt);\n+    return true;\n }\n \n bool SQLiteBatch::WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    if (m_read_only) assert(!\"Write called on database in read-only mode\");",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "e4d88e26a5da6f119b6a0124fb18ee9909e486a4",
      "in_reply_to_id": 495602648,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-09-30T16:24:56Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497641745",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497641745"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 291,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497641790",
      "pull_request_review_id": 499607593,
      "id": 497641790,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY0MTc5MA==",
      "diff_hunk": "@@ -1029,6 +1038,18 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n         return nullptr;\n     }\n \n+    if (format && options.require_format && *format != options.require_format) {\n+        error = Untranslated(strprintf(\"Failed to load database path '%s'. Data is not in required format.\", path.string()));\n+        status = DatabaseStatus::FAILED_BAD_FORMAT;\n+        return nullptr;\n+    }\n+\n+    if (!format && options.require_format) format = options.require_format;",
      "path": "src/wallet/walletdb.cpp",
      "position": 35,
      "original_position": 33,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "94d5ee30677b2282e87f79a6f945bceff41faaad",
      "in_reply_to_id": 495612384,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-09-30T16:24:59Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497641790",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497641790"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1049,
      "original_line": 1049,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497825930",
      "pull_request_review_id": 499843408,
      "id": 497825930,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgyNTkzMA==",
      "diff_hunk": "@@ -1138,6 +1138,9 @@ fi\n if test x$enable_wallet != xno; then\n     dnl Check for libdb_cxx only if wallet enabled\n     BITCOIN_FIND_BDB48\n+\n+    dnl Check for sqlite3\n+    AC_CHECK_HEADERS([sqlite3.h], [AC_CHECK_LIB([sqlite3], [sqlite3_open], [SQLITE_LIBS=-lsqlite3], [AC_MSG_ERROR(sqlite3_open missing from libsqlite3)], [-pthread -lpthread])], [AC_MSG_ERROR(sqlite3.h headers missing)])",
      "path": "configure.ac",
      "position": null,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "31243f5482bb1c8a71affbe7ced6653a09bd6829",
      "in_reply_to_id": 460275191,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460275191\r\n\r\nIn commit \"Add libsqlite3\" (10124c3d6c5176d5df94964e530a4b0c6edd8381)\r\n\r\nMinor: Maybe someone more familiar with the build can weigh in, but it seems like it could be desirable to allow building bitcoin without sqlite even if sqlite is installed on the system. Also, I think other dependency checks have been switched to use pkg-config (#18307) instead ad-hoc methods like this.",
      "created_at": "2020-09-30T22:01:21Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497825930",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497825930"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497826540",
      "pull_request_review_id": 499843408,
      "id": 497826540,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgyNjU0MA==",
      "diff_hunk": "@@ -14,6 +14,7 @@\n       \"name\": \"libevent\",\n       \"features\": [\"thread\"]\n     },\n-    \"zeromq\"\n+    \"zeromq\",\n+    \"sqlite3\"",
      "path": "build_msvc/vcpkg.json",
      "position": null,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "443d029fb859262c56b8be32205a2b4540dbb843",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add sqlite to travis and depends\" (443d029fb859262c56b8be32205a2b4540dbb843)\r\n\r\nMinor: Would be nice to preserve alphabetical order and avoid need to change unrelated lines",
      "created_at": "2020-09-30T22:02:51Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497826540",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497826540"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497827306",
      "pull_request_review_id": 499843408,
      "id": 497827306,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgyNzMwNg==",
      "diff_hunk": "@@ -10,7 +10,8 @@ qt_android_packages=qt\n qt_darwin_packages=qt\n qt_mingw32_packages=qt\n \n-wallet_packages=bdb\n+bdb_packages=bdb\n+sqlite_packages = sqlite",
      "path": "depends/packages/packages.mk",
      "position": null,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "443d029fb859262c56b8be32205a2b4540dbb843",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add sqlite to travis and depends\" (443d029fb859262c56b8be32205a2b4540dbb843)\r\n\r\nMinor: Spacing on this line is inconsistent with the rest of the file",
      "created_at": "2020-09-30T22:04:47Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497827306",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497827306"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497829773",
      "pull_request_review_id": 499843408,
      "id": 497829773,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgyOTc3Mw==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "f35f89f1ae53914f6183ec3d7da6a1d0c27bed16",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add SQLiteDatabase and SQLiteBatch dummy classes\" (f35f89f1ae53914f6183ec3d7da6a1d0c27bed16)\r\n\r\nSee main comment for reasoning, but this is awkward to change later so I think the commit introducing this should start with the appropriate final value (hopefully \"wallet.sqlite\" or similar)",
      "created_at": "2020-09-30T22:11:05Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497829773",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497829773"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497833472",
      "pull_request_review_id": 499843408,
      "id": 497833472,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzMzQ3Mg==",
      "diff_hunk": "@@ -15,16 +15,42 @@\n \n static const char* DATABASE_FILENAME = \"wallet.dat\";\n \n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n     WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n {\n     LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n     LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "13cca0d881acc81dbf4a6496bb02d4fefc905a77",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Initialize and Shutdown sqlite3 globals\" (13cca0d881acc81dbf4a6496bb02d4fefc905a77)\r\n\r\nThere's still a race condition here if two databases are opened at the same time. sqlite3_config will only be called once for both databases, but only one of the databases will actually block waiting for the call to complete, so the other database open will most likely fail. Similar races can happen on close.\r\n\r\nInstead of trying to be clever and lock-free, it would be better to be dumb and mutex-full.\r\n\r\n```c++\r\nstatic Mutex g_sqlite_mutex;\r\nstatic int g_sqlite_count GUARDED_BY(g_sqlite_mutex) = 0;\r\n```\r\n\r\n```c++\r\nLOCK(g_sqlite_mutex);\r\nif (++g_sqlite_count == 1) {\r\n   sqlite_config...\r\n}\r\n```\r\n\r\n```c++\r\nLOCK(g_sqlite_mutex);\r\nif (--g_sqlite_count == 0) {\r\n   sqlite_shutdown...\r\n}\r\n```",
      "created_at": "2020-09-30T22:21:02Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497833472",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497833472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498140301",
      "pull_request_review_id": 500208905,
      "id": 498140301,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE0MDMwMQ==",
      "diff_hunk": "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);\n+    }\n+    sqlite3_finalize(stmt);\n+    sqlite3_close(db);\n+    return error.original.empty();\n+}\n+\n+void SQLiteDatabase::Open(const char* mode)\n+{\n+    if (!PrepareDirectory()) {\n+        throw std::runtime_error(\"Cannot obtain a lock on wallet directory\");\n+    }\n+\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {",
      "path": "src/wallet/sqlite.cpp",
      "position": 208,
      "original_position": 227,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "in_reply_to_id": 491360876,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@achow101 I'd like to follow up on this if you don't have plans to do it yourself",
      "created_at": "2020-10-01T10:24:24Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498140301",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498140301"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 208,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498362766",
      "pull_request_review_id": 500508229,
      "id": 498362766,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2Mjc2Ng==",
      "diff_hunk": "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);\n+    }\n+    sqlite3_finalize(stmt);\n+    sqlite3_close(db);\n+    return error.original.empty();\n+}\n+\n+void SQLiteDatabase::Open(const char* mode)\n+{\n+    if (!PrepareDirectory()) {\n+        throw std::runtime_error(\"Cannot obtain a lock on wallet directory\");\n+    }\n+\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {",
      "path": "src/wallet/sqlite.cpp",
      "position": 208,
      "original_position": 227,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "in_reply_to_id": 491360876,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@S3RK Go ahead",
      "created_at": "2020-10-01T16:12:01Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498362766",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498362766"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 208,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498421232",
      "pull_request_review_id": 499843408,
      "id": 498421232,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyMTIzMg==",
      "diff_hunk": "@@ -15,16 +15,42 @@\n \n static const char* DATABASE_FILENAME = \"wallet.dat\";\n \n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "8c7832a45f9acb088a87689573c2be47870b5c8a",
      "in_reply_to_id": 495589636,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r496134921\r\n\r\nAgree with achow that this is an appropriate place to assert. We're passing along a context value, and asserting we are passed back the same value. We're not checking for a runtime error, just documenting an assumption about how the code should is supposed to work, and adding a sanity check to detect if the assumption is wrong.",
      "created_at": "2020-10-01T17:56:18Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498421232",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498421232"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498435139",
      "pull_request_review_id": 499843408,
      "id": 498435139,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzNTEzOQ==",
      "diff_hunk": "@@ -53,8 +53,74 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "ecc06767e1a91b11179ffb5b70808b69a9c6b552",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteDatabase::Open\" (ecc06767e1a91b11179ffb5b70808b69a9c6b552)\r\n\r\nNote for future improvement: We should probaby stop this non-standard use of flags. \"w\" or \"a\" normally creates a new file not \"c\". https://www.gnu.org/software/libc/manual/html_node/Opening-Streams.html. It might also be better to switch away from modes strings to `readonly` / `require_new` / `require_existing` boolean options.",
      "created_at": "2020-10-01T18:22:58Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498435139",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498435139"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 233,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498437365",
      "pull_request_review_id": 499843408,
      "id": 498437365,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzNzM2NQ==",
      "diff_hunk": "@@ -53,8 +53,74 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            bool table_exists;\n+            // Check that the main table exists\n+            sqlite3_stmt* check_main_stmt;\n+            std::string check_main = \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\";",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "ecc06767e1a91b11179ffb5b70808b69a9c6b552",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteDatabase::Open\" (ecc06767e1a91b11179ffb5b70808b69a9c6b552)\r\n\r\nCould avoid the need for this preamble using CREATE TABLE IF NOT EXISTS syntax: https://www.sqlite.org/draft/lang_createtable.html",
      "created_at": "2020-10-01T18:27:09Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498437365",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498437365"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498440461",
      "pull_request_review_id": 499843408,
      "id": 498440461,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MDQ2MQ==",
      "diff_hunk": "@@ -53,8 +53,74 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            bool table_exists;\n+            // Check that the main table exists\n+            sqlite3_stmt* check_main_stmt;\n+            std::string check_main = \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\";\n+            ret = sqlite3_prepare_v2(db, check_main.c_str(), -1, &check_main_stmt, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to prepare statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            ret = sqlite3_step(check_main_stmt);\n+            if (sqlite3_finalize(check_main_stmt) != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to finalize statement checking table existence: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            if (ret == SQLITE_DONE) {\n+                table_exists = false;\n+            } else if (ret == SQLITE_ROW) {\n+                table_exists = true;\n+            } else {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to execute statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+\n+            if (!table_exists) {\n+                // Make the table for our key-value pairs\n+                std::string create_stmt = \"CREATE TABLE main(key BLOB PRIMARY KEY, value BLOB)\";\n+                ret = sqlite3_exec(db, create_stmt.c_str(), nullptr, nullptr, nullptr);\n+                if (ret != SQLITE_OK) {\n+                    throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+                }\n+            }\n+\n+            // Enable fullfysnc for the platforms that use it\n+            std::string fullfsync_stmt = \"PRAGMA fullfsync = true\";\n+            ret = sqlite3_exec(db, fullfsync_stmt.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to enable fullfsync: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+\n+        m_db = db;\n+    } else if (!read_only && sqlite3_db_readonly(m_db, \"main\") != 0) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "ecc06767e1a91b11179ffb5b70808b69a9c6b552",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteDatabase::Open\" (ecc06767e1a91b11179ffb5b70808b69a9c6b552)\r\n\r\nI think you need to do this check even in the (m_db == nullptr) case above in case the file or filesystem is read-only. According to https://www.oreilly.com/library/view/using-sqlite/9781449394592/re303.html SQLITE_OPEN_READWRITE will \"Attempt to open the file read/write. If this is not possible, open the file read-only. Opening the file read-only will not result in an error.\"",
      "created_at": "2020-10-01T18:32:40Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498440461",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498440461"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498455603",
      "pull_request_review_id": 499843408,
      "id": 498455603,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1NTYwMw==",
      "diff_hunk": "@@ -42,6 +43,18 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     }\n }\n \n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "af798a8fd9b3b1a1e0a63a665f6d89c73e8614a3",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"sqlitedb: Create and lock the wallet directory\" (af798a8fd9b3b1a1e0a63a665f6d89c73e8614a3)\r\n\r\nThis doesn't seem like the most ideal approach. We were forced to use .walletlock in #11904 because the old version of BDB we use doesn't support set_lk_exclusive. But with sqlite it would seem simpler and safer to use its exclusive locking functionality: https://www.sqlite.org/pragma.html#pragma_locking_mode instead of rolling our own which is probably [less portable and reliable](https://github.com/bitcoin/bitcoin/issues/19167#issuecomment-698594254), requires code duplication, and is nonstandard not working with other sqlite database tools.",
      "created_at": "2020-10-01T19:02:41Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498455603",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498455603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498484152",
      "pull_request_review_id": 500677137,
      "id": 498484152,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ4NDE1Mg==",
      "diff_hunk": "@@ -53,8 +53,74 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "ecc06767e1a91b11179ffb5b70808b69a9c6b552",
      "in_reply_to_id": 498435139,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree that flags would probably be better. Also, I think there's an argument for dropping `read_only` considering it is only used by BerkeleyDatagbase::Rewrite.",
      "created_at": "2020-10-01T20:03:13Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498484152",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498484152"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 233,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498486168",
      "pull_request_review_id": 500680065,
      "id": 498486168,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ4NjE2OA==",
      "diff_hunk": "@@ -42,6 +43,18 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     }\n }\n \n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "af798a8fd9b3b1a1e0a63a665f6d89c73e8614a3",
      "in_reply_to_id": 498455603,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since only an EXCLUSIVE lock is acquired after the first write, I'm not sure that the locking pragma provides strong enough guarantees for us. Another bitcoind could conceivably open the same wallet while only the SHARED lock is held.",
      "created_at": "2020-10-01T20:07:37Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498486168",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498486168"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498530916",
      "pull_request_review_id": 500742887,
      "id": 498530916,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMDkxNg==",
      "diff_hunk": "@@ -14,6 +14,7 @@\n       \"name\": \"libevent\",\n       \"features\": [\"thread\"]\n     },\n-    \"zeromq\"\n+    \"zeromq\",\n+    \"sqlite3\"",
      "path": "build_msvc/vcpkg.json",
      "position": null,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "443d029fb859262c56b8be32205a2b4540dbb843",
      "in_reply_to_id": 497826540,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-01T21:50:36Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498530916",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498530916"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498530950",
      "pull_request_review_id": 500742937,
      "id": 498530950,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMDk1MA==",
      "diff_hunk": "@@ -10,7 +10,8 @@ qt_android_packages=qt\n qt_darwin_packages=qt\n qt_mingw32_packages=qt\n \n-wallet_packages=bdb\n+bdb_packages=bdb\n+sqlite_packages = sqlite",
      "path": "depends/packages/packages.mk",
      "position": null,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "443d029fb859262c56b8be32205a2b4540dbb843",
      "in_reply_to_id": 497827306,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-01T21:50:42Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498530950",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498530950"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498531001",
      "pull_request_review_id": 500743009,
      "id": 498531001,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMTAwMQ==",
      "diff_hunk": "@@ -15,16 +15,42 @@\n \n static const char* DATABASE_FILENAME = \"wallet.dat\";\n \n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n     WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n {\n     LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n     LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "13cca0d881acc81dbf4a6496bb02d4fefc905a77",
      "in_reply_to_id": 497833472,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-01T21:50:51Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498531001",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498531001"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498531025",
      "pull_request_review_id": 500743045,
      "id": 498531025,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMTAyNQ==",
      "diff_hunk": "@@ -53,8 +53,74 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            bool table_exists;\n+            // Check that the main table exists\n+            sqlite3_stmt* check_main_stmt;\n+            std::string check_main = \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\";",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "ecc06767e1a91b11179ffb5b70808b69a9c6b552",
      "in_reply_to_id": 498437365,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-01T21:50:57Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498531025",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498531025"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498531047",
      "pull_request_review_id": 500743069,
      "id": 498531047,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMTA0Nw==",
      "diff_hunk": "@@ -53,8 +53,74 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            bool table_exists;\n+            // Check that the main table exists\n+            sqlite3_stmt* check_main_stmt;\n+            std::string check_main = \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\";\n+            ret = sqlite3_prepare_v2(db, check_main.c_str(), -1, &check_main_stmt, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to prepare statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            ret = sqlite3_step(check_main_stmt);\n+            if (sqlite3_finalize(check_main_stmt) != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to finalize statement checking table existence: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            if (ret == SQLITE_DONE) {\n+                table_exists = false;\n+            } else if (ret == SQLITE_ROW) {\n+                table_exists = true;\n+            } else {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to execute statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+\n+            if (!table_exists) {\n+                // Make the table for our key-value pairs\n+                std::string create_stmt = \"CREATE TABLE main(key BLOB PRIMARY KEY, value BLOB)\";\n+                ret = sqlite3_exec(db, create_stmt.c_str(), nullptr, nullptr, nullptr);\n+                if (ret != SQLITE_OK) {\n+                    throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+                }\n+            }\n+\n+            // Enable fullfysnc for the platforms that use it\n+            std::string fullfsync_stmt = \"PRAGMA fullfsync = true\";\n+            ret = sqlite3_exec(db, fullfsync_stmt.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to enable fullfsync: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+\n+        m_db = db;\n+    } else if (!read_only && sqlite3_db_readonly(m_db, \"main\") != 0) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "ecc06767e1a91b11179ffb5b70808b69a9c6b552",
      "in_reply_to_id": 498440461,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-01T21:51:01Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498531047",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498531047"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498571179",
      "pull_request_review_id": 500797085,
      "id": 498571179,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU3MTE3OQ==",
      "diff_hunk": "@@ -1138,6 +1138,9 @@ fi\n if test x$enable_wallet != xno; then\n     dnl Check for libdb_cxx only if wallet enabled\n     BITCOIN_FIND_BDB48\n+\n+    dnl Check for sqlite3\n+    AC_CHECK_HEADERS([sqlite3.h], [AC_CHECK_LIB([sqlite3], [sqlite3_open], [SQLITE_LIBS=-lsqlite3], [AC_MSG_ERROR(sqlite3_open missing from libsqlite3)], [-pthread -lpthread])], [AC_MSG_ERROR(sqlite3.h headers missing)])",
      "path": "configure.ac",
      "position": null,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "31243f5482bb1c8a71affbe7ced6653a09bd6829",
      "in_reply_to_id": 460275191,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I attempted to make it so that BDB or sqlite could be disabled, but I wasn't able to get it to work. I'll leave that for a followup for someone more familiar with autotools.",
      "created_at": "2020-10-02T00:19:17Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498571179",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498571179"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498750983",
      "pull_request_review_id": 493324893,
      "id": 498750983,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc1MDk4Mw==",
      "diff_hunk": "@@ -0,0 +1,26 @@\n+package=sqlite\n+$(package)_version=3320100",
      "path": "depends/packages/sqlite.mk",
      "position": 2,
      "original_position": 2,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "61b650b6f7cf3f2163e1d1fc2db3cd51870b128b",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe we can bump from 3.32.1 to 3.33.0 in a followup, but before the release.",
      "created_at": "2020-10-02T10:50:54Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498750983",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498750983"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2,
      "original_line": 2,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499125987",
      "pull_request_review_id": 501528624,
      "id": 499125987,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyNTk4Nw==",
      "diff_hunk": "@@ -53,8 +53,74 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "ecc06767e1a91b11179ffb5b70808b69a9c6b552",
      "in_reply_to_id": 498435139,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I did [an implementation](https://github.com/achow101/bitcoin/compare/sqlite-wallet...S3RK:wallet_db_remove_read_only?expand=1) based on this PR to move from modes string to bool flags; and removed read-only mode as well. I'll open a PR once this one will be merged.",
      "created_at": "2020-10-03T07:49:24Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499125987",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499125987"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 233,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499506296",
      "pull_request_review_id": 493324893,
      "id": 499506296,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwNjI5Ng==",
      "diff_hunk": "@@ -67,6 +71,14 @@ std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(const char* mode, bool\n     return nullptr;\n }\n \n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n+    : m_database(database)\n+{\n+    m_read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "a09ce35e302f1da3b13e16b4837a6e4a1b3de6bb",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "a09ce35e302f1da3b13e16b4837a6e4a1b3de6bb: using an enum to handle modes would seem more readable, especially because these mode strings are a BDB artefact. See also https://github.com/bitcoin/bitcoin/pull/19077/commits/0344ccea4dcc0692e736dd759fc3945272a3266c#r498435139",
      "created_at": "2020-10-05T10:44:42Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499506296",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499506296"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 407,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499518957",
      "pull_request_review_id": 493324893,
      "id": 499518957,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxODk1Nw==",
      "diff_hunk": "@@ -15,16 +15,42 @@\n \n static const char* DATABASE_FILENAME = \"wallet.dat\";\n \n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "8c7832a45f9acb088a87689573c2be47870b5c8a",
      "in_reply_to_id": 495589636,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps citing from the [sqlite3 manual](https://www.sqlite.org/c3ref/c_config_covering_index_scan.html) in the comment is more clear:\r\n\r\n```\r\n// From sqlite3_config() documentation for the SQLITE_CONFIG_LOG option: \r\n// \"The void pointer that is the second argument to SQLITE_CONFIG_LOG is passed through as\r\n// the first parameter to the application-defined logger function whenever that function is \r\n// invoked.\"\r\n// Assert that this is the case:\r\n```",
      "created_at": "2020-10-05T11:10:03Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499518957",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499518957"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499532896",
      "pull_request_review_id": 493324893,
      "id": 499532896,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUzMjg5Ng==",
      "diff_hunk": "@@ -57,8 +57,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB)\";",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "0344ccea4dcc0692e736dd759fc3945272a3266c",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0344ccea4dcc0692e736dd759fc3945272a3266c  let's drop `IF NOT EXISTS`. If `create` is only set for new database then no table should exist. Alternatively, if `create` is meant as \"create if needed\", then it's seems safer to explicitly check if the table doesn't exist yet. In that case the error  \"Failed to create new database\" is incorrect.",
      "created_at": "2020-10-05T11:36:33Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499532896",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499532896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499536692",
      "pull_request_review_id": 493324893,
      "id": 499536692,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUzNjY5Mg==",
      "diff_hunk": "@@ -57,8 +57,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB)\";\n+            ret = sqlite3_exec(db, create_stmt.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+\n+            // Enable fullfysnc for the platforms that use it",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "0344ccea4dcc0692e736dd759fc3945272a3266c",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0344cce: is `PRAGMA fullfsync` ephemeral? [Documentation](https://www.sqlite.org/pragma.html#pragma_checkpoint_fullfsync) isn't very clear about that. If so, it shouldn't be under `create`. On macOS 10.15.7 with sqlite 3.28.0 when I call `PRAGMA fullfsync;` it returns `0`.\r\n\r\n_Update_: it's fine, `create` is confusingly named, but this is code is run every time you load a wallet",
      "created_at": "2020-10-05T11:44:00Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499536692",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499536692"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 266,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499550279",
      "pull_request_review_id": 493324893,
      "id": 499550279,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU1MDI3OQ==",
      "diff_hunk": "@@ -57,8 +57,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB)\";\n+            ret = sqlite3_exec(db, create_stmt.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+\n+            // Enable fullfysnc for the platforms that use it\n+            std::string fullfsync_stmt = \"PRAGMA fullfsync = true\";\n+            ret = sqlite3_exec(db, fullfsync_stmt.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to enable fullfsync: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+\n+        m_db = db;\n+    }\n+    if (!read_only && sqlite3_db_readonly(m_db, \"main\") != 0) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: SQLiteBatch requested read-write permission but database only has readonly\"));",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "0344ccea4dcc0692e736dd759fc3945272a3266c",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0344cce: you may want to add this check early in the `create` block too. E.g. if I make an existing wallet read-only, it will throw a confusing \"Failed to set the application id\" (its first attempt to write).",
      "created_at": "2020-10-05T12:09:45Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499550279",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499550279"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 329,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499643317",
      "pull_request_review_id": 502117808,
      "id": 499643317,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY0MzMxNw==",
      "diff_hunk": "@@ -57,8 +57,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB)\";",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "0344ccea4dcc0692e736dd759fc3945272a3266c",
      "in_reply_to_id": 499532896,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just noticed @ryanofsky's comment: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498437365\r\n\r\nI think it's safer to explicitly check if the table is present. In general it's nice to have a clearly separate code path for stuff we only do on wallet creation (and upgrade).",
      "created_at": "2020-10-05T14:31:41Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499643317",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499643317"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499660884",
      "pull_request_review_id": 501674099,
      "id": 499660884,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY2MDg4NA==",
      "diff_hunk": "@@ -57,8 +57,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB)\";",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "0344ccea4dcc0692e736dd759fc3945272a3266c",
      "in_reply_to_id": 499532896,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499643317\r\n\r\n> Just noticed @ryanofsky's comment: [#19077 (comment)](https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498437365)\r\n> \r\n> I think it's safer to explicitly check if the table is present. In general it's nice to have a clearly separate code path for stuff we only do on wallet creation (and upgrade).\r\n\r\nDropping 'if not exists' and adding an error sounds good (though it might be helpful to say what is unsafe or what dangerous cases you are thinking of). I only suggested using 'if not exists' SQL syntax to avoid reimplementing it in C++.",
      "created_at": "2020-10-05T14:54:50Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499660884",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499660884"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499713449",
      "pull_request_review_id": 502210874,
      "id": 499713449,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMzQ0OQ==",
      "diff_hunk": "@@ -57,8 +57,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB)\";",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "0344ccea4dcc0692e736dd759fc3945272a3266c",
      "in_reply_to_id": 499532896,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ">  Alternatively, if `create` is meant as \"create if needed\", then it's seems safer to explicitly check if the table doesn't exist yet. In that case the error \"Failed to create new database\" is incorrect.\r\n\r\nIt is use as a \"create if needed.\" All wallet DBs are created with the mode \"cr+\". I don't think we should be giving an error if the table doesn't exist in that case either.",
      "created_at": "2020-10-05T16:10:20Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499713449",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499713449"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499714803",
      "pull_request_review_id": 502212678,
      "id": 499714803,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNDgwMw==",
      "diff_hunk": "@@ -57,8 +57,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB)\";\n+            ret = sqlite3_exec(db, create_stmt.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+\n+            // Enable fullfysnc for the platforms that use it",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "0344ccea4dcc0692e736dd759fc3945272a3266c",
      "in_reply_to_id": 499536692,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "AFAICT it is persistent.",
      "created_at": "2020-10-05T16:12:28Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499714803",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499714803"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 266,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499717981",
      "pull_request_review_id": 502216919,
      "id": 499717981,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNzk4MQ==",
      "diff_hunk": "@@ -67,6 +71,14 @@ std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(const char* mode, bool\n     return nullptr;\n }\n \n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n+    : m_database(database)\n+{\n+    m_read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "a09ce35e302f1da3b13e16b4837a6e4a1b3de6bb",
      "in_reply_to_id": 499506296,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, this should be done as a followup.",
      "created_at": "2020-10-05T16:17:20Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499717981",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499717981"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 407,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499723594",
      "pull_request_review_id": 502224182,
      "id": 499723594,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMzU5NA==",
      "diff_hunk": "@@ -0,0 +1,26 @@\n+package=sqlite\n+$(package)_version=3320100",
      "path": "depends/packages/sqlite.mk",
      "position": 2,
      "original_position": 2,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "61b650b6f7cf3f2163e1d1fc2db3cd51870b128b",
      "in_reply_to_id": 498750983,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "sqlite has a fairly aggressive release cycle, so I think we can leave this for later.",
      "created_at": "2020-10-05T16:26:27Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499723594",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499723594"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2,
      "original_line": 2,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499727144",
      "pull_request_review_id": 502228876,
      "id": 499727144,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNzE0NA==",
      "diff_hunk": "@@ -57,8 +57,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB)\";\n+            ret = sqlite3_exec(db, create_stmt.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+\n+            // Enable fullfysnc for the platforms that use it\n+            std::string fullfsync_stmt = \"PRAGMA fullfsync = true\";\n+            ret = sqlite3_exec(db, fullfsync_stmt.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to enable fullfsync: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+\n+        m_db = db;\n+    }\n+    if (!read_only && sqlite3_db_readonly(m_db, \"main\") != 0) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: SQLiteBatch requested read-write permission but database only has readonly\"));",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "0344ccea4dcc0692e736dd759fc3945272a3266c",
      "in_reply_to_id": 499550279,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-05T16:32:33Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499727144",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499727144"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 329,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499727257",
      "pull_request_review_id": 502229019,
      "id": 499727257,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNzI1Nw==",
      "diff_hunk": "@@ -134,7 +134,10 @@ qrencode_packages_$(NO_QR) = $(qrencode_packages)\n \n qt_packages_$(NO_QT) = $(qt_packages) $(qt_$(host_os)_packages) $(qt_$(host_arch)_$(host_os)_packages) $(qrencode_packages_)\n \n-wallet_packages_$(NO_WALLET) = $(wallet_packages)\n+bdb_packages_$(NO_BDB) = $(bdb_packages)\n+sqlite_packages_$(NO_SQLITE) = $(sqlite_packages)",
      "path": "depends/Makefile",
      "position": 6,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "5ece9f577a6e6463b15b0d88f35a7f18808936f2",
      "in_reply_to_id": 492632145,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-05T16:32:45Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499727257",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499727257"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 138,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499727925",
      "pull_request_review_id": 502229883,
      "id": 499727925,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNzkyNQ==",
      "diff_hunk": "@@ -15,16 +15,42 @@\n \n static const char* DATABASE_FILENAME = \"wallet.dat\";\n \n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "8c7832a45f9acb088a87689573c2be47870b5c8a",
      "in_reply_to_id": 495589636,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added this comment.",
      "created_at": "2020-10-05T16:33:57Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499727925",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499727925"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499932369",
      "pull_request_review_id": 502495880,
      "id": 499932369,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkzMjM2OQ==",
      "diff_hunk": "@@ -99,6 +99,10 @@ The following can be set when running make: `make FOO=bar`\n <dd>Don't download/build/cache packages needed for enabling zeromq</dd>\n <dt>NO_WALLET</dt>\n <dd>Don't download/build/cache libs needed to enable the wallet</dd>\n+<dt>NO_BDB</dt>\n+<dd>Don't download/build/cache BerkeleyDB</dd>\n+<dt>NO_SQLITET</dt>",
      "path": "depends/README.md",
      "position": null,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "8bfbad00d4bd94f2b9006e6375ea7dc11adee6fb",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add sqlite to travis and depends\" (8bfbad00d4bd94f2b9006e6375ea7dc11adee6fb)\r\n\r\ns/NO_SQLITET/NO_SQLITE",
      "created_at": "2020-10-05T23:51:31Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499932369",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499932369"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499939951",
      "pull_request_review_id": 502495880,
      "id": 499939951,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkzOTk1MQ==",
      "diff_hunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 65,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "b6eeb2b5ee6964a9034aca6f4be2b72d532589ca",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add SQLiteDatabase and SQLiteBatch dummy classes\" (b6eeb2b5ee6964a9034aca6f4be2b72d532589ca)\r\n\r\nI think the refcounting code in this PR is confusing and should be removed. Rewrite method can just vacuum without sleeping. Close method can unconditionally close m_db it's not null. m_refcount doesn't ever need be referenced, AddRef and RemoveRef don't ever need to be called, and they be implemented in a transparent way to make it clear they are unused holdovers:\r\n\r\n```c++\r\nvoid AddRef() override { assert(0); /* unused */ }\r\nvoid RemoveRef() override { assert(0); /* unused */ }\r\n```\r\n",
      "created_at": "2020-10-06T00:18:23Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499939951",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499939951"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499940422",
      "pull_request_review_id": 502495880,
      "id": 499940422,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0MDQyMg==",
      "diff_hunk": "@@ -67,6 +71,14 @@ std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(const char* mode, bool\n     return nullptr;\n }\n \n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n+    : m_database(database)\n+{\n+    m_read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+    m_database.AddRef();",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "46aa20b62e77b33e62e1e17ac6f6a6eb1a9efdce",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Constructors, destructors, and relevant private fields for SQLiteDatabase/Batch\" (46aa20b62e77b33e62e1e17ac6f6a6eb1a9efdce)\r\n\r\nCan drop reference counting (see dummy classes comment)",
      "created_at": "2020-10-06T00:20:09Z",
      "updated_at": "2020-10-14T15:33:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499940422",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499940422"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499946057",
      "pull_request_review_id": 502495880,
      "id": 499946057,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0NjA1Nw==",
      "diff_hunk": "@@ -176,6 +176,10 @@ void SQLiteBatch::Flush()\n \n void SQLiteBatch::Close()\n {\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        TxnAbort();",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fbf44184de758271e759978cd5037efcb4ba4eb1",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteBatch::Close\" (fbf44184de758271e759978cd5037efcb4ba4eb1)\r\n\r\nThis should log an error if TxnAbort() fails. It might also be useful to log an error if TxnAbort succeeds, since this condition should never happen unless there is unpaired TxnBegin call or an unhandled exception.",
      "created_at": "2020-10-06T00:42:50Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499946057",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499946057"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499946323",
      "pull_request_review_id": 502495880,
      "id": 499946323,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0NjMyMw==",
      "diff_hunk": "@@ -176,6 +176,10 @@ void SQLiteBatch::Flush()\n \n void SQLiteBatch::Close()\n {\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        TxnAbort();\n+    }\n+    m_database.RemoveRef();",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fbf44184de758271e759978cd5037efcb4ba4eb1",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteBatch::Close\" (fbf44184de758271e759978cd5037efcb4ba4eb1)\r\n\r\nCan drop reference counting (see dummy classes comment)",
      "created_at": "2020-10-06T00:44:00Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499946323",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499946323"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499962753",
      "pull_request_review_id": 502495880,
      "id": 499962753,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk2Mjc1Mw==",
      "diff_hunk": "@@ -67,6 +71,14 @@ std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(const char* mode, bool\n     return nullptr;\n }\n \n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n+    : m_database(database)\n+{\n+    m_read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+    m_database.AddRef();\n+    m_database.Open(mode);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "46aa20b62e77b33e62e1e17ac6f6a6eb1a9efdce",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Constructors, destructors, and relevant private fields for SQLiteDatabase/Batch\" (46aa20b62e77b33e62e1e17ac6f6a6eb1a9efdce)\r\n\r\nI don't think it makes sense to open the database in the batch constructor instead of in the database constructor. It makes the batch constructor assymetric (there's no database close in the destructor), forces database to be needlessly opened, closed, and reopened when verification is enabled, delays error checking done on open (making debugging and diagnosis more difficult), and prevents taking full advantages of sqlite's exclusive locking to prevent the database from being opened in different processes.",
      "created_at": "2020-10-06T01:50:36Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499962753",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499962753"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499964465",
      "pull_request_review_id": 502495880,
      "id": 499964465,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk2NDQ2NQ==",
      "diff_hunk": "@@ -57,8 +57,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB)\";",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "0344ccea4dcc0692e736dd759fc3945272a3266c",
      "in_reply_to_id": 499532896,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499713449\r\n\r\n> It is use as a \"create if needed.\" All wallet DBs are created with the mode \"cr+\". I don't think we should be giving an error if the table doesn't exist in that case either.\r\n\r\nIt would require changes outside sqlite.cpp/sqlite.h but it should be possible to throw an error instead of defensively creating tables if the database already already exists and the tables are missing. I think it would be a little safer and probably preferable, but not critical.",
      "created_at": "2020-10-06T01:58:06Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499964465",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499964465"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499968299",
      "pull_request_review_id": 502495880,
      "id": 499968299,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk2ODI5OQ==",
      "diff_hunk": "@@ -62,8 +62,57 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "96d2a5f8b8ea7dd512deaac4d1d70702517af6c1",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteDatabase::Open\" (96d2a5f8b8ea7dd512deaac4d1d70702517af6c1)\r\n\r\nShould drop this comment. Copying a wallet may be a problem if you do it in a crazy way, or it may be perfectly safe. BDB code started checking for copies only as a kludge (initial kludge protected against ambiguity in the bdb log format when multiple databases were opened in the same environment, and later the kludge was extended to work around inability to lock BDB databases with set_lk_exclusive.)",
      "created_at": "2020-10-06T02:14:20Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499968299",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499968299"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499969112",
      "pull_request_review_id": 502495880,
      "id": 499969112,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk2OTExMg==",
      "diff_hunk": "@@ -62,8 +62,57 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            if (sqlite3_db_readonly(db, \"main\") != 0) {\n+                throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+            }\n+\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB)\";",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "96d2a5f8b8ea7dd512deaac4d1d70702517af6c1",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteDatabase::Open\" (96d2a5f8b8ea7dd512deaac4d1d70702517af6c1)\r\n\r\nShould add `NOT NULL` constraint to key and value columns. Code already has to deal with empty string values, so it would be better not to throw in NULL values and errors as well where we don't need them.",
      "created_at": "2020-10-06T02:17:42Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499969112",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499969112"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499970587",
      "pull_request_review_id": 502495880,
      "id": 499970587,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk3MDU4Nw==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+}\n+\n+void SQLiteDatabase::Open(const char* pszMode)",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "b6eeb2b5ee6964a9034aca6f4be2b72d532589ca",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add SQLiteDatabase and SQLiteBatch dummy classes\" (b6eeb2b5ee6964a9034aca6f4be2b72d532589ca)\r\n\r\nparam is renamed to `mode` in later commit, could just call it mode here to avoid rename",
      "created_at": "2020-10-06T02:24:16Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499970587",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499970587"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499973617",
      "pull_request_review_id": 502495880,
      "id": 499973617,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk3MzYxNw==",
      "diff_hunk": "@@ -42,6 +43,18 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     }\n }\n \n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "af798a8fd9b3b1a1e0a63a665f6d89c73e8614a3",
      "in_reply_to_id": 498455603,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"sqlitedb: Create and lock the wallet directory\" (4f3e5569c3c0eb83d50f7f88e9b673fa857fa08a)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498486168\r\n\r\n> Since only an EXCLUSIVE lock is acquired after the first write, I'm not sure that the locking pragma provides strong enough guarantees for us. Another bitcoind could conceivably open the same wallet while only the SHARED lock is held.\r\n\r\nNo bitcoind should open the wallet in shared mode. The simplest approach is for every bitcoind to open the wallet in exclusive mode and fail if exclusive lock cannot be acquired\r\n\r\nI did write another suggestion about opening the database earlier to simplify code and avoid closing, unlocking, and reopening the database after verifying, but this is orthogonal to type of locking used.",
      "created_at": "2020-10-06T02:37:05Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499973617",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499973617"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499976815",
      "pull_request_review_id": 502495880,
      "id": 499976815,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk3NjgxNQ==",
      "diff_hunk": "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteDatabase::Verify\" (fabd187ccb43d0cc266ae89cd2b2e3b3d098949a)\r\n\r\nI don't think you can close the db if opening failed. I think even on cases where we don't act on errors, we should at least log them. It would be best if all the sqlite_* calls in this PR logged errors so we are never blindly debugging or guessing about errors like this. ",
      "created_at": "2020-10-06T02:50:14Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499976815",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499976815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499977375",
      "pull_request_review_id": 502495880,
      "id": 499977375,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk3NzM3NQ==",
      "diff_hunk": "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);",
      "path": "src/wallet/sqlite.cpp",
      "position": 170,
      "original_position": 22,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteDatabase::Verify\" (fabd187ccb43d0cc266ae89cd2b2e3b3d098949a)\r\n\r\nThis looks like a bug. You can't delete a prepared statement that wasn't created, and this might lead to a bad pointer dereference since since stmt pointer is not initialized.",
      "created_at": "2020-10-06T02:52:38Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499977375",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499977375"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 170,
      "original_line": 170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499978292",
      "pull_request_review_id": 502495880,
      "id": 499978292,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk3ODI5Mg==",
      "diff_hunk": "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteDatabase::Verify\" (fabd187ccb43d0cc266ae89cd2b2e3b3d098949a)\r\n\r\nWould be good to disambiguate this error from error immediately above (step failed vs read failed)",
      "created_at": "2020-10-06T02:56:35Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499978292",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499978292"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499978706",
      "pull_request_review_id": 502495880,
      "id": 499978706,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk3ODcwNg==",
      "diff_hunk": "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteDatabase::Verify\" (fabd187ccb43d0cc266ae89cd2b2e3b3d098949a)\r\n\r\nWould be good to prefix sqlite error lines with \"Failed to verify\" text if error string is currently empty here.",
      "created_at": "2020-10-06T02:58:20Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499978706",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499978706"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499981600",
      "pull_request_review_id": 502495880,
      "id": 499981600,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk4MTYwMA==",
      "diff_hunk": "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteDatabase::Verify\" (fabd187ccb43d0cc266ae89cd2b2e3b3d098949a)\r\n\r\nIt is odd to lock the wallet here because it means the wallet will be locked on opening when `options.verify` is true, but not locked until later when `options.verify` is false (later when the first batch is created).\r\n\r\nThe simplest thing approach would seem to just open and lock the database once when the database object is created instead of opening and locking multiple times in different circumstances.",
      "created_at": "2020-10-06T03:10:40Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499981600",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499981600"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499983328",
      "pull_request_review_id": 502495880,
      "id": 499983328,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk4MzMyOA==",
      "diff_hunk": "@@ -176,7 +176,7 @@ bool SQLiteDatabase::Rewrite(const char* skip)\n \n bool SQLiteDatabase::PeriodicFlush()\n {\n-    return false;\n+    return true;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "addc4630a2a6587b0e07b9c45644117542685fed",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteDatabase::Flush, PeriodicFlush, and ReloadDbEnv as No-ops\" (addc4630a2a6587b0e07b9c45644117542685fed)\r\n\r\nAll the comments in the commit description should be comments in the code, so they are not lost in git history and so code makes sense. Would also suggest implementing these methods inline in the header file to avoid giving a misleading impression from reading the class definition that they are implemented to do things.",
      "created_at": "2020-10-06T03:17:50Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499983328",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499983328"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 342,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499984258",
      "pull_request_review_id": 502495880,
      "id": 499984258,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk4NDI1OA==",
      "diff_hunk": "@@ -139,6 +156,8 @@ void SQLiteDatabase::Close()\n         throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to close database: %s\\n\", sqlite3_errstr(res)));\n     }\n     m_db = nullptr;\n+\n+    UnlockDirectory(m_dir_path, \".walletlock\");",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "4f3e5569c3c0eb83d50f7f88e9b673fa857fa08a",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"sqlitedb: Create and lock the wallet directory\" (4f3e5569c3c0eb83d50f7f88e9b673fa857fa08a)\r\n\r\nThis fails to unlock the wallet if it was opened with options.verify = true, but m_db is null because no batch was created. In practice, I'm guessing this never happens, but this is the type of complication which would go away if we used sqlite locking instead of implementing our own locking.",
      "created_at": "2020-10-06T03:21:56Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499984258",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499984258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 379,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499984625",
      "pull_request_review_id": 502495880,
      "id": 499984625,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk4NDYyNQ==",
      "diff_hunk": "@@ -151,6 +151,7 @@ void SQLiteDatabase::Close()\n {\n     if (!m_db) return;\n \n+    assert(m_refcount == 0);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "e63b9504257165780b2c56ec46bc842b8d680dbc",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteDatabase::RemoveRef and AddRef\" (e63b9504257165780b2c56ec46bc842b8d680dbc)\r\n\r\nCan drop reference counting (see dummy classes comment) and this whole commit\r\n",
      "created_at": "2020-10-06T03:23:43Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499984625",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499984625"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499985602",
      "pull_request_review_id": 502495880,
      "id": 499985602,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk4NTYwMg==",
      "diff_hunk": "@@ -152,6 +189,14 @@ void SQLiteDatabase::Close()\n     if (!m_db) return;\n \n     assert(m_refcount == 0);\n+\n+    // Free all of the prepared statements\n+    sqlite3_finalize(m_read_stmt);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fcee39162e5713f581443eb26d36c65c2c0b9cda",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add SetupSQLStatements\" (fcee39162e5713f581443eb26d36c65c2c0b9cda)\r\n\r\nShould log errors if these fail so potential bugs don't go undetected and so we are less likely to have to debug blindly.",
      "created_at": "2020-10-06T03:28:07Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499985602",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499985602"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499989994",
      "pull_request_review_id": 502495880,
      "id": 499989994,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk4OTk5NA==",
      "diff_hunk": "@@ -251,22 +251,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_database.m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_database.m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "21289de5fd85b4510032393902b0dec84704cf77",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteBatch::ReadKey, WriteKey, EraseKey, and HasKey\" (21289de5fd85b4510032393902b0dec84704cf77)\r\n\r\nThis whole commit does not seem thread safe. Wallet RPC calls can come in from multiple threads and validation events come in on their own thread, so I would think multiple batch objects and reads and writes could happen simultaneously. If this is the case bind_blob/step calls to the same statement objects from different threads would all interfere with each other.\r\n\r\nThe simplest approach would seem to just create prepared statements on demand instead of trying to share them between different batches.",
      "created_at": "2020-10-06T03:47:24Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499989994",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499989994"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 258,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499991129",
      "pull_request_review_id": 502495880,
      "id": 499991129,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk5MTEyOQ==",
      "diff_hunk": "@@ -414,17 +414,23 @@ void SQLiteBatch::CloseCursor()\n \n bool SQLiteBatch::TxnBegin()\n {\n-    return false;\n+    if (!m_database.m_db || sqlite3_get_autocommit(m_database.m_db) == 0) return false;\n+    int res = sqlite3_exec(m_database.m_db, \"BEGIN TRANSACTION\", nullptr, nullptr, nullptr);",
      "path": "src/wallet/sqlite.cpp",
      "position": 542,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "d448c6c362642f24b08b754cb09066ced847f867",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteDatabase::TxnBegin, TxnCommit, and TxnAbort\" (d448c6c362642f24b08b754cb09066ced847f867)\r\n\r\nIt would seem best to log errors if these calls fail. TxnBegin, TxnCommit, TxnAbort should never return false unless there's a bug in our code or a runtime error and in either case having more debug information would be useful",
      "created_at": "2020-10-06T03:52:42Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499991129",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499991129"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 542,
      "original_line": 542,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499992082",
      "pull_request_review_id": 502495880,
      "id": 499992082,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk5MjA4Mg==",
      "diff_hunk": "@@ -170,7 +170,16 @@ void SQLiteDatabase::Open(const char* mode)\n \n bool SQLiteDatabase::Rewrite(const char* skip)\n {\n-    return false;\n+    while (true) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "ceac790fb2be0bcd5a1e20b275612c3b75df7786",
      "in_reply_to_id": 491662874,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492418121\r\n\r\nIn commit \"Implement SQLiteDatabase::Rewrite\" (0d75b4013400b5a6bfa1f5c75082a8ff0701bd84)\r\n\r\n> I think it's fine\r\n\r\nThis whole loop doesn't seem like a good idea. If it actually serves a purpose, there should be a comment about it with specifics. Otherwise I think Rewrite should directly vacuum, and this sleepy loop thing just looks like voodoo.",
      "created_at": "2020-10-06T03:57:16Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499992082",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499992082"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500018582",
      "pull_request_review_id": 502599027,
      "id": 500018582,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAxODU4Mg==",
      "diff_hunk": "@@ -251,22 +251,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_database.m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_database.m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "21289de5fd85b4510032393902b0dec84704cf77",
      "in_reply_to_id": 499989994,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we've discussed it already here https://github.com/bitcoin/bitcoin/pull/19077#discussion_r493400426",
      "created_at": "2020-10-06T05:45:38Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500018582",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500018582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 258,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500021272",
      "pull_request_review_id": 502602437,
      "id": 500021272,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyMTI3Mg==",
      "diff_hunk": "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "in_reply_to_id": 499976815,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "From the [docs](https://www.sqlite.org/c3ref/open.html)\r\n> Whether or not an error occurs when it is opened, resources associated with the database connection handle should be released by passing it to sqlite3_close() when it is no longer required.\r\n\r\nLogging is handled by [global error log](https://www.sqlite.org/errlog.html)\r\n",
      "created_at": "2020-10-06T05:54:31Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500021272",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500021272"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500021625",
      "pull_request_review_id": 502602882,
      "id": 500021625,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyMTYyNQ==",
      "diff_hunk": "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);",
      "path": "src/wallet/sqlite.cpp",
      "position": 170,
      "original_position": 22,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "in_reply_to_id": 499977375,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not sure if we SHOULD finalize failed prepared statement, but it's a no-op to finalize a NULL pointer.",
      "created_at": "2020-10-06T05:55:38Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500021625",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500021625"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 170,
      "original_line": 170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500021921",
      "pull_request_review_id": 502603239,
      "id": 500021921,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyMTkyMQ==",
      "diff_hunk": "@@ -152,6 +189,14 @@ void SQLiteDatabase::Close()\n     if (!m_db) return;\n \n     assert(m_refcount == 0);\n+\n+    // Free all of the prepared statements\n+    sqlite3_finalize(m_read_stmt);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fcee39162e5713f581443eb26d36c65c2c0b9cda",
      "in_reply_to_id": 499985602,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Logging is handled by [global error log](https://www.sqlite.org/errlog.html)",
      "created_at": "2020-10-06T05:56:29Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500021921",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500021921"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500029597",
      "pull_request_review_id": 502612841,
      "id": 500029597,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyOTU5Nw==",
      "diff_hunk": "@@ -251,22 +251,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_database.m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_database.m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "21289de5fd85b4510032393902b0dec84704cf77",
      "in_reply_to_id": 499989994,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500018582\r\n\r\n> I think we've discussed it already here [#19077 (comment)](https://github.com/bitcoin/bitcoin/pull/19077#discussion_r493400426)\r\n\r\nYou can use the same prepared statement from different threads but you can't use the same statement for different purposes with different values at the same time from different threads. The only thing that might prevent bugs in practice is the fact that most of the database is copied into memory and not actually accessed through database lookups, and the fact that the cs_wallet mutex makes most wallet operations single threaded in practice. But these things only make the code accidentally correct instead of correct by design. The sqlite implementation shouldn't have object sharing and reference counting code that makes it more complicated than it needs to be, and less safe than the bdb implementation (or any sane key/value API). You shouldn't get undefined results, for example, simply reading two keys from two different threads.",
      "created_at": "2020-10-06T06:19:08Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500029597",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500029597"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 258,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500033853",
      "pull_request_review_id": 502618282,
      "id": 500033853,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAzMzg1Mw==",
      "diff_hunk": "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "in_reply_to_id": 499976815,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500021272\r\n\r\n> Logging is handled by [global error log](https://www.sqlite.org/errlog.html)\r\n\r\nThanks for explaining sqlite3_close. How do you know whether or not something is logged to the error log? Does every function call that doesn't return SQLITE_OK log to the error log? If so, then I guess there's no technical reason to handle errors twice even if code looks like it is silently discarding them. I would prefer the uniform approach of handling all errors, but this would give more of excuse not to.",
      "created_at": "2020-10-06T06:30:26Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500033853",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500033853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500035085",
      "pull_request_review_id": 502619773,
      "id": 500035085,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAzNTA4NQ==",
      "diff_hunk": "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);",
      "path": "src/wallet/sqlite.cpp",
      "position": 170,
      "original_position": 22,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "in_reply_to_id": 499977375,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500021625\r\n\r\n> I'm not sure if we SHOULD finalize failed prepared statement, but it's a no-op to finalize a NULL pointer.\r\n\r\nThe pointer looks uninitialized, not null. Even if this actually works, I wouldn't code that looks so fragile and broken.",
      "created_at": "2020-10-06T06:33:22Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500035085",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500035085"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 170,
      "original_line": 170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500146185",
      "pull_request_review_id": 502766389,
      "id": 500146185,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE0NjE4NQ==",
      "diff_hunk": "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "in_reply_to_id": 499976815,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Does every function call that doesn't return SQLITE_OK log to the error log?\r\n\r\nThis is my current understanding of how it works based on my tests and the following line from documentation. \r\n\r\n> SQLite can be configured to invoke a callback function containing an error code and a terse error message whenever anomalies occur.\r\n\r\nI can check particular scenarios if you'd like.",
      "created_at": "2020-10-06T09:47:30Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500146185",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500146185"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500152129",
      "pull_request_review_id": 502774373,
      "id": 500152129,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE1MjEyOQ==",
      "diff_hunk": "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);",
      "path": "src/wallet/sqlite.cpp",
      "position": 170,
      "original_position": 22,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "in_reply_to_id": 499977375,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As an out parameter It's set to NULL in case of an error. This is documented and to me the code in question looks like an intended use of sqlite api. The sqlite3_finalize routine can be called at any point during the life cycle. I'm not sure whether it's possible for an error to happen when statement is initialized. But it looks reasonable and safer to finalize whenever we encounter an error at any step of the life cycle.",
      "created_at": "2020-10-06T09:57:32Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500152129",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500152129"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 170,
      "original_line": 170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500167882",
      "pull_request_review_id": 502795635,
      "id": 500167882,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2Nzg4Mg==",
      "diff_hunk": "@@ -251,22 +251,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_database.m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_database.m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "21289de5fd85b4510032393902b0dec84704cf77",
      "in_reply_to_id": 499989994,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Now I think you're correct. Looks like the locking in sqlite will guarantee safety for a single call, but we ourselves still have to take care for the sequence of the calls.\r\n\r\n> You can use the same prepared statement from different threads but you can't use the same statement for different purposes with different values at the same time from different threads.\r\n\r\nThis is what I failed to articulate before and was to quick to agree it's safe.",
      "created_at": "2020-10-06T10:26:00Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500167882",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500167882"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 258,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500208899",
      "pull_request_review_id": 502850624,
      "id": 500208899,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwODg5OQ==",
      "diff_hunk": "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);",
      "path": "src/wallet/sqlite.cpp",
      "position": 170,
      "original_position": 22,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "in_reply_to_id": 499977375,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500152129\r\n\r\n> As an out parameter It's set to NULL in case of an error. This is documented and to me the code in question looks like an intended use of sqlite api.\r\n\r\nSorry, where is this documented? Even assuming it is documented, would you expect anybody else reading the code to know this? Or will the next person maintaining or debugging this waste development time checking it, instead of just being able to look and see that the code won't dereference an uninitialized pointer. If I were writing this, I would initialize the pointer to null. Fixing this is just a suggestion. It is fine to ignore the suggestion.",
      "created_at": "2020-10-06T11:43:54Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500208899",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500208899"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 170,
      "original_line": 170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500214610",
      "pull_request_review_id": 502850624,
      "id": 500214610,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIxNDYxMA==",
      "diff_hunk": "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "in_reply_to_id": 499976815,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500146185\r\n\r\n> This is my current understanding of how it works based on my tests and the following line from documentation.\r\n\r\nThis looks like a misreading to me. The documentation could easily say every failing call is logged, but it doesn't, and even goes out of it's way to say it \"strives to keep error logger traffic low.\" But even all errors were guaranteed to be logged, would you expect someone else reading the code to know it? Or will the next person maintaining or debugging this code waste development time checking unchecked return values, instead of just being able to look at the code and see that every call is succeeding. That is why if I were writing this code, I would check for unexpected return values everywhere and print them. Fixing this is just a suggestion. It is fine to ignore the suggestion.",
      "created_at": "2020-10-06T11:54:26Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500214610",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500214610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500261927",
      "pull_request_review_id": 502926188,
      "id": 500261927,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI2MTkyNw==",
      "diff_hunk": "@@ -53,8 +53,74 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "ecc06767e1a91b11179ffb5b70808b69a9c6b552",
      "in_reply_to_id": 498435139,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499125987\r\n\r\n> I did [an implementation](https://github.com/achow101/bitcoin/compare/sqlite-wallet...S3RK:wallet_db_remove_read_only?expand=1) based on this PR to move from modes string to bool flags; and removed read-only mode as well. I'll open a PR once this one will be merged.\r\n\r\nSince these changes would only simplify this PR, and the more complicated parts don't involve sqlite, I think you could open a separate PR based on master just omitting the sqlite parts. Also, the change can go further and drop the batch create option, just using the DatabaseOptions::require_existing option instead (storing it if needed).",
      "created_at": "2020-10-06T13:09:47Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500261927",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500261927"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 233,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500285658",
      "pull_request_review_id": 502972738,
      "id": 500285658,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI4NTY1OA==",
      "diff_hunk": "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);",
      "path": "src/wallet/sqlite.cpp",
      "position": 170,
      "original_position": 22,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "in_reply_to_id": 499977375,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just not to sound unfounded — here is the link https://www.sqlite.org/c3ref/prepare.html\r\nMaybe I misunderstood your point, I didn't mean to say that I'm against initializing it to null, it's a good idea. It was more to the fact that I believe calling finalize is fine in the case of an error.",
      "created_at": "2020-10-06T13:39:37Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500285658",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500285658"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 170,
      "original_line": 170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500304585",
      "pull_request_review_id": 502994125,
      "id": 500304585,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMwNDU4NQ==",
      "diff_hunk": "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "in_reply_to_id": 499976815,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Indeed I assumed (maybe falsely) that the next maintainer is familiar with SQLite C api. My humble personal preference is not to complicate the code by duplicating the error messages, when the library can do it for us. I just tried to provide more context for the author and the reviewers, sorry if it wasn't helpful. ",
      "created_at": "2020-10-06T13:59:10Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500304585",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500304585"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500317531",
      "pull_request_review_id": 502926188,
      "id": 500317531,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxNzUzMQ==",
      "diff_hunk": "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "in_reply_to_id": 499976815,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500304585\r\n\r\n> Indeed I assumed (maybe falsely) that the next maintainer is familiar with SQLite C api. My humble personal preference is not to complicate the code by duplicating the error messages, when the library can do it for us. I just tried to provide more context for the author and the reviewers, sorry if it wasn't helpful.\r\n\r\nThis was helpful, but it's not just assuming some basic level of familiarity with sqlite, it is  assuming knowledge of undocumented behavior of the API. Debug logging and error handling are two overlapping things code can do, but neither is a subset of the other. We aren't using bash/go/C style programming, and we have good non-verbose error handling options available, so I wouldn't ignore error codes just because sqlite has a debug feature that prints some subset of errors with less context.",
      "created_at": "2020-10-06T14:12:29Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500317531",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500317531"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500419009",
      "pull_request_review_id": 503128006,
      "id": 500419009,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxOTAwOQ==",
      "diff_hunk": "@@ -67,6 +71,14 @@ std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(const char* mode, bool\n     return nullptr;\n }\n \n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n+    : m_database(database)\n+{\n+    m_read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+    m_database.AddRef();\n+    m_database.Open(mode);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "46aa20b62e77b33e62e1e17ac6f6a6eb1a9efdce",
      "in_reply_to_id": 499962753,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The purpose of opening the database within a batch is to only open it when the database is going to be used. It is then left open to avoid constantly closing and reopening it.\r\n\r\nWe also do it to set the mode on the database, but the usefulness of that is arguable but we can deal with that in a followup.",
      "created_at": "2020-10-06T16:04:07Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500419009",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500419009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500422742",
      "pull_request_review_id": 503133043,
      "id": 500422742,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyMjc0Mg==",
      "diff_hunk": "@@ -42,6 +43,18 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     }\n }\n \n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "af798a8fd9b3b1a1e0a63a665f6d89c73e8614a3",
      "in_reply_to_id": 498455603,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "From https://sqlite.org/pragma.html#pragma_locking_mode\r\n\r\n> The first time the database is read in EXCLUSIVE mode, a shared lock is obtained and held. The first time the database is written, an exclusive lock is obtained and held.\r\n\r\nSo opening in exclusive mode means that there is a potential case where bitcoind has not yet written anything and thus only has a shared lock. In that case, another bitcoind could open the same file (and not write anything) and also acquire a shared lock. See https://sqlite.org/lockingv3.html for the definitions of shared and exclusive locks in sqlite3.",
      "created_at": "2020-10-06T16:09:28Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500422742",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500422742"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500428260",
      "pull_request_review_id": 503140536,
      "id": 500428260,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyODI2MA==",
      "diff_hunk": "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "in_reply_to_id": 499976815,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "From https://sqlite.org/c3ref/open.html\r\n\r\n> Whether or not an error occurs when it is opened, resources associated with the database connection handle should be released by passing it to sqlite3_close() when it is no longer required.\r\n\r\nSince it is ok for a database to not exist when we do `Verify`, I think it is correct to not log anything on the `NOTFOUND` error here.",
      "created_at": "2020-10-06T16:18:04Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500428260",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500428260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500431876",
      "pull_request_review_id": 503145331,
      "id": 500431876,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMTg3Ng==",
      "diff_hunk": "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);",
      "path": "src/wallet/sqlite.cpp",
      "position": 170,
      "original_position": 22,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "in_reply_to_id": 499977375,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "From https://sqlite.org/c3ref/prepare.html\r\n\r\n> *ppStmt is left pointing to a compiled prepared statement that can be executed using sqlite3_step(). If there is an error, *ppStmt is set to NULL.\r\n\r\nSo `stmt` should be NULL after prepare if it fails.\r\n\r\nFrom https://sqlite.org/c3ref/finalize.html\r\n\r\n> Invoking sqlite3_finalize() on a NULL pointer is a harmless no-op.\r\n>\r\n> The application must finalize every prepared statement in order to avoid resource leaks.\r\n\r\nFinalizing a nullptr is safe. It also seems like it is recommended to finalize on failure, just in case.\r\n\r\nRegardless, I will initialize `stmt` to nullptr.",
      "created_at": "2020-10-06T16:23:24Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500431876",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500431876"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 170,
      "original_line": 170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504040",
      "pull_request_review_id": 503239575,
      "id": 500504040,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNDA0MA==",
      "diff_hunk": "@@ -99,6 +99,10 @@ The following can be set when running make: `make FOO=bar`\n <dd>Don't download/build/cache packages needed for enabling zeromq</dd>\n <dt>NO_WALLET</dt>\n <dd>Don't download/build/cache libs needed to enable the wallet</dd>\n+<dt>NO_BDB</dt>\n+<dd>Don't download/build/cache BerkeleyDB</dd>\n+<dt>NO_SQLITET</dt>",
      "path": "depends/README.md",
      "position": null,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "8bfbad00d4bd94f2b9006e6375ea7dc11adee6fb",
      "in_reply_to_id": 499932369,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2020-10-06T18:19:22Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504040",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504040"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504081",
      "pull_request_review_id": 503239629,
      "id": 500504081,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNDA4MQ==",
      "diff_hunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 65,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "b6eeb2b5ee6964a9034aca6f4be2b72d532589ca",
      "in_reply_to_id": 499939951,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-06T18:19:27Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504081",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504175",
      "pull_request_review_id": 503239732,
      "id": 500504175,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNDE3NQ==",
      "diff_hunk": "@@ -67,6 +71,14 @@ std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(const char* mode, bool\n     return nullptr;\n }\n \n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n+    : m_database(database)\n+{\n+    m_read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+    m_database.AddRef();",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "46aa20b62e77b33e62e1e17ac6f6a6eb1a9efdce",
      "in_reply_to_id": 499940422,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-06T18:19:33Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504175",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504235",
      "pull_request_review_id": 503239796,
      "id": 500504235,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNDIzNQ==",
      "diff_hunk": "@@ -176,6 +176,10 @@ void SQLiteBatch::Flush()\n \n void SQLiteBatch::Close()\n {\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        TxnAbort();",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fbf44184de758271e759978cd5037efcb4ba4eb1",
      "in_reply_to_id": 499946057,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-06T18:19:38Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504235",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504235"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504286",
      "pull_request_review_id": 503239867,
      "id": 500504286,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNDI4Ng==",
      "diff_hunk": "@@ -176,6 +176,10 @@ void SQLiteBatch::Flush()\n \n void SQLiteBatch::Close()\n {\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        TxnAbort();\n+    }\n+    m_database.RemoveRef();",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fbf44184de758271e759978cd5037efcb4ba4eb1",
      "in_reply_to_id": 499946323,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-06T18:19:43Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504286",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504376",
      "pull_request_review_id": 503239964,
      "id": 500504376,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNDM3Ng==",
      "diff_hunk": "@@ -62,8 +62,57 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "96d2a5f8b8ea7dd512deaac4d1d70702517af6c1",
      "in_reply_to_id": 499968299,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-06T18:19:50Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504376",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504376"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504579",
      "pull_request_review_id": 503240182,
      "id": 500504579,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNDU3OQ==",
      "diff_hunk": "@@ -62,8 +62,57 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            if (sqlite3_db_readonly(db, \"main\") != 0) {\n+                throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+            }\n+\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB)\";",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "96d2a5f8b8ea7dd512deaac4d1d70702517af6c1",
      "in_reply_to_id": 499969112,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`PRIMARY KEY` implies not null, so i've just added `NOT NULL` for `value`.",
      "created_at": "2020-10-06T18:20:07Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504579",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504579"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504637",
      "pull_request_review_id": 503240249,
      "id": 500504637,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNDYzNw==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+}\n+\n+void SQLiteDatabase::Open(const char* pszMode)",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "b6eeb2b5ee6964a9034aca6f4be2b72d532589ca",
      "in_reply_to_id": 499970587,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-06T18:20:12Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504637",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504637"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504885",
      "pull_request_review_id": 503240555,
      "id": 500504885,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNDg4NQ==",
      "diff_hunk": "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);",
      "path": "src/wallet/sqlite.cpp",
      "position": 170,
      "original_position": 22,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "in_reply_to_id": 499977375,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Made `stmt` nullptr, and also done for other statements.",
      "created_at": "2020-10-06T18:20:33Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504885",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504885"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 170,
      "original_line": 170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500505229",
      "pull_request_review_id": 503241030,
      "id": 500505229,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNTIyOQ==",
      "diff_hunk": "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "in_reply_to_id": 499978292,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-06T18:21:08Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500505229",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500505229"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500505300",
      "pull_request_review_id": 503241115,
      "id": 500505300,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNTMwMA==",
      "diff_hunk": "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "in_reply_to_id": 499978706,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-06T18:21:15Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500505300",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500505300"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500505689",
      "pull_request_review_id": 503241610,
      "id": 500505689,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNTY4OQ==",
      "diff_hunk": "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "in_reply_to_id": 499981600,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've changed `Verify` to unlock the directory at the end of the function.",
      "created_at": "2020-10-06T18:21:52Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500505689",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500505689"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500505741",
      "pull_request_review_id": 503241698,
      "id": 500505741,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNTc0MQ==",
      "diff_hunk": "@@ -176,7 +176,7 @@ bool SQLiteDatabase::Rewrite(const char* skip)\n \n bool SQLiteDatabase::PeriodicFlush()\n {\n-    return false;\n+    return true;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "addc4630a2a6587b0e07b9c45644117542685fed",
      "in_reply_to_id": 499983328,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-06T18:21:58Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500505741",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500505741"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 342,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500507420",
      "pull_request_review_id": 503243824,
      "id": 500507420,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNzQyMA==",
      "diff_hunk": "@@ -139,6 +156,8 @@ void SQLiteDatabase::Close()\n         throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to close database: %s\\n\", sqlite3_errstr(res)));\n     }\n     m_db = nullptr;\n+\n+    UnlockDirectory(m_dir_path, \".walletlock\");",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "4f3e5569c3c0eb83d50f7f88e9b673fa857fa08a",
      "in_reply_to_id": 499984258,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've removed `if (!m_db) return;` so this will always be run. This is safe because `sqlite3_close` on a nullptr is a no-op. This will unconditionally unlock the directory on db close.",
      "created_at": "2020-10-06T18:24:32Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500507420",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500507420"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 379,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500507483",
      "pull_request_review_id": 503243916,
      "id": 500507483,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNzQ4Mw==",
      "diff_hunk": "@@ -151,6 +151,7 @@ void SQLiteDatabase::Close()\n {\n     if (!m_db) return;\n \n+    assert(m_refcount == 0);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "e63b9504257165780b2c56ec46bc842b8d680dbc",
      "in_reply_to_id": 499984625,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-06T18:24:38Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500507483",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500507483"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500507778",
      "pull_request_review_id": 503244253,
      "id": 500507778,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNzc3OA==",
      "diff_hunk": "@@ -251,22 +251,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_database.m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_database.m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "21289de5fd85b4510032393902b0dec84704cf77",
      "in_reply_to_id": 499989994,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Moved all of the statements into `SQLiteBatch`.",
      "created_at": "2020-10-06T18:25:02Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500507778",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500507778"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 258,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500507852",
      "pull_request_review_id": 503244335,
      "id": 500507852,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNzg1Mg==",
      "diff_hunk": "@@ -414,17 +414,23 @@ void SQLiteBatch::CloseCursor()\n \n bool SQLiteBatch::TxnBegin()\n {\n-    return false;\n+    if (!m_database.m_db || sqlite3_get_autocommit(m_database.m_db) == 0) return false;\n+    int res = sqlite3_exec(m_database.m_db, \"BEGIN TRANSACTION\", nullptr, nullptr, nullptr);",
      "path": "src/wallet/sqlite.cpp",
      "position": 542,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "d448c6c362642f24b08b754cb09066ced847f867",
      "in_reply_to_id": 499991129,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-06T18:25:08Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500507852",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500507852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 542,
      "original_line": 542,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500507977",
      "pull_request_review_id": 503244476,
      "id": 500507977,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNzk3Nw==",
      "diff_hunk": "@@ -170,7 +170,16 @@ void SQLiteDatabase::Open(const char* mode)\n \n bool SQLiteDatabase::Rewrite(const char* skip)\n {\n-    return false;\n+    while (true) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "ceac790fb2be0bcd5a1e20b275612c3b75df7786",
      "in_reply_to_id": 491662874,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed the loop",
      "created_at": "2020-10-06T18:25:20Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500507977",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500507977"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500512372",
      "pull_request_review_id": 503250068,
      "id": 500512372,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUxMjM3Mg==",
      "diff_hunk": "@@ -152,6 +189,14 @@ void SQLiteDatabase::Close()\n     if (!m_db) return;\n \n     assert(m_refcount == 0);\n+\n+    // Free all of the prepared statements\n+    sqlite3_finalize(m_read_stmt);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fcee39162e5713f581443eb26d36c65c2c0b9cda",
      "in_reply_to_id": 499985602,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-06T18:32:11Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500512372",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500512372"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500684600",
      "pull_request_review_id": 502926188,
      "id": 500684600,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4NDYwMA==",
      "diff_hunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 65,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "b6eeb2b5ee6964a9034aca6f4be2b72d532589ca",
      "in_reply_to_id": 499939951,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add SQLiteDatabase and SQLiteBatch dummy classes\" (f747380289b06ba1631e1cec30b96b5aecb61f36)\r\n\r\nComment \"Indicate the a new database user has began using the database. Increments m_refcount\" isn't accurate",
      "created_at": "2020-10-07T01:27:29Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500684600",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500684600"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500684857",
      "pull_request_review_id": 502926188,
      "id": 500684857,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4NDg1Nw==",
      "diff_hunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override;\n+    /** Indicate that database user has stopped using the database. Decrement m_refcount */\n+    void RemoveRef() override;\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 70,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "f747380289b06ba1631e1cec30b96b5aecb61f36",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add SQLiteDatabase and SQLiteBatch dummy classes\" (f747380289b06ba1631e1cec30b96b5aecb61f36)\r\n\r\nComment about pszSkip doesn't apply here",
      "created_at": "2020-10-07T01:28:35Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500684857",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500684857"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500685968",
      "pull_request_review_id": 502926188,
      "id": 500685968,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4NTk2OA==",
      "diff_hunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override;\n+    /** Indicate that database user has stopped using the database. Decrement m_refcount */\n+    void RemoveRef() override;\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* skip=nullptr) override;\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& dest) const override;\n+\n+    /** Make sure all changes are flushed to disk.",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 78,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "f747380289b06ba1631e1cec30b96b5aecb61f36",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add SQLiteDatabase and SQLiteBatch dummy classes\" (f747380289b06ba1631e1cec30b96b5aecb61f36)\r\n\r\nComment isn't true since method is a no-op. I think this method and other methods which are no-ops like PeriodicFlush ReloadDbEn or never called AddRef RemoveRef should be inlined here so it's obvious what their role is in the sqlite implementation and how they are not normal methods",
      "created_at": "2020-10-07T01:33:02Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500685968",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500685968"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500686157",
      "pull_request_review_id": 502926188,
      "id": 500686157,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4NjE1Nw==",
      "diff_hunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override;\n+    /** Indicate that database user has stopped using the database. Decrement m_refcount */\n+    void RemoveRef() override;\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* skip=nullptr) override;\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& dest) const override;\n+\n+    /** Make sure all changes are flushed to disk.\n+     */\n+    void Flush() override;\n+    /* flush the wallet passively (TRY_LOCK)",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 81,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "f747380289b06ba1631e1cec30b96b5aecb61f36",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add SQLiteDatabase and SQLiteBatch dummy classes\" (f747380289b06ba1631e1cec30b96b5aecb61f36)\r\n\r\nComment is also incorrect",
      "created_at": "2020-10-07T01:33:52Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500686157",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500686157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500688620",
      "pull_request_review_id": 502926188,
      "id": 500688620,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4ODYyMA==",
      "diff_hunk": "@@ -67,6 +71,14 @@ std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(const char* mode, bool\n     return nullptr;\n }\n \n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n+    : m_database(database)\n+{\n+    m_read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+    m_database.AddRef();\n+    m_database.Open(mode);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "46aa20b62e77b33e62e1e17ac6f6a6eb1a9efdce",
      "in_reply_to_id": 499962753,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500419009\r\n> The purpose of opening the database within a batch is to only open it when the database is going to be used. It is then left open to avoid constantly closing and reopening it.\r\n\r\nIt sounds like my suggestion was not clear. My suggestion is to open the database when the database object is created, and close it when it is destroyed. This opens and closes the database *fewer* times than the current implementation (due to not having to open close and reopen for verification) and is *simpler* (also due to not having to open close and reopen for verification). Feel free to ignore the suggestion or to follow it up later, but I hope I am getting it across clearly.",
      "created_at": "2020-10-07T01:43:42Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500688620",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500688620"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500692052",
      "pull_request_review_id": 502926188,
      "id": 500692052,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5MjA1Mg==",
      "diff_hunk": "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);\n+    }\n+    sqlite3_finalize(stmt);\n+    sqlite3_close(db);\n+    return error.original.empty();\n+}\n+\n+void SQLiteDatabase::Open(const char* mode)\n+{\n+    if (!PrepareDirectory()) {\n+        throw std::runtime_error(\"Cannot obtain a lock on wallet directory\");\n+    }\n+\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));",
      "path": "src/wallet/sqlite.cpp",
      "position": 212,
      "original_position": 231,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "in_reply_to_id": 491362245,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteDatabase::Open\" (d1559561a68dd6604efd91baa5dbd28c995d0074)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492417585\r\n\r\n> It will be closed when the `SQLiteDatabase` is destructed.\r\n\r\nIt does looks like `db` pointer can be leaked here if ret is not OK.\r\n",
      "created_at": "2020-10-07T01:55:58Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500692052",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500692052"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 212,
      "original_line": 212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500692290",
      "pull_request_review_id": 502926188,
      "id": 500692290,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5MjI5MA==",
      "diff_hunk": "@@ -64,6 +64,54 @@ SQLiteDatabase::~SQLiteDatabase()\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        if (create) {\n+            if (sqlite3_db_readonly(db, \"main\") != 0) {\n+                throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "d1559561a68dd6604efd91baa5dbd28c995d0074",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteDatabase::Open\" (d1559561a68dd6604efd91baa5dbd28c995d0074)\r\n\r\nIt looks like `db` pointer can be leaked here if this error is thrown\r\n",
      "created_at": "2020-10-07T01:56:46Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500692290",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500692290"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500692495",
      "pull_request_review_id": 502926188,
      "id": 500692495,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5MjQ5NQ==",
      "diff_hunk": "@@ -64,6 +64,54 @@ SQLiteDatabase::~SQLiteDatabase()\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        if (create) {\n+            if (sqlite3_db_readonly(db, \"main\") != 0) {\n+                throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+            }\n+\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB NOT NULL)\";\n+            ret = sqlite3_exec(db, create_stmt.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "d1559561a68dd6604efd91baa5dbd28c995d0074",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteDatabase::Open\" (d1559561a68dd6604efd91baa5dbd28c995d0074)\r\n\r\nIt looks like `db` pointer can be leaked here if ret is not OK.\r\n",
      "created_at": "2020-10-07T01:57:24Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500692495",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500692495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500699840",
      "pull_request_review_id": 502926188,
      "id": 500699840,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5OTg0MA==",
      "diff_hunk": "@@ -64,6 +64,54 @@ SQLiteDatabase::~SQLiteDatabase()\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        if (create) {\n+            if (sqlite3_db_readonly(db, \"main\") != 0) {\n+                throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+            }\n+\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB NOT NULL)\";",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "d1559561a68dd6604efd91baa5dbd28c995d0074",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteDatabase::Open\" (d1559561a68dd6604efd91baa5dbd28c995d0074)\r\n\r\n`key` needs `NOT NULL` constraint to prevent nulls (primary key isn't enough).\r\n\r\n```\r\n$ sqlite3\r\nSQLite version 3.30.1 2019-10-10 20:19:45\r\nsqlite> CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB NOT NULL);\r\nsqlite> insert into main values (null, 'value');\r\nsqlite> select * from main;\r\n|value\r\n```",
      "created_at": "2020-10-07T02:21:40Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500699840",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500699840"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500700087",
      "pull_request_review_id": 502926188,
      "id": 500700087,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMDA4Nw==",
      "diff_hunk": "@@ -64,6 +64,54 @@ SQLiteDatabase::~SQLiteDatabase()\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        if (create) {\n+            if (sqlite3_db_readonly(db, \"main\") != 0) {\n+                throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+            }\n+\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB NOT NULL)\";\n+            ret = sqlite3_exec(db, create_stmt.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+\n+            // Enable fullfysnc for the platforms that use it\n+            std::string fullfsync_stmt = \"PRAGMA fullfsync = true\";\n+            ret = sqlite3_exec(db, fullfsync_stmt.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to enable fullfsync: %s\\n\", sqlite3_errstr(ret)));",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "d1559561a68dd6604efd91baa5dbd28c995d0074",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteDatabase::Open\" (d1559561a68dd6604efd91baa5dbd28c995d0074)\r\n\r\nIt looks like `db` pointer can be leaked here if ret is not OK.\r\n",
      "created_at": "2020-10-07T02:22:25Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500700087",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500700087"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500702146",
      "pull_request_review_id": 502926188,
      "id": 500702146,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMjE0Ng==",
      "diff_hunk": "@@ -172,6 +172,13 @@ void SQLiteBatch::Flush()\n \n void SQLiteBatch::Close()\n {\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        if (TxnAbort()) {\n+            LogPrintf(\"SQLiteBatch: Batch closed and transaction was aborted\\n\");",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "29395e28698978dc65e16c4eaf9bb8f8e7429e7d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteBatch::Close\" (29395e28698978dc65e16c4eaf9bb8f8e7429e7d)\r\n\r\nWould be good to `s/Batch closed/Batch closed unexpectedly without explicit commit or abort/` here and below to be clear this is an error, not an informational log",
      "created_at": "2020-10-07T02:30:01Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500702146",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500702146"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500705096",
      "pull_request_review_id": 502926188,
      "id": 500705096,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwNTA5Ng==",
      "diff_hunk": "@@ -172,6 +172,13 @@ void SQLiteBatch::Flush()\n \n void SQLiteBatch::Close()\n {\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        if (TxnAbort()) {\n+            LogPrintf(\"SQLiteBatch: Batch closed and transaction was aborted\\n\");\n+        } else {\n+            LogPrintf(\"SQLiteBatch: Batch closed and could not abort transaction\\n\");",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "29395e28698978dc65e16c4eaf9bb8f8e7429e7d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteBatch::Close\" (29395e28698978dc65e16c4eaf9bb8f8e7429e7d)\r\n\r\nWould be good to `s/could not abort/failed to abort/` to be clear abort call was made rather than considered",
      "created_at": "2020-10-07T02:42:03Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500705096",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500705096"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500715649",
      "pull_request_review_id": 502926188,
      "id": 500715649,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxNTY0OQ==",
      "diff_hunk": "@@ -42,6 +43,18 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     }\n }\n \n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "af798a8fd9b3b1a1e0a63a665f6d89c73e8614a3",
      "in_reply_to_id": 498455603,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"sqlitedb: Create and lock the wallet directory\" (a6415a4dc752db171bd842fb376c5c5a919c04e5)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500422742\r\n\r\n> From [sqlite.org/pragma.html#pragma_locking_mode](https://sqlite.org/pragma.html#pragma_locking_mode)\r\n\r\nOh, you are absolutely right. Just setting the pragma doesn't get the lock, you have to do an empty transaction to acquire it. This just means you need 3 statements to open the database: `pragma locking_mode=exclusive; begin exclusive transaction; commit;` instead of 1 statement.\r\n\r\nUsing the sqlite exclusive lock would be more reliable than .walletlock and simpler because it would be a part of database opening, not in some other code path separate from opening, and because it would no longer requiring extra code removing .walletlock at shutdown (this code already had a bug previously in this PR).\r\n\r\nIn case it helps, I found it pretty straightforward to test locking from the command line:\r\n\r\n- Terminal 1\r\n  ```bash\r\n  $ sqlite3 db.sqlite\r\n  sqlite> pragma locking_mode=exclusive;\r\n  exclusive\r\n  sqlite> begin exclusive transaction;\r\n  sqlite> commit;\r\n  sqlite> \r\n  ```\r\n\r\n- Terminal 2\r\n  ```bash\r\n  $ sqlite3 db.sqlite\r\n  sqlite> pragma locking_mode=exclusive;\r\n  exclusive\r\n  sqlite> begin exclusive transaction;\r\n  Error: database is locked\r\n  sqlite> \r\n  ```",
      "created_at": "2020-10-07T03:24:10Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500715649",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500715649"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500718150",
      "pull_request_review_id": 502926188,
      "id": 500718150,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxODE1MA==",
      "diff_hunk": "@@ -202,6 +239,28 @@ void SQLiteBatch::Close()\n             LogPrintf(\"SQLiteBatch: Batch closed and could not abort transaction\\n\");\n         }\n     }\n+\n+    // Free all of the prepared statements\n+    int ret = sqlite3_finalize(m_read_stmt);\n+    if (ret != SQLITE_OK) {",
      "path": "src/wallet/sqlite.cpp",
      "position": 357,
      "original_position": 58,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "f86afc53406448428dadaf59d0ccf78fb1421220",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add SetupSQLStatements\" (f86afc53406448428dadaf59d0ccf78fb1421220)\r\n\r\nIt looks like there are double-delete bugs in this method depending on how it's called. Statement pointers are not set to null if finalize returns `SQLITE_OK`, so if Close is called twice sqlite3_finalize will be called with invalid deleted pointers and possibly segfault.\r\n\r\nOne fix would be to set the pointers to null if finalize returns `SQLITE_OK`. Another fix would be move the code out of this method into the destructor.",
      "created_at": "2020-10-07T03:35:19Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500718150",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500718150"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 357,
      "original_line": 357,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500720094",
      "pull_request_review_id": 502926188,
      "id": 500720094,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcyMDA5NA==",
      "diff_hunk": "@@ -265,22 +265,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_read_stmt);",
      "path": "src/wallet/sqlite.cpp",
      "position": 392,
      "original_position": 11,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "36ea015032ddf1aa7d424b463c2c6c531d832295",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteBatch::ReadKey, WriteKey, EraseKey, and HasKey\" (36ea015032ddf1aa7d424b463c2c6c531d832295)\r\n\r\nThroughout the PR would be good to check all return codes and log errors with context information whenever any sqlite3_* calls fail. But if the practice of checking return codes is going to be set aside when calling sqlite, feel free to ignore the suggestion.",
      "created_at": "2020-10-07T03:44:21Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500720094",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500720094"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 392,
      "original_line": 392,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500722270",
      "pull_request_review_id": 502926188,
      "id": 500722270,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcyMjI3MA==",
      "diff_hunk": "@@ -265,22 +265,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    res = sqlite3_step(m_read_stmt);\n+    if (res != SQLITE_ROW) {\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    // Leftmost column in result is index 0\n+    const char* data = (const char*)sqlite3_column_blob(m_read_stmt, 0);\n+    int data_size = sqlite3_column_bytes(m_read_stmt, 0);\n+    value.write(data, data_size);\n+\n+    sqlite3_clear_bindings(m_read_stmt);\n+    sqlite3_reset(m_read_stmt);\n+    return true;\n }\n \n bool SQLiteBatch::WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    if (m_read_only) throw std::runtime_error(\"Write called on database in read-only mode\");\n+    assert(m_insert_stmt && m_overwrite_stmt);\n+\n+    sqlite3_stmt* stmt;\n+    if (overwrite) {\n+        stmt = m_overwrite_stmt;\n+    } else {\n+        stmt = m_insert_stmt;\n+    }\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    // Insert index 1 is key, 2 is value\n+    int res = sqlite3_bind_blob(stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n+        return false;\n+    }\n+    res = sqlite3_bind_blob(stmt, 2, value.data(), value.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n+        return false;\n+    }\n+\n+    // Execute\n+    res = sqlite3_step(stmt);\n+    sqlite3_clear_bindings(stmt);\n+    sqlite3_reset(stmt);\n+    return res == SQLITE_DONE;\n }\n \n bool SQLiteBatch::EraseKey(CDataStream&& key)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    if (m_read_only) throw std::runtime_error(\"Erase called on database in read-only mode\");\n+    assert(m_delete_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_delete_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_delete_stmt);\n+        sqlite3_reset(m_delete_stmt);\n+        return false;\n+    }\n+\n+    // Execute\n+    res = sqlite3_step(m_delete_stmt);\n+    sqlite3_clear_bindings(m_delete_stmt);\n+    sqlite3_reset(m_delete_stmt);\n+    return res == SQLITE_DONE;\n }\n \n bool SQLiteBatch::HasKey(CDataStream&& key)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    bool ret = false;\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);",
      "path": "src/wallet/sqlite.cpp",
      "position": 486,
      "original_position": 97,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "36ea015032ddf1aa7d424b463c2c6c531d832295",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteBatch::ReadKey, WriteKey, EraseKey, and HasKey\" (36ea015032ddf1aa7d424b463c2c6c531d832295)\r\n\r\nTheoretically it might be more efficient to use \r\n`SELECT EXISTS(SELECT * FROM main WHERE key = ?)` instead of `SELECT value FROM main WHERE key = ?` to avoid needing to read the table and just use the index. But probably does not matter in practice.",
      "created_at": "2020-10-07T03:52:59Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500722270",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500722270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 486,
      "original_line": 486,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500723715",
      "pull_request_review_id": 502926188,
      "id": 500723715,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcyMzcxNQ==",
      "diff_hunk": "@@ -179,7 +179,28 @@ bool SQLiteDatabase::PeriodicFlush()\n \n bool SQLiteDatabase::Backup(const std::string& dest) const\n {\n-    return false;\n+    sqlite3* db_copy;\n+    int res = sqlite3_open(dest.c_str(), &db_copy);\n+    if (res != SQLITE_OK) {\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    sqlite3_backup* backup = sqlite3_backup_init(db_copy, \"main\", m_db, \"main\");\n+    if (!backup) {\n+        sqlite3_backup_finish(backup);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "273e8adfe8e96d45dca0e44fe194bf2548dd6686",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteDatabase::Backup\" (273e8adfe8e96d45dca0e44fe194bf2548dd6686)\r\n\r\nShould drop this line. \"There should be exactly one call to sqlite3_backup_finish() for each successful call to sqlite3_backup_init().\" https://www.sqlite.org/c3ref/backup_finish.html",
      "created_at": "2020-10-07T03:59:00Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500723715",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500723715"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500732068",
      "pull_request_review_id": 502926188,
      "id": 500732068,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDczMjA2OA==",
      "diff_hunk": "@@ -111,6 +111,60 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) {\n+        error = strprintf(_(\"SQLiteDatabase: Unable to obtain lock on wallet directory \\\"%s\\\"\"), m_dir_path);\n+        return false;\n+    }\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "90a7a6b371d1106f1cab02bcdda2454a828add1d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteDatabase::Verify\" (90a7a6b371d1106f1cab02bcdda2454a828add1d)\r\n\r\nI know the history of the PR, but at this point post-#19619, I think it is a little nuts to keep using the sequence:\r\n\r\n1. Lock wallet directory\r\n2. Open database\r\n3. Verify database\r\n4. Unlock wallet directory\r\n5. Lock wallet directory\r\n6. Open database\r\n7. Use database\r\n8. Close database\r\n9. Unlock wallet directory\r\n\r\nwhen `DatabaseOptions::verify` is true, instead of simply:\r\n\r\n1. Open database in exclusive mode\r\n2. Verify database\r\n3. Use database\r\n4. Close database\r\n\r\nBut feel free to ignore the suggested simplification or to follow up in a future PR.",
      "created_at": "2020-10-07T04:35:14Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500732068",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500732068"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501113175",
      "pull_request_review_id": 502926188,
      "id": 501113175,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExMzE3NQ==",
      "diff_hunk": "@@ -64,6 +64,54 @@ SQLiteDatabase::~SQLiteDatabase()\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "d1559561a68dd6604efd91baa5dbd28c995d0074",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement SQLiteDatabase::Open\" (d1559561a68dd6604efd91baa5dbd28c995d0074)\r\n\r\nLooking at [S3RK's branch](https://github.com/achow101/bitcoin/compare/sqlite-wallet...S3RK:wallet_db_remove_read_only?expand=1) https://github.com/bitcoin/bitcoin/pull/19077/#discussion_r499125987, I don't see a need to parse the mode argument at all. I think `SQLiteDatabase::Open` should ignore the mode argument just like `SQLiteDatabase::Rewrite` ignores the skip argument. It would simplify the implementation here in various ways. And later I think the mode argument should be dropped from BDB as well in favor of simply respecting the `DatabaseOptions.require_existing` value passed when creating the database object.",
      "created_at": "2020-10-07T15:38:15Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501113175",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501113175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501156002",
      "pull_request_review_id": 504069662,
      "id": 501156002,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1NjAwMg==",
      "diff_hunk": "@@ -42,6 +43,18 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     }\n }\n \n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "af798a8fd9b3b1a1e0a63a665f6d89c73e8614a3",
      "in_reply_to_id": 498455603,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> This just means you need 3 statements to open the database:\r\n\r\nThen there's the potential for race conditions in 2 instances: before the pragma is executed, and after it is executed but before the transaction begins.\r\n\r\nEdit: Oh I guess we just exit with the database is in use error when `begin transaction` fails.",
      "created_at": "2020-10-07T16:39:12Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501156002",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501156002"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501162929",
      "pull_request_review_id": 504078426,
      "id": 501162929,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2MjkyOQ==",
      "diff_hunk": "@@ -42,6 +43,18 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     }\n }\n \n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "af798a8fd9b3b1a1e0a63a665f6d89c73e8614a3",
      "in_reply_to_id": 498455603,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501156002\r\n\r\n> Then there's the potential for race conditions in 2 instances: before the pragma is executed, and after it is executed but before the transaction begins.\r\n\r\nThere's no race condition here:\r\n\r\n```c++\r\ndb = sqlite_open(path); // Or error \"sorry, couldn't open database\"\r\nsqlite_exec(db, \"pragma locking_mode=exclusive\"); // Or error \"sorry, couldn't set locking mode\"\r\nsqlite_exec(db, \"begin exclusive transaction\"); // Or error \"sorry, database is currently in use\"\r\nsqlite_exec(db, \"commit\"); // Or error \"sorry, unexpected failure\"\r\n```\r\n\r\nThere would be a race condition if the exclusive lock was released after the commit statement. But the point of the pragma is to extend the exclusive lock from point where it is first acquired until the point where the database is closed.\r\n",
      "created_at": "2020-10-07T16:49:53Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501162929",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501162929"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245126",
      "pull_request_review_id": 504183697,
      "id": 501245126,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NTEyNg==",
      "diff_hunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override;\n+    /** Indicate that database user has stopped using the database. Decrement m_refcount */\n+    void RemoveRef() override;\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 70,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "f747380289b06ba1631e1cec30b96b5aecb61f36",
      "in_reply_to_id": 500684857,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed",
      "created_at": "2020-10-07T19:04:39Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245126",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245126"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245213",
      "pull_request_review_id": 504183811,
      "id": 501245213,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NTIxMw==",
      "diff_hunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override;\n+    /** Indicate that database user has stopped using the database. Decrement m_refcount */\n+    void RemoveRef() override;\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* skip=nullptr) override;\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& dest) const override;\n+\n+    /** Make sure all changes are flushed to disk.",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 78,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "f747380289b06ba1631e1cec30b96b5aecb61f36",
      "in_reply_to_id": 500685968,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed and inlined these functions.",
      "created_at": "2020-10-07T19:04:49Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245213",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245213"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245501",
      "pull_request_review_id": 504184142,
      "id": 501245501,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NTUwMQ==",
      "diff_hunk": "@@ -64,6 +64,54 @@ SQLiteDatabase::~SQLiteDatabase()\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        if (create) {\n+            if (sqlite3_db_readonly(db, \"main\") != 0) {\n+                throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "d1559561a68dd6604efd91baa5dbd28c995d0074",
      "in_reply_to_id": 500692290,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've changed this to just use `m_db` so on failure it will be cleaned up by the destructor.",
      "created_at": "2020-10-07T19:05:17Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245501",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245501"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245594",
      "pull_request_review_id": 504184280,
      "id": 501245594,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NTU5NA==",
      "diff_hunk": "@@ -64,6 +64,54 @@ SQLiteDatabase::~SQLiteDatabase()\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        if (create) {\n+            if (sqlite3_db_readonly(db, \"main\") != 0) {\n+                throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+            }\n+\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB NOT NULL)\";",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "d1559561a68dd6604efd91baa5dbd28c995d0074",
      "in_reply_to_id": 500699840,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-10-07T19:05:29Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245594",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245594"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245688",
      "pull_request_review_id": 504184402,
      "id": 501245688,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NTY4OA==",
      "diff_hunk": "@@ -172,6 +172,13 @@ void SQLiteBatch::Flush()\n \n void SQLiteBatch::Close()\n {\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        if (TxnAbort()) {\n+            LogPrintf(\"SQLiteBatch: Batch closed and transaction was aborted\\n\");",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "29395e28698978dc65e16c4eaf9bb8f8e7429e7d",
      "in_reply_to_id": 500702146,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-07T19:05:39Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245688",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245688"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245718",
      "pull_request_review_id": 504184438,
      "id": 501245718,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NTcxOA==",
      "diff_hunk": "@@ -172,6 +172,13 @@ void SQLiteBatch::Flush()\n \n void SQLiteBatch::Close()\n {\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        if (TxnAbort()) {\n+            LogPrintf(\"SQLiteBatch: Batch closed and transaction was aborted\\n\");\n+        } else {\n+            LogPrintf(\"SQLiteBatch: Batch closed and could not abort transaction\\n\");",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "29395e28698978dc65e16c4eaf9bb8f8e7429e7d",
      "in_reply_to_id": 500705096,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-07T19:05:43Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245718",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245718"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245832",
      "pull_request_review_id": 504184585,
      "id": 501245832,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NTgzMg==",
      "diff_hunk": "@@ -202,6 +239,28 @@ void SQLiteBatch::Close()\n             LogPrintf(\"SQLiteBatch: Batch closed and could not abort transaction\\n\");\n         }\n     }\n+\n+    // Free all of the prepared statements\n+    int ret = sqlite3_finalize(m_read_stmt);\n+    if (ret != SQLITE_OK) {",
      "path": "src/wallet/sqlite.cpp",
      "position": 357,
      "original_position": 58,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "f86afc53406448428dadaf59d0ccf78fb1421220",
      "in_reply_to_id": 500718150,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Set the pointers to nullptr.",
      "created_at": "2020-10-07T19:05:57Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245832",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245832"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 357,
      "original_line": 357,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245965",
      "pull_request_review_id": 504184766,
      "id": 501245965,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NTk2NQ==",
      "diff_hunk": "@@ -265,22 +265,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_read_stmt);",
      "path": "src/wallet/sqlite.cpp",
      "position": 392,
      "original_position": 11,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "36ea015032ddf1aa7d424b463c2c6c531d832295",
      "in_reply_to_id": 500720094,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's fine to skip checking the return codes for clear_bindings and reset.",
      "created_at": "2020-10-07T19:06:15Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245965",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245965"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 392,
      "original_line": 392,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501246061",
      "pull_request_review_id": 504184887,
      "id": 501246061,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NjA2MQ==",
      "diff_hunk": "@@ -179,7 +179,28 @@ bool SQLiteDatabase::PeriodicFlush()\n \n bool SQLiteDatabase::Backup(const std::string& dest) const\n {\n-    return false;\n+    sqlite3* db_copy;\n+    int res = sqlite3_open(dest.c_str(), &db_copy);\n+    if (res != SQLITE_OK) {\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    sqlite3_backup* backup = sqlite3_backup_init(db_copy, \"main\", m_db, \"main\");\n+    if (!backup) {\n+        sqlite3_backup_finish(backup);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "273e8adfe8e96d45dca0e44fe194bf2548dd6686",
      "in_reply_to_id": 500723715,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed",
      "created_at": "2020-10-07T19:06:25Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501246061",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501246061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501246525",
      "pull_request_review_id": 504185486,
      "id": 501246525,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NjUyNQ==",
      "diff_hunk": "@@ -111,6 +111,60 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) {\n+        error = strprintf(_(\"SQLiteDatabase: Unable to obtain lock on wallet directory \\\"%s\\\"\"), m_dir_path);\n+        return false;\n+    }\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "90a7a6b371d1106f1cab02bcdda2454a828add1d",
      "in_reply_to_id": 500732068,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.\r\n\r\nAs a result of this, I've also dropped the usage of `mode` and the database will always be created if it does not exist. This is fine as we enforce existence during `MakeDatabase`, but it would be better to have a `create` flag for this.",
      "created_at": "2020-10-07T19:07:19Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501246525",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501246525"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501246716",
      "pull_request_review_id": 504185748,
      "id": 501246716,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NjcxNg==",
      "diff_hunk": "@@ -42,6 +43,18 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     }\n }\n \n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "af798a8fd9b3b1a1e0a63a665f6d89c73e8614a3",
      "in_reply_to_id": 498455603,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-07T19:07:43Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501246716",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501246716"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501625111",
      "pull_request_review_id": 504655969,
      "id": 501625111,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYyNTExMQ==",
      "diff_hunk": "@@ -146,6 +146,13 @@ SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n \n void SQLiteBatch::Close()\n {\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {",
      "path": "src/wallet/sqlite.cpp",
      "position": 347,
      "original_position": 4,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "d993dee317b93b11296282b9e97fa66e8c5ca152",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "d993dee317b93b11296282b9e97fa66e8c5ca152:\r\n```\r\n// If m_db is not in autocommit mode, try to abort the transaction in progress\r\n```",
      "created_at": "2020-10-08T10:48:03Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501625111",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501625111"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 347,
      "original_line": 347,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501627285",
      "pull_request_review_id": 504655969,
      "id": 501627285,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYyNzI4NQ==",
      "diff_hunk": "@@ -146,6 +146,13 @@ SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n \n void SQLiteBatch::Close()\n {\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        if (TxnAbort()) {\n+            LogPrintf(\"SQLiteBatch: Batch closed unexpectedly without the transaction being explicitly commited or aborted\\n\");",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "d993dee317b93b11296282b9e97fa66e8c5ca152",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "d993dee317b93b11296282b9e97fa66e8c5ca152: `TxnAbort()` returns `true` if and only if `ROLLBACK TRANSACTION` succeeds, so I'm confused what you mean by \"without the transaction being explicitly commited or aborted\"\r\n\r\nSee also @ryanofsky: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499991129",
      "created_at": "2020-10-08T10:51:58Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501627285",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501627285"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 354,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501634132",
      "pull_request_review_id": 504655969,
      "id": 501634132,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzNDEzMg==",
      "diff_hunk": "@@ -53,6 +53,42 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     Open(\"\"); // mode is unused\n }\n \n+void SQLiteBatch::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fe12f7946e96727166900bdc18a3c4000a5b1447",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is it worth (in a followup) using `sqlite3_prepare_v3` with the `SQLITE_PREPARE_PERSISTENT` flag?\r\nhttps://www.sqlite.org/c3ref/c_prepare_normalize.html#sqlitepreparepersistent\r\n\r\nI guess that's only useful if these prepared statements can live longer than a single batch.",
      "created_at": "2020-10-08T11:04:39Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501634132",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501634132"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501654556",
      "pull_request_review_id": 504655969,
      "id": 501654556,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY1NDU1Ng==",
      "diff_hunk": "@@ -265,22 +265,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_read_stmt);",
      "path": "src/wallet/sqlite.cpp",
      "position": 392,
      "original_position": 11,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "36ea015032ddf1aa7d424b463c2c6c531d832295",
      "in_reply_to_id": 500720094,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fac0cf3d1edff440cdbd19d2615cba701bb4a17d  Agree, but logging why `sqlite3_bind_blob` and `sqlite3_step` fail does seem useful.",
      "created_at": "2020-10-08T11:43:28Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501654556",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501654556"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 392,
      "original_line": 392,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501660749",
      "pull_request_review_id": 504655969,
      "id": 501660749,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY2MDc0OQ==",
      "diff_hunk": "@@ -221,22 +221,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    res = sqlite3_step(m_read_stmt);",
      "path": "src/wallet/sqlite.cpp",
      "position": 396,
      "original_position": 15,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fac0cf3d1edff440cdbd19d2615cba701bb4a17d",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fac0cf3d1edff440cdbd19d2615cba701bb4a17d: you could move the `sqlite3_step` to a common function (especially if it has more error handling)",
      "created_at": "2020-10-08T11:55:01Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501660749",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501660749"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 396,
      "original_line": 396,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501667010",
      "pull_request_review_id": 504655969,
      "id": 501667010,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY2NzAxMA==",
      "diff_hunk": "@@ -325,16 +325,40 @@ bool SQLiteBatch::HasKey(CDataStream&& key)\n \n bool SQLiteBatch::StartCursor()\n {\n-    return false;\n+    assert(!m_cursor_init);\n+    if (!m_database.m_db) return false;\n+    m_cursor_init = true;\n+    return true;\n }\n \n bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& complete)\n {\n-    return false;\n+    complete = false;\n+\n+    if (!m_cursor_init) return false;\n+\n+    int res = sqlite3_step(m_cursor_stmt);\n+    if (res == SQLITE_DONE) {\n+        complete = true;\n+        return true;\n+    } else if (res != SQLITE_ROW) {\n+        return false;",
      "path": "src/wallet/sqlite.cpp",
      "position": 520,
      "original_position": 23,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "87d8fbfe58c5daa61326f67c228f09e7758ea368",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "87d8fbfe58c5daa61326f67c228f09e7758ea368: this warrants a log message",
      "created_at": "2020-10-08T12:06:08Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501667010",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501667010"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 520,
      "original_line": 520,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501668061",
      "pull_request_review_id": 504655969,
      "id": 501668061,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY2ODA2MQ==",
      "diff_hunk": "@@ -157,7 +157,27 @@ bool SQLiteDatabase::Rewrite(const char* skip)\n \n bool SQLiteDatabase::Backup(const std::string& dest) const\n {\n-    return false;\n+    sqlite3* db_copy;\n+    int res = sqlite3_open(dest.c_str(), &db_copy);\n+    if (res != SQLITE_OK) {\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    sqlite3_backup* backup = sqlite3_backup_init(db_copy, \"main\", m_db, \"main\");\n+    if (!backup) {\n+        sqlite3_close(db_copy);",
      "path": "src/wallet/sqlite.cpp",
      "position": 304,
      "original_position": 13,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "0584828e2a9022d5b548ebda6a9a8329296bcafb",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0584828e2a9022d5b548ebda6a9a8329296bcafb: worth logging why opening the destination file failed, and why backup failed to initialize, step or finish",
      "created_at": "2020-10-08T12:07:59Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501668061",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501668061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 304,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501674265",
      "pull_request_review_id": 504655969,
      "id": 501674265,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY3NDI2NQ==",
      "diff_hunk": "@@ -414,17 +414,23 @@ void SQLiteBatch::CloseCursor()\n \n bool SQLiteBatch::TxnBegin()\n {\n-    return false;\n+    if (!m_database.m_db || sqlite3_get_autocommit(m_database.m_db) == 0) return false;\n+    int res = sqlite3_exec(m_database.m_db, \"BEGIN TRANSACTION\", nullptr, nullptr, nullptr);",
      "path": "src/wallet/sqlite.cpp",
      "position": 542,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "d448c6c362642f24b08b754cb09066ced847f867",
      "in_reply_to_id": 499991129,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "4e8011a868d10650880cf5c5c01f005bc9fcc402 (maybe for followup): does it make sense to make this a prepared statement?",
      "created_at": "2020-10-08T12:18:05Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501674265",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501674265"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 542,
      "original_line": 542,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501682189",
      "pull_request_review_id": 504655969,
      "id": 501682189,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY4MjE4OQ==",
      "diff_hunk": "@@ -152,7 +152,9 @@ void SQLiteDatabase::Open(const char* mode)\n \n bool SQLiteDatabase::Rewrite(const char* skip)\n {\n-    return false;\n+    // Rewrite the database using the VACUUM command: https://sqlite.org/lang_vacuum.html",
      "path": "src/wallet/sqlite.cpp",
      "position": 288,
      "original_position": 5,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "dfa867392725f999a331404205635ee7a331886f",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "dfa867392725f999a331404205635ee7a331886f maybe explicitly mention in `EncryptWallet` that SQLite also leaves data behind when you delete a row (docs say: \"This can allow deleted content to be recovered by a hacker or by forensic analysis.\")\r\n\r\nMaybe throw/assert that `skip` is not set, since the argument is ignored.",
      "created_at": "2020-10-08T12:31:33Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501682189",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501682189"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 288,
      "original_line": 288,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501744252",
      "pull_request_review_id": 504655969,
      "id": 501744252,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc0NDI1Mg==",
      "diff_hunk": "@@ -106,6 +108,28 @@ bool SQLiteDatabase::Verify(bilingual_str& error)\n {\n     assert(m_db);\n \n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt{nullptr};\n+    int ret = sqlite3_prepare_v2(m_db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);",
      "path": "src/wallet/sqlite.cpp",
      "position": 142,
      "original_position": 31,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "4eaffb807d7050dd95a1939585cc4df3caf57118",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "4eaffb807d7050dd95a1939585cc4df3caf57118: I tried opening a signet wallet (`loadwallet`) in testnet mode. It failed with `Data is not in recognized format.`, rather than this error. That's probably because `IsSQLiteFile` also checks this.",
      "created_at": "2020-10-08T13:59:58Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501744252",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501744252"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 142,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501753764",
      "pull_request_review_id": 504655969,
      "id": 501753764,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1Mzc2NA==",
      "diff_hunk": "@@ -130,6 +131,27 @@ bool SQLiteDatabase::Verify(bilingual_str& error)\n         return false;\n     }\n \n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);",
      "path": "src/wallet/sqlite.cpp",
      "position": 163,
      "original_position": 29,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "810f3de3643cc0330cc8005126e47adf406152d0",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I changed `WALLET_SCHEMA_VERSION` to `1`, recompiled and was able to open an existing wallet...\r\nDitto if I create a new wallet with version 10, set it back to 0 and load it.",
      "created_at": "2020-10-08T14:12:32Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501753764",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501753764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 163,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501762050",
      "pull_request_review_id": 504838346,
      "id": 501762050,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2MjA1MA==",
      "diff_hunk": "@@ -146,6 +146,13 @@ SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n \n void SQLiteBatch::Close()\n {\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        if (TxnAbort()) {\n+            LogPrintf(\"SQLiteBatch: Batch closed unexpectedly without the transaction being explicitly commited or aborted\\n\");",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "d993dee317b93b11296282b9e97fa66e8c5ca152",
      "in_reply_to_id": 501627285,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I'm confused what you mean by \"without the transaction being explicitly commited or aborted\"\r\n\r\nIt means that the caller didn't call `TxnAbort` or `TxnCommit` and instead it is being done on the batch close.",
      "created_at": "2020-10-08T14:23:08Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501762050",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501762050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 354,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501762891",
      "pull_request_review_id": 504839390,
      "id": 501762891,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2Mjg5MQ==",
      "diff_hunk": "@@ -53,6 +53,42 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     Open(\"\"); // mode is unused\n }\n \n+void SQLiteBatch::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fe12f7946e96727166900bdc18a3c4000a5b1447",
      "in_reply_to_id": 501634132,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since we've moved the statements to `SQLiteBatch`, I don't think that makes sense to do.",
      "created_at": "2020-10-08T14:24:08Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501762891",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501762891"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501782793",
      "pull_request_review_id": 504866058,
      "id": 501782793,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc4Mjc5Mw==",
      "diff_hunk": "@@ -106,6 +108,28 @@ bool SQLiteDatabase::Verify(bilingual_str& error)\n {\n     assert(m_db);\n \n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt{nullptr};\n+    int ret = sqlite3_prepare_v2(m_db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);",
      "path": "src/wallet/sqlite.cpp",
      "position": 142,
      "original_position": 31,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "4eaffb807d7050dd95a1939585cc4df3caf57118",
      "in_reply_to_id": 501744252,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ":shrug: I guess that error is fine too. `IsSQLiteFile` needs to check the app id to avoid it showing up in `listwallets`.",
      "created_at": "2020-10-08T14:49:15Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501782793",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501782793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 142,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501796450",
      "pull_request_review_id": 504884510,
      "id": 501796450,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5NjQ1MA==",
      "diff_hunk": "@@ -53,8 +53,74 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            bool table_exists;\n+            // Check that the main table exists\n+            sqlite3_stmt* check_main_stmt;\n+            std::string check_main = \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\";",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "ecc06767e1a91b11179ffb5b70808b69a9c6b552",
      "in_reply_to_id": 498437365,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Had to revert back to this as it is necessary to know whether we are creating the wallet for other stuff.",
      "created_at": "2020-10-08T15:06:38Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501796450",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501796450"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501796568",
      "pull_request_review_id": 504884689,
      "id": 501796568,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5NjU2OA==",
      "diff_hunk": "@@ -146,6 +146,13 @@ SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n \n void SQLiteBatch::Close()\n {\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {",
      "path": "src/wallet/sqlite.cpp",
      "position": 347,
      "original_position": 4,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "d993dee317b93b11296282b9e97fa66e8c5ca152",
      "in_reply_to_id": 501625111,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-08T15:06:48Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501796568",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501796568"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 347,
      "original_line": 347,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501796793",
      "pull_request_review_id": 504885004,
      "id": 501796793,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5Njc5Mw==",
      "diff_hunk": "@@ -221,22 +221,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    res = sqlite3_step(m_read_stmt);",
      "path": "src/wallet/sqlite.cpp",
      "position": 396,
      "original_position": 15,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "fac0cf3d1edff440cdbd19d2615cba701bb4a17d",
      "in_reply_to_id": 501660749,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think that is necessary.",
      "created_at": "2020-10-08T15:07:06Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501796793",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501796793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 396,
      "original_line": 396,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501796843",
      "pull_request_review_id": 504885070,
      "id": 501796843,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5Njg0Mw==",
      "diff_hunk": "@@ -325,16 +325,40 @@ bool SQLiteBatch::HasKey(CDataStream&& key)\n \n bool SQLiteBatch::StartCursor()\n {\n-    return false;\n+    assert(!m_cursor_init);\n+    if (!m_database.m_db) return false;\n+    m_cursor_init = true;\n+    return true;\n }\n \n bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& complete)\n {\n-    return false;\n+    complete = false;\n+\n+    if (!m_cursor_init) return false;\n+\n+    int res = sqlite3_step(m_cursor_stmt);\n+    if (res == SQLITE_DONE) {\n+        complete = true;\n+        return true;\n+    } else if (res != SQLITE_ROW) {\n+        return false;",
      "path": "src/wallet/sqlite.cpp",
      "position": 520,
      "original_position": 23,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "87d8fbfe58c5daa61326f67c228f09e7758ea368",
      "in_reply_to_id": 501667010,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-08T15:07:11Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501796843",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501796843"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 520,
      "original_line": 520,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501796902",
      "pull_request_review_id": 504885158,
      "id": 501796902,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5NjkwMg==",
      "diff_hunk": "@@ -157,7 +157,27 @@ bool SQLiteDatabase::Rewrite(const char* skip)\n \n bool SQLiteDatabase::Backup(const std::string& dest) const\n {\n-    return false;\n+    sqlite3* db_copy;\n+    int res = sqlite3_open(dest.c_str(), &db_copy);\n+    if (res != SQLITE_OK) {\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    sqlite3_backup* backup = sqlite3_backup_init(db_copy, \"main\", m_db, \"main\");\n+    if (!backup) {\n+        sqlite3_close(db_copy);",
      "path": "src/wallet/sqlite.cpp",
      "position": 304,
      "original_position": 13,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "0584828e2a9022d5b548ebda6a9a8329296bcafb",
      "in_reply_to_id": 501668061,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-08T15:07:16Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501796902",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501796902"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 304,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501797166",
      "pull_request_review_id": 504885551,
      "id": 501797166,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5NzE2Ng==",
      "diff_hunk": "@@ -152,7 +152,9 @@ void SQLiteDatabase::Open(const char* mode)\n \n bool SQLiteDatabase::Rewrite(const char* skip)\n {\n-    return false;\n+    // Rewrite the database using the VACUUM command: https://sqlite.org/lang_vacuum.html",
      "path": "src/wallet/sqlite.cpp",
      "position": 288,
      "original_position": 5,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "dfa867392725f999a331404205635ee7a331886f",
      "in_reply_to_id": 501682189,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think that is necessary.",
      "created_at": "2020-10-08T15:07:40Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501797166",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501797166"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 288,
      "original_line": 288,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501797364",
      "pull_request_review_id": 504885818,
      "id": 501797364,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5NzM2NA==",
      "diff_hunk": "@@ -130,6 +131,27 @@ bool SQLiteDatabase::Verify(bilingual_str& error)\n         return false;\n     }\n \n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);",
      "path": "src/wallet/sqlite.cpp",
      "position": 163,
      "original_position": 29,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "810f3de3643cc0330cc8005126e47adf406152d0",
      "in_reply_to_id": 501753764,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this should be fixed now.",
      "created_at": "2020-10-08T15:07:55Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501797364",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501797364"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 163,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501798002",
      "pull_request_review_id": 504886713,
      "id": 501798002,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5ODAwMg==",
      "diff_hunk": "@@ -265,22 +265,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_read_stmt);",
      "path": "src/wallet/sqlite.cpp",
      "position": 392,
      "original_position": 11,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "36ea015032ddf1aa7d424b463c2c6c531d832295",
      "in_reply_to_id": 500720094,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added logging.",
      "created_at": "2020-10-08T15:08:44Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501798002",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501798002"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 392,
      "original_line": 392,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501799116",
      "pull_request_review_id": 504888201,
      "id": 501799116,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5OTExNg==",
      "diff_hunk": "@@ -414,17 +414,23 @@ void SQLiteBatch::CloseCursor()\n \n bool SQLiteBatch::TxnBegin()\n {\n-    return false;\n+    if (!m_database.m_db || sqlite3_get_autocommit(m_database.m_db) == 0) return false;\n+    int res = sqlite3_exec(m_database.m_db, \"BEGIN TRANSACTION\", nullptr, nullptr, nullptr);",
      "path": "src/wallet/sqlite.cpp",
      "position": 542,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "d448c6c362642f24b08b754cb09066ced847f867",
      "in_reply_to_id": 499991129,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> [4e8011a](https://github.com/bitcoin/bitcoin/commit/4e8011a868d10650880cf5c5c01f005bc9fcc402) (maybe for followup): does it make sense to make this a prepared statement?\r\n\r\nNo. There's nothing to prepare.",
      "created_at": "2020-10-08T15:10:12Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501799116",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501799116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 542,
      "original_line": 542,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501869098",
      "pull_request_review_id": 504980287,
      "id": 501869098,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2OTA5OA==",
      "diff_hunk": "@@ -46,6 +52,12 @@ std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(const char* mode, bool\n     return nullptr;\n }\n \n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n+    : m_database(database)\n+{\n+    m_database.Open(mode);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "328ff35370cc30b64006480ccc80418888e1d488",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Constructors, destructors, and relevant private fields for SQLiteDatabase/Batch\" (328ff35370cc30b64006480ccc80418888e1d488)\r\n\r\nIs still keeping this Open call intentional? Should add a comment if so.",
      "created_at": "2020-10-08T16:53:31Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501869098",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501869098"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501872912",
      "pull_request_review_id": 504980287,
      "id": 501872912,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MjkxMg==",
      "diff_hunk": "@@ -457,7 +494,18 @@ bool ExistsSQLiteDatabase(const fs::path& path)\n \n std::unique_ptr<SQLiteDatabase> MakeSQLiteDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error)\n {\n-    return MakeUnique<SQLiteDatabase>(path, path / DATABASE_FILENAME);\n+    fs::path file = path / DATABASE_FILENAME;\n+    try {\n+        auto db = MakeUnique<SQLiteDatabase>(path, file);\n+        if (options.verify && fs::is_regular_file(file) && !db->Verify(error)) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "7f15256fc0bb2216072e8f3394ecad20900f8380",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Constructors, destructors, and relevant private fields for SQLiteDatabase/Batch\" (328ff35370cc30b64006480ccc80418888e1d488)\r\n\r\nIs still keeping this fs::is_regular_file intentional? Should add a comment if so. It seems like the file should already exists at this point, and if it didn't you would probably want to return an error not skip verification.",
      "created_at": "2020-10-08T16:59:25Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501872912",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501872912"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 500,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501929335",
      "pull_request_review_id": 505057040,
      "id": 501929335,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyOTMzNQ==",
      "diff_hunk": "@@ -106,6 +108,28 @@ bool SQLiteDatabase::Verify(bilingual_str& error)\n {\n     assert(m_db);\n \n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt{nullptr};\n+    int ret = sqlite3_prepare_v2(m_db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);",
      "path": "src/wallet/sqlite.cpp",
      "position": 142,
      "original_position": 31,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "4eaffb807d7050dd95a1939585cc4df3caf57118",
      "in_reply_to_id": 501744252,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Accidentally loading a wallet from the wrong network via RPC takes some effort, so I don't mind punting on this :-)",
      "created_at": "2020-10-08T18:30:12Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501929335",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501929335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 142,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501935599",
      "pull_request_review_id": 505065010,
      "id": 501935599,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNTU5OQ==",
      "diff_hunk": "@@ -130,6 +131,27 @@ bool SQLiteDatabase::Verify(bilingual_str& error)\n         return false;\n     }\n \n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);",
      "path": "src/wallet/sqlite.cpp",
      "position": 163,
      "original_position": 29,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "810f3de3643cc0330cc8005126e47adf406152d0",
      "in_reply_to_id": 501753764,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It is",
      "created_at": "2020-10-08T18:40:58Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501935599",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501935599"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 163,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501970123",
      "pull_request_review_id": 505110529,
      "id": 501970123,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk3MDEyMw==",
      "diff_hunk": "@@ -46,6 +52,12 @@ std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(const char* mode, bool\n     return nullptr;\n }\n \n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n+    : m_database(database)\n+{\n+    m_database.Open(mode);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "328ff35370cc30b64006480ccc80418888e1d488",
      "in_reply_to_id": 501869098,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's there to ensure that the database is always open when a `SQLiteBatch` is active. Maybe it would be better to just `assert(m_database.m_db)`?",
      "created_at": "2020-10-08T19:43:21Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501970123",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501970123"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501977103",
      "pull_request_review_id": 505119794,
      "id": 501977103,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk3NzEwMw==",
      "diff_hunk": "@@ -46,6 +52,12 @@ std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(const char* mode, bool\n     return nullptr;\n }\n \n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n+    : m_database(database)\n+{\n+    m_database.Open(mode);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "328ff35370cc30b64006480ccc80418888e1d488",
      "in_reply_to_id": 501869098,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've changed it to assert, along with a comment.",
      "created_at": "2020-10-08T19:57:10Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501977103",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501977103"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501977169",
      "pull_request_review_id": 505119872,
      "id": 501977169,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk3NzE2OQ==",
      "diff_hunk": "@@ -457,7 +494,18 @@ bool ExistsSQLiteDatabase(const fs::path& path)\n \n std::unique_ptr<SQLiteDatabase> MakeSQLiteDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error)\n {\n-    return MakeUnique<SQLiteDatabase>(path, path / DATABASE_FILENAME);\n+    fs::path file = path / DATABASE_FILENAME;\n+    try {\n+        auto db = MakeUnique<SQLiteDatabase>(path, file);\n+        if (options.verify && fs::is_regular_file(file) && !db->Verify(error)) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "7f15256fc0bb2216072e8f3394ecad20900f8380",
      "in_reply_to_id": 501872912,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed.",
      "created_at": "2020-10-08T19:57:16Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501977169",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501977169"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 500,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502863113",
      "pull_request_review_id": 506142382,
      "id": 502863113,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg2MzExMw==",
      "diff_hunk": "@@ -1175,6 +1175,9 @@ fi\n if test x$enable_wallet != xno; then\n     dnl Check for libdb_cxx only if wallet enabled\n     BITCOIN_FIND_BDB48\n+\n+    dnl Check for sqlite3\n+    AC_CHECK_HEADERS([sqlite3.h], [AC_CHECK_LIB([sqlite3], [sqlite3_open], [SQLITE_LIBS=-lsqlite3], [AC_MSG_ERROR(sqlite3_open missing from libsqlite3)], [-pthread -lpthread])], [AC_MSG_ERROR(sqlite3.h headers missing)])",
      "path": "configure.ac",
      "position": null,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "5fc97fa479136e61e8869b77ba731900c3233fcf",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "5fc97fa479136e61e8869b77ba731900c3233fcf, why not using `pkg config`:\r\n```suggestion\r\n    PKG_CHECK_MODULES([SQLITE], [sqlite3],, [AC_MSG_ERROR([sqlite3 not found.])])\r\n```\r\n?",
      "created_at": "2020-10-11T04:16:51Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502863113",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502863113"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502864150",
      "pull_request_review_id": 506142382,
      "id": 502864150,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg2NDE1MA==",
      "diff_hunk": "@@ -10,7 +10,8 @@ qt_android_packages=qt\n qt_darwin_packages=qt\n qt_mingw32_packages=qt\n \n-wallet_packages=bdb\n+bdb_packages=bdb\n+sqlite_packages=sqlite",
      "path": "depends/packages/packages.mk",
      "position": 6,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "bd18fe80cacc25054c561aa8460752b59be0a78c",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "bd18fe80cacc25054c561aa8460752b59be0a78c\r\nnit: Spaces around `=` could improve readability (here and in other files in this commit):\r\n```suggestion\r\nbdb_packages = bdb\r\nsqlite_packages = sqlite\r\n```",
      "created_at": "2020-10-11T04:33:35Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502864150",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502864150"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": 13,
      "original_start_line": 13,
      "start_side": "RIGHT",
      "line": 14,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502865334",
      "pull_request_review_id": 506142382,
      "id": 502865334,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg2NTMzNA==",
      "diff_hunk": "@@ -0,0 +1,26 @@\n+package=sqlite\n+$(package)_version=3320100\n+$(package)_download_path=https://sqlite.org/2020/\n+$(package)_file_name=sqlite-autoconf-$($(package)_version).tar.gz\n+$(package)_sha256_hash=486748abfb16abd8af664e3a5f03b228e5f124682b0c942e157644bf6fff7d10\n+\n+define $(package)_set_vars\n+$(package)_config_opts=--disable-shared --disable-readline --disable-dynamic-extensions --enable-option-checking\n+$(package)_config_opts_linux=--with-pic\n+endef\n+\n+define $(package)_config_cmds\n+  $($(package)_autoconf)\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE) libsqlite3.la\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install-libLTLIBRARIES install-includeHEADERS install-pkgconfigDATA\n+endef\n+\n+define $(package)_postprocess_cmds\n+  rm -rf bin share lib/*.la",
      "path": "depends/packages/sqlite.mk",
      "position": null,
      "original_position": 25,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "bd18fe80cacc25054c561aa8460752b59be0a78c",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "bd18fe80cacc25054c561aa8460752b59be0a78c\r\nAs `libsqlite3.la` is the only target, `bin` and `share` subdirs are not created:\r\n```suggestion\r\n  rm lib/*.la\r\n```",
      "created_at": "2020-10-11T04:51:26Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502865334",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502865334"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502865572",
      "pull_request_review_id": 506142382,
      "id": 502865572,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg2NTU3Mg==",
      "diff_hunk": "@@ -79,7 +79,7 @@ compiled in `disable-wallet` mode with:\n ./configure --disable-wallet\n ```\n \n-In this case there is no dependency on Berkeley DB 4.8.\n+In this case there is no dependency on Berkeley DB 4.8 or on sqlite.",
      "path": "doc/build-osx.md",
      "position": null,
      "original_position": 14,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "05c427a0654d2fe0907d8a755e74a2e2d0a51f07",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "05c427a0654d2fe0907d8a755e74a2e2d0a51f07\r\nnit: Could make the wording consistent with other OS build docs (e.g., `doc/build-unix.md`):\r\n```suggestion\r\nIn this case there is no dependency on Berkeley DB 4.8 and SQLite3.\r\n```",
      "created_at": "2020-10-11T04:55:01Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502865572",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502865572"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502865841",
      "pull_request_review_id": 506142382,
      "id": 502865841,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg2NTg0MQ==",
      "diff_hunk": "@@ -91,6 +92,10 @@ pass `--with-incompatible-bdb` to configure.\n \n Otherwise, you can build from self-compiled `depends` (see above).\n \n+SQLite3 is required for the wallet:\n+\n+    sudo apt-get install libsqlite3-dev",
      "path": "doc/build-unix.md",
      "position": null,
      "original_position": 14,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "05c427a0654d2fe0907d8a755e74a2e2d0a51f07",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "05c427a0654d2fe0907d8a755e74a2e2d0a51f07\r\nnit: As this doc is for human, I'd prefer:\r\n```suggestion\r\n    sudo apt install libsqlite3-dev\r\n```\r\n\r\nFor Fedora the following works:\r\n```\r\nsudo dnf install sqlite-devel\r\n```",
      "created_at": "2020-10-11T04:59:44Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502865841",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502865841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502866026",
      "pull_request_review_id": 506142382,
      "id": 502866026,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg2NjAyNg==",
      "diff_hunk": "@@ -25,6 +25,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | xkbcommon |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) (Linux only) |\n | ZeroMQ | [4.3.1](https://github.com/zeromq/libzmq/releases) | 4.0.0 | No |  |  |\n | zlib | [1.2.11](https://zlib.net/) |  |  |  | No |\n+| SQLite 3 | [3.32.1](https://sqlite.org/download.html) |  |  |  |  |",
      "path": "doc/dependencies.md",
      "position": null,
      "original_position": 4,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "05c427a0654d2fe0907d8a755e74a2e2d0a51f07",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "05c427a0654d2fe0907d8a755e74a2e2d0a51f07\r\n1. Mind keeping the lexicographic order?\r\n\r\n2. Why minimum version is not mentioned?",
      "created_at": "2020-10-11T05:01:51Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502866026",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502866026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502866675",
      "pull_request_review_id": 506142382,
      "id": 502866675,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg2NjY3NQ==",
      "diff_hunk": "@@ -70,7 +70,7 @@ Subdirectory | File(s)           | Description\n -------------|-------------------|------------\n `database/`  | BDB logging files | Part of BDB environment; created at start and deleted on shutdown; a user *must keep it as safe* as personal wallet `wallet.dat`\n `./`         | `db.log`          | BDB error file\n-`./`         | `wallet.dat`      | Personal wallet (BDB) with keys and transactions\n+`./`         | `wallet.dat`      | Personal wallet with keys and transactions. May be either a BDB or SQLite3 database file.",
      "path": "doc/files.md",
      "position": null,
      "original_position": 5,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "05c427a0654d2fe0907d8a755e74a2e2d0a51f07",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "05c427a0654d2fe0907d8a755e74a2e2d0a51f07\r\n```suggestion\r\n`./`         | `wallet.dat`      | Personal wallet with keys and transactions. May be either a Berkeley DB or SQLite3 database file\r\n```",
      "created_at": "2020-10-11T05:12:21Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502866675",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502866675"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502867317",
      "pull_request_review_id": 506144683,
      "id": 502867317,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg2NzMxNw==",
      "diff_hunk": "@@ -182,6 +182,14 @@ SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n \n void SQLiteBatch::Close()\n {\n+    // If m_db is in a transaction (i.e. not in autocommit mode), then abort the transaction in progress\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        if (TxnAbort()) {\n+            LogPrintf(\"SQLiteBatch: Batch closed unexpectedly without the transaction being explicitly commited or aborted\\n\");",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "011fa1e2657d624593bb7f23f697a741f7b51577",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "011fa1e2657d624593bb7f23f697a741f7b51577, typo:\r\n```suggestion\r\n            LogPrintf(\"SQLiteBatch: Batch closed unexpectedly without the transaction being explicitly committed or aborted\\n\");\r\n```",
      "created_at": "2020-10-11T05:21:31Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502867317",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502867317"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502868538",
      "pull_request_review_id": 506145409,
      "id": 502868538,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg2ODUzOA==",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    /* No-op. See commeng on SQLiteDatabase::Flush */\n+    void Flush() override {}\n+\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 47,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "1a2eec03f0dc7731d5c199a97db148534ce174a2",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1a2eec03f0dc7731d5c199a97db148534ce174a2\r\n```suggestion\r\n    const bool m_mock{false};\r\n```",
      "created_at": "2020-10-11T05:39:08Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502868538",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502868538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502868724",
      "pull_request_review_id": 506145409,
      "id": 502868724,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg2ODcyNA==",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    /* No-op. See commeng on SQLiteDatabase::Flush */\n+    void Flush() override {}\n+\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 57,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "1a2eec03f0dc7731d5c199a97db148534ce174a2",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1a2eec03f0dc7731d5c199a97db148534ce174a2, nit -- style:\r\n```suggestion\r\n    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock = false);\r\n```",
      "created_at": "2020-10-11T05:41:24Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502868724",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502868724"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502868799",
      "pull_request_review_id": 506145409,
      "id": 502868799,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg2ODc5OQ==",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    /* No-op. See commeng on SQLiteDatabase::Flush */\n+    void Flush() override {}\n+\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /* These functions are unused */\n+    void AddRef() override { assert(false); }\n+    void RemoveRef() override { assert(false); }\n+\n+    /** Rewrite the entire database on disk */\n+    bool Rewrite(const char* skip=nullptr) override;",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 72,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "1a2eec03f0dc7731d5c199a97db148534ce174a2",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1a2eec03f0dc7731d5c199a97db148534ce174a2, nit -- style:\r\n```suggestion\r\n    bool Rewrite(const char* skip = nullptr) override;\r\n```",
      "created_at": "2020-10-11T05:42:23Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502868799",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502868799"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502869040",
      "pull_request_review_id": 506145409,
      "id": 502869040,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg2OTA0MA==",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 19,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "1a2eec03f0dc7731d5c199a97db148534ce174a2",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1a2eec03f0dc7731d5c199a97db148534ce174a2\r\n```suggestion\r\n    const bool m_read_only{false};\r\n```",
      "created_at": "2020-10-11T05:45:58Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502869040",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502869040"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502869093",
      "pull_request_review_id": 506145409,
      "id": 502869093,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg2OTA5Mw==",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 22,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "1a2eec03f0dc7731d5c199a97db148534ce174a2",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1a2eec03f0dc7731d5c199a97db148534ce174a2, nit -- style:\r\n```suggestion\r\n    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite = true) override;\r\n```",
      "created_at": "2020-10-11T05:46:44Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502869093",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502869093"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502870437",
      "pull_request_review_id": 506146538,
      "id": 502870437,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3MDQzNw==",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "1a2eec03f0dc7731d5c199a97db148534ce174a2",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1a2eec03f0dc7731d5c199a97db148534ce174a2, `clang-format` suggests\r\n```suggestion\r\nSQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock)\r\n    : WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\r\n```",
      "created_at": "2020-10-11T06:04:29Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502870437",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502870437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": 16,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502872200",
      "pull_request_review_id": 506147626,
      "id": 502872200,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3MjIwMA==",
      "diff_hunk": "@@ -53,6 +53,8 @@ class SQLiteDatabase : public WalletDatabase\n \n     const std::string m_file_path;\n \n+    void Cleanup();",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 4,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "70a2c658549c8a0caa3e58dcc7894d2bb8872cd5",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "70a2c658549c8a0caa3e58dcc7894d2bb8872cd5\r\n```suggestion\r\n    void Cleanup() noexcept;\r\n```",
      "created_at": "2020-10-11T06:26:01Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502872200",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502872200"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502872272",
      "pull_request_review_id": 506147626,
      "id": 502872272,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3MjI3Mg==",
      "diff_hunk": "@@ -15,18 +16,66 @@\n \n static const char* DATABASE_FILENAME = \"wallet.dat\";\n \n+static Mutex g_sqlite_mutex;\n+static int g_sqlite_count GUARDED_BY(g_sqlite_mutex) = 0;\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    // From sqlite3_config() documentation for the SQLITE_CONFIG_LOG option:\n+    // \"The void pointer that is the second argument to SQLITE_CONFIG_LOG is passed through as\n+    // the first parameter to the application-defined logger function whenever that function is\n+    // invoked.\"\n+    // Assert that this is the case:\n+    assert(arg == nullptr);\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n     WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n {\n-    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n-    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n-\n-    Open(\"\"); // mode is unused\n+    {\n+        LOCK(g_sqlite_mutex);\n+        LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+        LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+        if (++g_sqlite_count == 1) {\n+            // Setup logging\n+            int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+        int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    try {\n+        Open(\"\"); // mode is unused\n+    } catch (const std::runtime_error& e) {\n+        // If open fails, cleanup this object and rethrow the exception\n+        Cleanup();\n+        throw;\n+    }\n }\n \n SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Cleanup();\n+}\n+\n+void SQLiteDatabase::Cleanup()",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "70a2c658549c8a0caa3e58dcc7894d2bb8872cd5",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "70a2c658549c8a0caa3e58dcc7894d2bb8872cd5\r\n```suggestion\r\nvoid SQLiteDatabase::Cleanup() noexcept\r\n```",
      "created_at": "2020-10-11T06:26:40Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502872272",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502872272"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502873114",
      "pull_request_review_id": 506147626,
      "id": 502873114,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3MzExNA==",
      "diff_hunk": "@@ -15,18 +16,66 @@\n \n static const char* DATABASE_FILENAME = \"wallet.dat\";\n \n+static Mutex g_sqlite_mutex;\n+static int g_sqlite_count GUARDED_BY(g_sqlite_mutex) = 0;\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    // From sqlite3_config() documentation for the SQLITE_CONFIG_LOG option:\n+    // \"The void pointer that is the second argument to SQLITE_CONFIG_LOG is passed through as\n+    // the first parameter to the application-defined logger function whenever that function is\n+    // invoked.\"\n+    // Assert that this is the case:\n+    assert(arg == nullptr);",
      "path": "src/wallet/sqlite.cpp",
      "position": 33,
      "original_position": 22,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "70a2c658549c8a0caa3e58dcc7894d2bb8872cd5",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "70a2c658549c8a0caa3e58dcc7894d2bb8872cd5\r\nnit: Maybe use (here and in other commits) the new `Assert` (#19277,  #19491)?",
      "created_at": "2020-10-11T06:35:40Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502873114",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502873114"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 33,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502873626",
      "pull_request_review_id": 506148599,
      "id": 502873626,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3MzYyNg==",
      "diff_hunk": "@@ -80,6 +81,72 @@ void SQLiteDatabase::Cleanup()\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    int flags = SQLITE_OPEN_FULLMUTEX | SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE;\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        TryCreateDirectories(m_dir_path);\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &m_db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+",
      "path": "src/wallet/sqlite.cpp",
      "position": 215,
      "original_position": 24,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "6720df53bd5d4e551c101743c4050bd0c7682238",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "6720df53bd5d4e551c101743c4050bd0c7682238\r\n`Assert(m_db);` ?",
      "created_at": "2020-10-11T06:41:41Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502873626",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502873626"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 215,
      "original_line": 215,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502874011",
      "pull_request_review_id": 506148599,
      "id": 502874011,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3NDAxMQ==",
      "diff_hunk": "@@ -80,6 +81,72 @@ void SQLiteDatabase::Cleanup()\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    int flags = SQLITE_OPEN_FULLMUTEX | SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE;\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        TryCreateDirectories(m_dir_path);\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &m_db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    if (sqlite3_db_readonly(m_db, \"main\") != 0) {\n+        throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+    }\n+\n+    // Acquire an exclusive lock on the database\n+    // First change the locking mode to exclusive\n+    int ret = sqlite3_exec(m_db, \"PRAGMA locking_mode = exclusive\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to change database locking mode to exclusive: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    // Now begin a transaction to acquire the exclusive lock. This lock won't be released until we close because of the exclusive locking mode.\n+    ret = sqlite3_exec(m_db, \"BEGIN EXCLUSIVE TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(\"SQLiteDatabase: Unable to obtain an exclusive lock on the database, is it being used by another bitcoind?\\n\");\n+    }\n+    ret = sqlite3_exec(m_db, \"COMMIT\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to end exclusive lock transaction: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Make the table for our key-value pairs\n+    // First check that the main table exists\n+    bool table_exists;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "6720df53bd5d4e551c101743c4050bd0c7682238",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "6720df53bd5d4e551c101743c4050bd0c7682238\r\nnit: Mind moving the `table_exists` declaration 9 lines down to its first usage?",
      "created_at": "2020-10-11T06:45:55Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502874011",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502874011"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502875497",
      "pull_request_review_id": 506149918,
      "id": 502875497,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3NTQ5Nw==",
      "diff_hunk": "@@ -61,6 +61,42 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     }\n }\n \n+void SQLiteBatch::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "83952c59940e4b03bf63b48c0f83b460f988d4be",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "83952c59940e4b03bf63b48c0f83b460f988d4be\r\nWhy not declare all strings as `const char* const` and drop all of the following `c_str` conversions?",
      "created_at": "2020-10-11T07:02:03Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502875497",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502875497"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": 66,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502875831",
      "pull_request_review_id": 506150165,
      "id": 502875831,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3NTgzMQ==",
      "diff_hunk": "@@ -192,7 +192,29 @@ bool SQLiteDatabase::Rewrite(const char* skip)\n \n bool SQLiteDatabase::Backup(const std::string& dest) const\n {\n-    return false;\n+    sqlite3* db_copy;\n+    int res = sqlite3_open(dest.c_str(), &db_copy);\n+    if (res != SQLITE_OK) {\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    sqlite3_backup* backup = sqlite3_backup_init(db_copy, \"main\", m_db, \"main\");\n+    if (!backup) {\n+        LogPrintf(\"SQLiteDatabase::Backup: Unable to begin backup: %s\\n\", sqlite3_errmsg(m_db));",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "8eee65c46d3b897fca9e07b092f3714e3bcdb79e",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "8eee65c46d3b897fca9e07b092f3714e3bcdb79e\r\n```suggestion\r\n        LogPrintf(\"%s: Unable to begin backup: %s\\n\", __func__, sqlite3_errmsg(m_db));\r\n```",
      "created_at": "2020-10-11T07:06:01Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502875831",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502875831"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 203,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502875988",
      "pull_request_review_id": 506150165,
      "id": 502875988,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3NTk4OA==",
      "diff_hunk": "@@ -192,7 +192,29 @@ bool SQLiteDatabase::Rewrite(const char* skip)\n \n bool SQLiteDatabase::Backup(const std::string& dest) const\n {\n-    return false;\n+    sqlite3* db_copy;\n+    int res = sqlite3_open(dest.c_str(), &db_copy);\n+    if (res != SQLITE_OK) {\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    sqlite3_backup* backup = sqlite3_backup_init(db_copy, \"main\", m_db, \"main\");\n+    if (!backup) {\n+        LogPrintf(\"SQLiteDatabase::Backup: Unable to begin backup: %s\\n\", sqlite3_errmsg(m_db));\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    // Copy all of the pages using -1\n+    res = sqlite3_backup_step(backup, -1);\n+    if (res != SQLITE_DONE) {\n+        LogPrintf(\"SQLiteDatabase::Backup: Unable to backup: %s\\n\", sqlite3_errstr(res));",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "8eee65c46d3b897fca9e07b092f3714e3bcdb79e",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "8eee65c46d3b897fca9e07b092f3714e3bcdb79e\r\n```suggestion\r\n        LogPrintf(\"%s: Unable to backup: %s\\n\", __func__, sqlite3_errstr(res));\r\n```",
      "created_at": "2020-10-11T07:07:52Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502875988",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502875988"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502876560",
      "pull_request_review_id": 506150721,
      "id": 502876560,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3NjU2MA==",
      "diff_hunk": "@@ -472,7 +509,19 @@ bool ExistsSQLiteDatabase(const fs::path& path)\n \n std::unique_ptr<SQLiteDatabase> MakeSQLiteDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error)\n {\n-    return MakeUnique<SQLiteDatabase>(path, path / DATABASE_FILENAME);\n+    fs::path file = path / DATABASE_FILENAME;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c3aeda3d2f7d7b34b8a35ccea478161b0ca2c80d",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "c3aeda3d2f7d7b34b8a35ccea478161b0ca2c80d, nit\r\n```suggestion\r\n    const fs::path file = path / DATABASE_FILENAME;\r\n```",
      "created_at": "2020-10-11T07:14:32Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502876560",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502876560"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 512,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502877051",
      "pull_request_review_id": 506150721,
      "id": 502877051,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3NzA1MQ==",
      "diff_hunk": "@@ -115,6 +115,43 @@ void SQLiteDatabase::Cleanup()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    assert(m_db);\n+\n+    sqlite3_stmt* stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare statement to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to execute statement to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to read database verification error: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        if (error.original.empty()) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c3aeda3d2f7d7b34b8a35ccea478161b0ca2c80d",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "c3aeda3d2f7d7b34b8a35ccea478161b0ca2c80d\r\n```suggestion\r\n        if (error.empty()) {\r\n```",
      "created_at": "2020-10-11T07:19:42Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502877051",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502877051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 191,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502877212",
      "pull_request_review_id": 506150721,
      "id": 502877212,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3NzIxMg==",
      "diff_hunk": "@@ -115,6 +115,43 @@ void SQLiteDatabase::Cleanup()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    assert(m_db);\n+\n+    sqlite3_stmt* stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare statement to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to execute statement to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to read database verification error: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        if (error.original.empty()) {\n+            error = _(\"Failed to verify database\\n\");",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c3aeda3d2f7d7b34b8a35ccea478161b0ca2c80d",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "c3aeda3d2f7d7b34b8a35ccea478161b0ca2c80d\r\n\r\nIs it needed to include `\\n` into translatable string?",
      "created_at": "2020-10-11T07:21:16Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502877212",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502877212"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502878069",
      "pull_request_review_id": 506150721,
      "id": 502878069,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3ODA2OQ==",
      "diff_hunk": "@@ -115,6 +115,43 @@ void SQLiteDatabase::Cleanup()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    assert(m_db);\n+\n+    sqlite3_stmt* stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare statement to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to execute statement to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);",
      "path": "src/wallet/sqlite.cpp",
      "position": 183,
      "original_position": 23,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c3aeda3d2f7d7b34b8a35ccea478161b0ca2c80d",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "c3aeda3d2f7d7b34b8a35ccea478161b0ca2c80d\r\n```suggestion\r\n        const char* msg = reinterpret_cast<const char*>(sqlite3_column_text(stmt, 0));\r\n```",
      "created_at": "2020-10-11T07:30:36Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502878069",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502878069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 183,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502878352",
      "pull_request_review_id": 506150721,
      "id": 502878352,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3ODM1Mg==",
      "diff_hunk": "@@ -259,22 +259,117 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch::ReadKey: Unable to bind read statement :%s\\n\", sqlite3_errstr(res));\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    res = sqlite3_step(m_read_stmt);\n+    if (res != SQLITE_ROW) {\n+        LogPrintf(\"SQLiteBatch::ReadKey: Unable to execute read statement :%s\\n\", sqlite3_errstr(res));\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    // Leftmost column in result is index 0\n+    const char* data = (const char*)sqlite3_column_blob(m_read_stmt, 0);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "14b81e521c310cb616b7920b5625b704ef1e1899",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "14b81e521c310cb616b7920b5625b704ef1e1899\r\n```suggestion\r\n    const char* data = reinterpret_cast<const char*>(sqlite3_column_blob(m_read_stmt, 0));\r\n```",
      "created_at": "2020-10-11T07:33:39Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502878352",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502878352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 281,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502878458",
      "pull_request_review_id": 506150721,
      "id": 502878458,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3ODQ1OA==",
      "diff_hunk": "@@ -374,16 +374,41 @@ bool SQLiteBatch::HasKey(CDataStream&& key)\n \n bool SQLiteBatch::StartCursor()\n {\n-    return false;\n+    assert(!m_cursor_init);\n+    if (!m_database.m_db) return false;\n+    m_cursor_init = true;\n+    return true;\n }\n \n bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& complete)\n {\n-    return false;\n+    complete = false;\n+\n+    if (!m_cursor_init) return false;\n+\n+    int res = sqlite3_step(m_cursor_stmt);\n+    if (res == SQLITE_DONE) {\n+        complete = true;\n+        return true;\n+    } else if (res != SQLITE_ROW) {\n+        LogPrintf(\"SQLiteBatch::ReadAtCursor: Unable to execute cursor step: %s\\n\", sqlite3_errstr(res));\n+        return false;\n+    }\n+\n+    // Leftmost column in result is index 0\n+    const char* key_data = (const char*)sqlite3_column_blob(m_cursor_stmt, 0);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "293bdfcdc1825e1b288ee09584cf26979a4d5900",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "293bdfcdc1825e1b288ee09584cf26979a4d5900\r\n```suggestion\r\n    const char* key_data = reinterpret_cast<const char*>(sqlite3_column_blob(m_cursor_stmt, 0));\r\n```",
      "created_at": "2020-10-11T07:34:54Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502878458",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502878458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 399,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502878520",
      "pull_request_review_id": 506150721,
      "id": 502878520,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3ODUyMA==",
      "diff_hunk": "@@ -374,16 +374,41 @@ bool SQLiteBatch::HasKey(CDataStream&& key)\n \n bool SQLiteBatch::StartCursor()\n {\n-    return false;\n+    assert(!m_cursor_init);\n+    if (!m_database.m_db) return false;\n+    m_cursor_init = true;\n+    return true;\n }\n \n bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& complete)\n {\n-    return false;\n+    complete = false;\n+\n+    if (!m_cursor_init) return false;\n+\n+    int res = sqlite3_step(m_cursor_stmt);\n+    if (res == SQLITE_DONE) {\n+        complete = true;\n+        return true;\n+    } else if (res != SQLITE_ROW) {\n+        LogPrintf(\"SQLiteBatch::ReadAtCursor: Unable to execute cursor step: %s\\n\", sqlite3_errstr(res));\n+        return false;\n+    }\n+\n+    // Leftmost column in result is index 0\n+    const char* key_data = (const char*)sqlite3_column_blob(m_cursor_stmt, 0);\n+    int key_data_size = sqlite3_column_bytes(m_cursor_stmt, 0);\n+    key.write(key_data, key_data_size);\n+    const char* value_data = (const char*)sqlite3_column_blob(m_cursor_stmt, 1);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "293bdfcdc1825e1b288ee09584cf26979a4d5900",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "293bdfcdc1825e1b288ee09584cf26979a4d5900\r\n```suggestion\r\n    const char* value_data = reinterpret_cast<const char*>(sqlite3_column_blob(m_cursor_stmt, 1));\r\n```",
      "created_at": "2020-10-11T07:35:29Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502878520",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502878520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 402,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502879435",
      "pull_request_review_id": 506152896,
      "id": 502879435,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3OTQzNQ==",
      "diff_hunk": "@@ -505,7 +505,8 @@ bool SQLiteBatch::TxnAbort()\n \n bool ExistsSQLiteDatabase(const fs::path& path)\n {\n-    return false;\n+    fs::path file = path / DATABASE_FILENAME;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c4b6cf7ed72490df24a2e2d28d947002f3e6ef16",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "c4b6cf7ed72490df24a2e2d28d947002f3e6ef16\r\n```suggestion\r\n    const fs::path file = path / DATABASE_FILENAME;\r\n```",
      "created_at": "2020-10-11T07:44:36Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502879435",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502879435"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 508,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502880353",
      "pull_request_review_id": 506152896,
      "id": 502880353,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg4MDM1Mw==",
      "diff_hunk": "@@ -1011,6 +1012,14 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n         if (ExistsBerkeleyDatabase(path)) {\n             format = DatabaseFormat::BERKELEY;\n         }\n+        if (ExistsSQLiteDatabase(path)) {\n+            if (format) {\n+                error = Untranslated(strprintf(\"Failed to load database path '%s'. Data is in ambiguous format.\", path.string()));",
      "path": "src/wallet/walletdb.cpp",
      "position": 14,
      "original_position": 14,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c4b6cf7ed72490df24a2e2d28d947002f3e6ef16",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "c4b6cf7ed72490df24a2e2d28d947002f3e6ef16\r\n\r\nDrop `Untranslated`? I don't think we should mimic the code around here.",
      "created_at": "2020-10-11T07:53:04Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502880353",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502880353"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1017,
      "original_line": 1017,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502881270",
      "pull_request_review_id": 506152896,
      "id": 502881270,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg4MTI3MA==",
      "diff_hunk": "@@ -1029,6 +1038,20 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n         return nullptr;\n     }\n \n+    // A db already exists so format is set, but options also specifies the format, so make sure they agree\n+    if (format && options.require_format && *format != options.require_format) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c4b6cf7ed72490df24a2e2d28d947002f3e6ef16",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "c4b6cf7ed72490df24a2e2d28d947002f3e6ef16\r\n\r\nWe could skip access to `format` value:\r\n```suggestion\r\n    if (format && options.require_format && format != options.require_format) {\r\n```",
      "created_at": "2020-10-11T08:02:01Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502881270",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502881270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1042,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502882199",
      "pull_request_review_id": 506154917,
      "id": 502882199,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg4MjE5OQ==",
      "diff_hunk": "@@ -8,6 +8,7 @@\n #include <util/system.h>\n \n bool ExistsBerkeleyDatabase(const fs::path& path);\n+bool ExistsSQLiteDatabase(const fs::path& path);",
      "path": "src/wallet/walletutil.cpp",
      "position": 5,
      "original_position": 4,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "5f17c73e8b890c92d2dc74e0e3bb34d217bc5160",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "5f17c73e8b890c92d2dc74e0e3bb34d217bc5160\r\n\r\nWhy add another declaration instead of `#include <wallet/sqlite.h>`?",
      "created_at": "2020-10-11T08:10:22Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502882199",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502882199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 11,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502882710",
      "pull_request_review_id": 506154917,
      "id": 502882710,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg4MjcxMA==",
      "diff_hunk": "@@ -119,6 +121,28 @@ bool SQLiteDatabase::Verify(bilingual_str& error)\n {\n     assert(m_db);\n \n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt{nullptr};\n+    int ret = sqlite3_prepare_v2(m_db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "87e2d29baca9d08e90ed401bf360b9b7e866c62c",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "87e2d29baca9d08e90ed401bf360b9b7e866c62c\r\n```suggestion\r\n    uint32_t app_id = static_cast<uint32_t>(sqlite3_column_int(app_id_stmt, 0));\r\n```",
      "created_at": "2020-10-11T08:15:33Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502882710",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502882710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502882955",
      "pull_request_review_id": 506154917,
      "id": 502882955,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg4Mjk1NQ==",
      "diff_hunk": "@@ -219,6 +243,14 @@ void SQLiteDatabase::Open(const char* mode)\n         if (ret != SQLITE_OK) {\n             throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to enable fullfsync: %s\\n\", sqlite3_errstr(ret)));\n         }\n+\n+        // Set the application id\n+        uint32_t app_id = ReadBE32(Params().MessageStart());\n+        std::string set_app_id = strprintf(\"PRAGMA application_id = %d\", (int32_t)app_id);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "87e2d29baca9d08e90ed401bf360b9b7e866c62c",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "87e2d29baca9d08e90ed401bf360b9b7e866c62c\r\n```suggestion\r\n        std::string set_app_id = strprintf(\"PRAGMA application_id = %d\", static_cast<int32_t>(app_id));\r\n```",
      "created_at": "2020-10-11T08:18:22Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502882955",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502882955"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 249,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502883560",
      "pull_request_review_id": 506154917,
      "id": 502883560,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg4MzU2MA==",
      "diff_hunk": "@@ -18,6 +18,7 @@\n #include <stdint.h>\n \n static const char* DATABASE_FILENAME = \"wallet.dat\";\n+static const int32_t WALLET_SCHEMA_VERSION = 0;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "10ceb039e8361d91a9169da8f68872ad4b564403",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "10ceb039e8361d91a9169da8f68872ad4b564403\r\n```suggestion\r\nstatic constexpr int32_t WALLET_SCHEMA_VERSION = 0;\r\n```",
      "created_at": "2020-10-11T08:24:55Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502883560",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502883560"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502884016",
      "pull_request_review_id": 506154917,
      "id": 502884016,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg4NDAxNg==",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "1a2eec03f0dc7731d5c199a97db148534ce174a2",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1a2eec03f0dc7731d5c199a97db148534ce174a2\r\n```suggestion\r\nstatic const char* const DATABASE_FILENAME = \"wallet.dat\";\r\n```",
      "created_at": "2020-10-11T08:29:35Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502884016",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502884016"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502884857",
      "pull_request_review_id": 506156951,
      "id": 502884857,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg4NDg1Nw==",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    /* No-op. See commeng on SQLiteDatabase::Flush */\n+    void Flush() override {}\n+\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 35,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "1a2eec03f0dc7731d5c199a97db148534ce174a2",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: names here are not per style guideline and do not match the .cpp file",
      "created_at": "2020-10-11T08:38:19Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502884857",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502884857"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502888684",
      "pull_request_review_id": 506159925,
      "id": 502888684,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg4ODY4NA==",
      "diff_hunk": "@@ -0,0 +1,632 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <sync.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+static Mutex g_sqlite_mutex;\n+static int g_sqlite_count GUARDED_BY(g_sqlite_mutex) = 0;\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    // From sqlite3_config() documentation for the SQLITE_CONFIG_LOG option:\n+    // \"The void pointer that is the second argument to SQLITE_CONFIG_LOG is passed through as\n+    // the first parameter to the application-defined logger function whenever that function is\n+    // invoked.\"\n+    // Assert that this is the case:\n+    assert(arg == nullptr);\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    {\n+        LOCK(g_sqlite_mutex);\n+        LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+        LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+        if (++g_sqlite_count == 1) {\n+            // Setup logging\n+            int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            // Force serialized threading mode\n+            ret = sqlite3_config(SQLITE_CONFIG_SERIALIZED);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to configure serialized threading mode: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+        int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    try {\n+        Open(\"\"); // mode is unused\n+    } catch (const std::runtime_error& e) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "e680b23e22b1c15ee8e42a375a68248e821f76eb",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\nmsbuild /p:TrackFileAccess=false build_msvc\\bitcoin.sln /m /v:q /nologo\r\nC:\\projects\\bitcoin\\src\\wallet\\sqlite.cpp(65,40): error C2220: the following warning is treated as an error [C:\\projects\\bitcoin\\build_msvc\\libbitcoin_wallet\\libbitcoin_wallet.vcxproj]\r\nC:\\projects\\bitcoin\\src\\wallet\\sqlite.cpp(65,40): warning C4101: 'e': unreferenced local variable [C:\\projects\\bitcoin\\build_msvc\\libbitcoin_wallet\\libbitcoin_wallet.vcxproj]\r\nCommand exited with code 1",
      "created_at": "2020-10-11T09:13:30Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502888684",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502888684"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502889094",
      "pull_request_review_id": 506156951,
      "id": 502889094,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg4OTA5NA==",
      "diff_hunk": "@@ -80,6 +81,72 @@ void SQLiteDatabase::Cleanup()\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    int flags = SQLITE_OPEN_FULLMUTEX | SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE;\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        TryCreateDirectories(m_dir_path);\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &m_db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    if (sqlite3_db_readonly(m_db, \"main\") != 0) {\n+        throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+    }\n+\n+    // Acquire an exclusive lock on the database\n+    // First change the locking mode to exclusive\n+    int ret = sqlite3_exec(m_db, \"PRAGMA locking_mode = exclusive\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to change database locking mode to exclusive: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    // Now begin a transaction to acquire the exclusive lock. This lock won't be released until we close because of the exclusive locking mode.\n+    ret = sqlite3_exec(m_db, \"BEGIN EXCLUSIVE TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(\"SQLiteDatabase: Unable to obtain an exclusive lock on the database, is it being used by another bitcoind?\\n\");\n+    }\n+    ret = sqlite3_exec(m_db, \"COMMIT\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to end exclusive lock transaction: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Make the table for our key-value pairs\n+    // First check that the main table exists\n+    bool table_exists;\n+    sqlite3_stmt* check_main_stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\", -1, &check_main_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to prepare statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    ret = sqlite3_step(check_main_stmt);\n+    if (sqlite3_finalize(check_main_stmt) != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to finalize statement checking table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    if (ret == SQLITE_DONE) {\n+        table_exists = false;\n+    } else if (ret == SQLITE_ROW) {\n+        table_exists = true;\n+    } else {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to execute statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Do the db setup things because the table doesn't exist only when we are creating a new wallet\n+    if (!table_exists) {\n+        ret = sqlite3_exec(m_db, \"CREATE TABLE main(key BLOB PRIMARY KEY NOT NULL, value BLOB NOT NULL)\", nullptr, nullptr, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        // Enable fullfysnc for the platforms that use it",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "6720df53bd5d4e551c101743c4050bd0c7682238",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: fullfsync",
      "created_at": "2020-10-11T09:16:56Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502889094",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502889094"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502891009",
      "pull_request_review_id": 506156951,
      "id": 502891009,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg5MTAwOQ==",
      "diff_hunk": "@@ -259,22 +259,117 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch::ReadKey: Unable to bind read statement :%s\\n\", sqlite3_errstr(res));\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    res = sqlite3_step(m_read_stmt);\n+    if (res != SQLITE_ROW) {\n+        LogPrintf(\"SQLiteBatch::ReadKey: Unable to execute read statement :%s\\n\", sqlite3_errstr(res));\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    // Leftmost column in result is index 0\n+    const char* data = (const char*)sqlite3_column_blob(m_read_stmt, 0);\n+    int data_size = sqlite3_column_bytes(m_read_stmt, 0);\n+    value.write(data, data_size);\n+\n+    sqlite3_clear_bindings(m_read_stmt);\n+    sqlite3_reset(m_read_stmt);\n+    return true;\n }\n \n bool SQLiteBatch::WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    if (m_read_only) throw std::runtime_error(\"Write called on database in read-only mode\");",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "14b81e521c310cb616b7920b5625b704ef1e1899",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I thought the database was never in read-only mode after a successful opening?",
      "created_at": "2020-10-11T09:36:11Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502891009",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502891009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502891275",
      "pull_request_review_id": 506161743,
      "id": 502891275,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg5MTI3NQ==",
      "diff_hunk": "@@ -0,0 +1,632 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <sync.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+static Mutex g_sqlite_mutex;\n+static int g_sqlite_count GUARDED_BY(g_sqlite_mutex) = 0;\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    // From sqlite3_config() documentation for the SQLITE_CONFIG_LOG option:\n+    // \"The void pointer that is the second argument to SQLITE_CONFIG_LOG is passed through as\n+    // the first parameter to the application-defined logger function whenever that function is\n+    // invoked.\"\n+    // Assert that this is the case:\n+    assert(arg == nullptr);\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    {\n+        LOCK(g_sqlite_mutex);\n+        LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+        LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+        if (++g_sqlite_count == 1) {\n+            // Setup logging\n+            int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            // Force serialized threading mode\n+            ret = sqlite3_config(SQLITE_CONFIG_SERIALIZED);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to configure serialized threading mode: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+        int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    try {\n+        Open(\"\"); // mode is unused\n+    } catch (const std::runtime_error& e) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "e680b23e22b1c15ee8e42a375a68248e821f76eb",
      "in_reply_to_id": 502888684,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This could be worked around with the following patch:\r\n```diff\r\n--- a/build_msvc/common.init.vcxproj\r\n+++ b/build_msvc/common.init.vcxproj\r\n@@ -117,7 +117,7 @@\r\n       <WarningLevel>Level3</WarningLevel>\r\n       <PrecompiledHeader>NotUsing</PrecompiledHeader>\r\n       <AdditionalOptions>/utf-8 /std:c++17 %(AdditionalOptions)</AdditionalOptions>\r\n-      <DisableSpecificWarnings>4018;4221;4244;4267;4334;4715;4805;4834</DisableSpecificWarnings>\r\n+      <DisableSpecificWarnings>4018;4101;4221;4244;4267;4334;4715;4805;4834</DisableSpecificWarnings>\r\n       <TreatWarningAsError>true</TreatWarningAsError>\r\n       <PreprocessorDefinitions>_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING;_SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING;ZMQ_STATIC;NOMINMAX;WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;_WIN32_WINNT=0x0601;_WIN32_IE=0x0501;WIN32_LEAN_AND_MEAN;%(PreprocessorDefinitions)</PreprocessorDefinitions>\r\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\secp256k1\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\r\n```\r\n@sipsorcery ?",
      "created_at": "2020-10-11T09:38:53Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502891275",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502891275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502892802",
      "pull_request_review_id": 506156951,
      "id": 502892802,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg5MjgwMg==",
      "diff_hunk": "@@ -192,7 +192,29 @@ bool SQLiteDatabase::Rewrite(const char* skip)\n \n bool SQLiteDatabase::Backup(const std::string& dest) const\n {\n-    return false;\n+    sqlite3* db_copy;\n+    int res = sqlite3_open(dest.c_str(), &db_copy);\n+    if (res != SQLITE_OK) {\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    sqlite3_backup* backup = sqlite3_backup_init(db_copy, \"main\", m_db, \"main\");\n+    if (!backup) {\n+        LogPrintf(\"SQLiteDatabase::Backup: Unable to begin backup: %s\\n\", sqlite3_errmsg(m_db));\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    // Copy all of the pages using -1",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "8eee65c46d3b897fca9e07b092f3714e3bcdb79e",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Comment is a little ambiguously worded, IMO better to say \"Specifying -1 causes all pages to be copied \"",
      "created_at": "2020-10-11T09:53:21Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502892802",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502892802"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502898808",
      "pull_request_review_id": 506167274,
      "id": 502898808,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg5ODgwOA==",
      "diff_hunk": "@@ -0,0 +1,632 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <sync.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+static Mutex g_sqlite_mutex;\n+static int g_sqlite_count GUARDED_BY(g_sqlite_mutex) = 0;\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    // From sqlite3_config() documentation for the SQLITE_CONFIG_LOG option:\n+    // \"The void pointer that is the second argument to SQLITE_CONFIG_LOG is passed through as\n+    // the first parameter to the application-defined logger function whenever that function is\n+    // invoked.\"\n+    // Assert that this is the case:\n+    assert(arg == nullptr);\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    {\n+        LOCK(g_sqlite_mutex);\n+        LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+        LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+        if (++g_sqlite_count == 1) {\n+            // Setup logging\n+            int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            // Force serialized threading mode\n+            ret = sqlite3_config(SQLITE_CONFIG_SERIALIZED);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to configure serialized threading mode: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+        int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    try {\n+        Open(\"\"); // mode is unused\n+    } catch (const std::runtime_error& e) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "e680b23e22b1c15ee8e42a375a68248e821f76eb",
      "in_reply_to_id": 502888684,
      "user": {
        "login": "sipsorcery",
        "id": 197660,
        "node_id": "MDQ6VXNlcjE5NzY2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/197660?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipsorcery",
        "html_url": "https://github.com/sipsorcery",
        "followers_url": "https://api.github.com/users/sipsorcery/followers",
        "following_url": "https://api.github.com/users/sipsorcery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipsorcery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipsorcery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipsorcery/subscriptions",
        "organizations_url": "https://api.github.com/users/sipsorcery/orgs",
        "repos_url": "https://api.github.com/users/sipsorcery/repos",
        "events_url": "https://api.github.com/users/sipsorcery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipsorcery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What's the reason to not get rid of the unused variable `e`?\r\n\r\n`catch (const std::runtime_error&) {\r\n...\r\n}`",
      "created_at": "2020-10-11T10:50:33Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502898808",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502898808"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502930230",
      "pull_request_review_id": 506190498,
      "id": 502930230,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMDIzMA==",
      "diff_hunk": "@@ -10,7 +10,8 @@ qt_android_packages=qt\n qt_darwin_packages=qt\n qt_mingw32_packages=qt\n \n-wallet_packages=bdb\n+bdb_packages=bdb\n+sqlite_packages=sqlite",
      "path": "depends/packages/packages.mk",
      "position": 6,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "bd18fe80cacc25054c561aa8460752b59be0a78c",
      "in_reply_to_id": 502864150,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Meh. The convention in all of these files is no spaces around `=`.",
      "created_at": "2020-10-11T15:28:26Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502930230",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502930230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": 13,
      "original_start_line": 13,
      "start_side": "RIGHT",
      "line": 14,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502930271",
      "pull_request_review_id": 506190533,
      "id": 502930271,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMDI3MQ==",
      "diff_hunk": "@@ -25,6 +25,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | xkbcommon |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) (Linux only) |\n | ZeroMQ | [4.3.1](https://github.com/zeromq/libzmq/releases) | 4.0.0 | No |  |  |\n | zlib | [1.2.11](https://zlib.net/) |  |  |  | No |\n+| SQLite 3 | [3.32.1](https://sqlite.org/download.html) |  |  |  |  |",
      "path": "doc/dependencies.md",
      "position": null,
      "original_position": 4,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "05c427a0654d2fe0907d8a755e74a2e2d0a51f07",
      "in_reply_to_id": 502866026,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The minimum version is not known.",
      "created_at": "2020-10-11T15:28:54Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502930271",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502930271"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502930770",
      "pull_request_review_id": 506190896,
      "id": 502930770,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMDc3MA==",
      "diff_hunk": "@@ -15,18 +16,66 @@\n \n static const char* DATABASE_FILENAME = \"wallet.dat\";\n \n+static Mutex g_sqlite_mutex;\n+static int g_sqlite_count GUARDED_BY(g_sqlite_mutex) = 0;\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    // From sqlite3_config() documentation for the SQLITE_CONFIG_LOG option:\n+    // \"The void pointer that is the second argument to SQLITE_CONFIG_LOG is passed through as\n+    // the first parameter to the application-defined logger function whenever that function is\n+    // invoked.\"\n+    // Assert that this is the case:\n+    assert(arg == nullptr);",
      "path": "src/wallet/sqlite.cpp",
      "position": 33,
      "original_position": 22,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "70a2c658549c8a0caa3e58dcc7894d2bb8872cd5",
      "in_reply_to_id": 502873114,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That does the opposite of what we want.",
      "created_at": "2020-10-11T15:33:04Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502930770",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502930770"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 33,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502931000",
      "pull_request_review_id": 506191080,
      "id": 502931000,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMTAwMA==",
      "diff_hunk": "@@ -80,6 +81,72 @@ void SQLiteDatabase::Cleanup()\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    int flags = SQLITE_OPEN_FULLMUTEX | SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE;\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        TryCreateDirectories(m_dir_path);\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &m_db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+",
      "path": "src/wallet/sqlite.cpp",
      "position": 215,
      "original_position": 24,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "6720df53bd5d4e551c101743c4050bd0c7682238",
      "in_reply_to_id": 502873626,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think that is unnecessary.",
      "created_at": "2020-10-11T15:35:02Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502931000",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502931000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 215,
      "original_line": 215,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502931868",
      "pull_request_review_id": 506191686,
      "id": 502931868,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMTg2OA==",
      "diff_hunk": "@@ -1029,6 +1038,20 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n         return nullptr;\n     }\n \n+    // A db already exists so format is set, but options also specifies the format, so make sure they agree\n+    if (format && options.require_format && *format != options.require_format) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c4b6cf7ed72490df24a2e2d28d947002f3e6ef16",
      "in_reply_to_id": 502881270,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it is clearer this way.",
      "created_at": "2020-10-11T15:42:48Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502931868",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502931868"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1042,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502931886",
      "pull_request_review_id": 506191698,
      "id": 502931886,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMTg4Ng==",
      "diff_hunk": "@@ -1011,6 +1012,14 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n         if (ExistsBerkeleyDatabase(path)) {\n             format = DatabaseFormat::BERKELEY;\n         }\n+        if (ExistsSQLiteDatabase(path)) {\n+            if (format) {\n+                error = Untranslated(strprintf(\"Failed to load database path '%s'. Data is in ambiguous format.\", path.string()));",
      "path": "src/wallet/walletdb.cpp",
      "position": 14,
      "original_position": 14,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c4b6cf7ed72490df24a2e2d28d947002f3e6ef16",
      "in_reply_to_id": 502880353,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This should be translated? Why not mimic the code?",
      "created_at": "2020-10-11T15:42:55Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502931886",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502931886"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1017,
      "original_line": 1017,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502931905",
      "pull_request_review_id": 506191713,
      "id": 502931905,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMTkwNQ==",
      "diff_hunk": "@@ -8,6 +8,7 @@\n #include <util/system.h>\n \n bool ExistsBerkeleyDatabase(const fs::path& path);\n+bool ExistsSQLiteDatabase(const fs::path& path);",
      "path": "src/wallet/walletutil.cpp",
      "position": 5,
      "original_position": 4,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "5f17c73e8b890c92d2dc74e0e3bb34d217bc5160",
      "in_reply_to_id": 502882199,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "To avoid a circular dependency.",
      "created_at": "2020-10-11T15:43:04Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502931905",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502931905"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 11,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502932283",
      "pull_request_review_id": 506192013,
      "id": 502932283,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMjI4Mw==",
      "diff_hunk": "@@ -8,6 +8,7 @@\n #include <util/system.h>\n \n bool ExistsBerkeleyDatabase(const fs::path& path);\n+bool ExistsSQLiteDatabase(const fs::path& path);",
      "path": "src/wallet/walletutil.cpp",
      "position": 5,
      "original_position": 4,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "5f17c73e8b890c92d2dc74e0e3bb34d217bc5160",
      "in_reply_to_id": 502882199,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> To avoid a circular dependency.\r\n\r\nWhich one? `test/lint/lint-circular-dependencies.sh` is green for me.",
      "created_at": "2020-10-11T15:46:28Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502932283",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502932283"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 11,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502932464",
      "pull_request_review_id": 506192154,
      "id": 502932464,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMjQ2NA==",
      "diff_hunk": "@@ -1011,6 +1012,14 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n         if (ExistsBerkeleyDatabase(path)) {\n             format = DatabaseFormat::BERKELEY;\n         }\n+        if (ExistsSQLiteDatabase(path)) {\n+            if (format) {\n+                error = Untranslated(strprintf(\"Failed to load database path '%s'. Data is in ambiguous format.\", path.string()));",
      "path": "src/wallet/walletdb.cpp",
      "position": 14,
      "original_position": 14,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c4b6cf7ed72490df24a2e2d28d947002f3e6ef16",
      "in_reply_to_id": 502880353,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> This should be translated?\r\n\r\nI think so. And other user-faced messages in this function too, but this is out of this PR scope.",
      "created_at": "2020-10-11T15:48:07Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502932464",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502932464"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1017,
      "original_line": 1017,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502932837",
      "pull_request_review_id": 506192420,
      "id": 502932837,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMjgzNw==",
      "diff_hunk": "@@ -1029,6 +1038,20 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n         return nullptr;\n     }\n \n+    // A db already exists so format is set, but options also specifies the format, so make sure they agree\n+    if (format && options.require_format && *format != options.require_format) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c4b6cf7ed72490df24a2e2d28d947002f3e6ef16",
      "in_reply_to_id": 502881270,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is different approach to two comparing variables of the same type really clearer? Up to you :)",
      "created_at": "2020-10-11T15:51:14Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502932837",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502932837"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1042,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502933286",
      "pull_request_review_id": 506192735,
      "id": 502933286,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMzI4Ng==",
      "diff_hunk": "@@ -1011,6 +1012,14 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n         if (ExistsBerkeleyDatabase(path)) {\n             format = DatabaseFormat::BERKELEY;\n         }\n+        if (ExistsSQLiteDatabase(path)) {\n+            if (format) {\n+                error = Untranslated(strprintf(\"Failed to load database path '%s'. Data is in ambiguous format.\", path.string()));",
      "path": "src/wallet/walletdb.cpp",
      "position": 14,
      "original_position": 14,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c4b6cf7ed72490df24a2e2d28d947002f3e6ef16",
      "in_reply_to_id": 502880353,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Probably, it would be better to leave it as is for now, and apply changes in the follow up pull.",
      "created_at": "2020-10-11T15:54:52Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502933286",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502933286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1017,
      "original_line": 1017,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935045",
      "pull_request_review_id": 506193983,
      "id": 502935045,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTA0NQ==",
      "diff_hunk": "@@ -1175,6 +1175,9 @@ fi\n if test x$enable_wallet != xno; then\n     dnl Check for libdb_cxx only if wallet enabled\n     BITCOIN_FIND_BDB48\n+\n+    dnl Check for sqlite3\n+    AC_CHECK_HEADERS([sqlite3.h], [AC_CHECK_LIB([sqlite3], [sqlite3_open], [SQLITE_LIBS=-lsqlite3], [AC_MSG_ERROR(sqlite3_open missing from libsqlite3)], [-pthread -lpthread])], [AC_MSG_ERROR(sqlite3.h headers missing)])",
      "path": "configure.ac",
      "position": null,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "5fc97fa479136e61e8869b77ba731900c3233fcf",
      "in_reply_to_id": 502863113,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:10:03Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935045",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935045"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935069",
      "pull_request_review_id": 506194003,
      "id": 502935069,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTA2OQ==",
      "diff_hunk": "@@ -0,0 +1,26 @@\n+package=sqlite\n+$(package)_version=3320100\n+$(package)_download_path=https://sqlite.org/2020/\n+$(package)_file_name=sqlite-autoconf-$($(package)_version).tar.gz\n+$(package)_sha256_hash=486748abfb16abd8af664e3a5f03b228e5f124682b0c942e157644bf6fff7d10\n+\n+define $(package)_set_vars\n+$(package)_config_opts=--disable-shared --disable-readline --disable-dynamic-extensions --enable-option-checking\n+$(package)_config_opts_linux=--with-pic\n+endef\n+\n+define $(package)_config_cmds\n+  $($(package)_autoconf)\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE) libsqlite3.la\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install-libLTLIBRARIES install-includeHEADERS install-pkgconfigDATA\n+endef\n+\n+define $(package)_postprocess_cmds\n+  rm -rf bin share lib/*.la",
      "path": "depends/packages/sqlite.mk",
      "position": null,
      "original_position": 25,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "bd18fe80cacc25054c561aa8460752b59be0a78c",
      "in_reply_to_id": 502865334,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:10:11Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935069",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935085",
      "pull_request_review_id": 506194015,
      "id": 502935085,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTA4NQ==",
      "diff_hunk": "@@ -79,7 +79,7 @@ compiled in `disable-wallet` mode with:\n ./configure --disable-wallet\n ```\n \n-In this case there is no dependency on Berkeley DB 4.8.\n+In this case there is no dependency on Berkeley DB 4.8 or on sqlite.",
      "path": "doc/build-osx.md",
      "position": null,
      "original_position": 14,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "05c427a0654d2fe0907d8a755e74a2e2d0a51f07",
      "in_reply_to_id": 502865572,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:10:16Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935085",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935085"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935098",
      "pull_request_review_id": 506194026,
      "id": 502935098,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTA5OA==",
      "diff_hunk": "@@ -91,6 +92,10 @@ pass `--with-incompatible-bdb` to configure.\n \n Otherwise, you can build from self-compiled `depends` (see above).\n \n+SQLite3 is required for the wallet:\n+\n+    sudo apt-get install libsqlite3-dev",
      "path": "doc/build-unix.md",
      "position": null,
      "original_position": 14,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "05c427a0654d2fe0907d8a755e74a2e2d0a51f07",
      "in_reply_to_id": 502865841,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:10:20Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935098",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935098"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935119",
      "pull_request_review_id": 506194035,
      "id": 502935119,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTExOQ==",
      "diff_hunk": "@@ -70,7 +70,7 @@ Subdirectory | File(s)           | Description\n -------------|-------------------|------------\n `database/`  | BDB logging files | Part of BDB environment; created at start and deleted on shutdown; a user *must keep it as safe* as personal wallet `wallet.dat`\n `./`         | `db.log`          | BDB error file\n-`./`         | `wallet.dat`      | Personal wallet (BDB) with keys and transactions\n+`./`         | `wallet.dat`      | Personal wallet with keys and transactions. May be either a BDB or SQLite3 database file.",
      "path": "doc/files.md",
      "position": null,
      "original_position": 5,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "05c427a0654d2fe0907d8a755e74a2e2d0a51f07",
      "in_reply_to_id": 502866675,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:10:24Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935119",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935119"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935130",
      "pull_request_review_id": 506194048,
      "id": 502935130,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTEzMA==",
      "diff_hunk": "@@ -182,6 +182,14 @@ SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n \n void SQLiteBatch::Close()\n {\n+    // If m_db is in a transaction (i.e. not in autocommit mode), then abort the transaction in progress\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        if (TxnAbort()) {\n+            LogPrintf(\"SQLiteBatch: Batch closed unexpectedly without the transaction being explicitly commited or aborted\\n\");",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "011fa1e2657d624593bb7f23f697a741f7b51577",
      "in_reply_to_id": 502867317,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:10:31Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935130",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935130"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935138",
      "pull_request_review_id": 506194061,
      "id": 502935138,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTEzOA==",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    /* No-op. See commeng on SQLiteDatabase::Flush */\n+    void Flush() override {}\n+\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 47,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "1a2eec03f0dc7731d5c199a97db148534ce174a2",
      "in_reply_to_id": 502868538,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:10:36Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935138",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935138"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935157",
      "pull_request_review_id": 506194077,
      "id": 502935157,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTE1Nw==",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    /* No-op. See commeng on SQLiteDatabase::Flush */\n+    void Flush() override {}\n+\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 57,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "1a2eec03f0dc7731d5c199a97db148534ce174a2",
      "in_reply_to_id": 502868724,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:10:41Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935157",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935164",
      "pull_request_review_id": 506194083,
      "id": 502935164,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTE2NA==",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    /* No-op. See commeng on SQLiteDatabase::Flush */\n+    void Flush() override {}\n+\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /* These functions are unused */\n+    void AddRef() override { assert(false); }\n+    void RemoveRef() override { assert(false); }\n+\n+    /** Rewrite the entire database on disk */\n+    bool Rewrite(const char* skip=nullptr) override;",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 72,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "1a2eec03f0dc7731d5c199a97db148534ce174a2",
      "in_reply_to_id": 502868799,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:10:45Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935164",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935164"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935196",
      "pull_request_review_id": 506194101,
      "id": 502935196,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTE5Ng==",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 19,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "1a2eec03f0dc7731d5c199a97db148534ce174a2",
      "in_reply_to_id": 502869040,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed this variable.",
      "created_at": "2020-10-11T16:10:56Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935196",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935196"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935211",
      "pull_request_review_id": 506194110,
      "id": 502935211,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTIxMQ==",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 22,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "1a2eec03f0dc7731d5c199a97db148534ce174a2",
      "in_reply_to_id": 502869093,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:11:00Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935211",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935211"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935218",
      "pull_request_review_id": 506194118,
      "id": 502935218,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTIxOA==",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "1a2eec03f0dc7731d5c199a97db148534ce174a2",
      "in_reply_to_id": 502870437,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:11:05Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935218",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935218"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": 16,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935224",
      "pull_request_review_id": 506194124,
      "id": 502935224,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTIyNA==",
      "diff_hunk": "@@ -53,6 +53,8 @@ class SQLiteDatabase : public WalletDatabase\n \n     const std::string m_file_path;\n \n+    void Cleanup();",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 4,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "70a2c658549c8a0caa3e58dcc7894d2bb8872cd5",
      "in_reply_to_id": 502872200,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:11:09Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935224",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935224"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935227",
      "pull_request_review_id": 506194130,
      "id": 502935227,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTIyNw==",
      "diff_hunk": "@@ -15,18 +16,66 @@\n \n static const char* DATABASE_FILENAME = \"wallet.dat\";\n \n+static Mutex g_sqlite_mutex;\n+static int g_sqlite_count GUARDED_BY(g_sqlite_mutex) = 0;\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    // From sqlite3_config() documentation for the SQLITE_CONFIG_LOG option:\n+    // \"The void pointer that is the second argument to SQLITE_CONFIG_LOG is passed through as\n+    // the first parameter to the application-defined logger function whenever that function is\n+    // invoked.\"\n+    // Assert that this is the case:\n+    assert(arg == nullptr);\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n     WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n {\n-    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n-    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n-\n-    Open(\"\"); // mode is unused\n+    {\n+        LOCK(g_sqlite_mutex);\n+        LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+        LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+        if (++g_sqlite_count == 1) {\n+            // Setup logging\n+            int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+        int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    try {\n+        Open(\"\"); // mode is unused\n+    } catch (const std::runtime_error& e) {\n+        // If open fails, cleanup this object and rethrow the exception\n+        Cleanup();\n+        throw;\n+    }\n }\n \n SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Cleanup();\n+}\n+\n+void SQLiteDatabase::Cleanup()",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "70a2c658549c8a0caa3e58dcc7894d2bb8872cd5",
      "in_reply_to_id": 502872272,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:11:13Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935227",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935227"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935239",
      "pull_request_review_id": 506194144,
      "id": 502935239,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTIzOQ==",
      "diff_hunk": "@@ -80,6 +81,72 @@ void SQLiteDatabase::Cleanup()\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    int flags = SQLITE_OPEN_FULLMUTEX | SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE;\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        TryCreateDirectories(m_dir_path);\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &m_db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    if (sqlite3_db_readonly(m_db, \"main\") != 0) {\n+        throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+    }\n+\n+    // Acquire an exclusive lock on the database\n+    // First change the locking mode to exclusive\n+    int ret = sqlite3_exec(m_db, \"PRAGMA locking_mode = exclusive\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to change database locking mode to exclusive: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    // Now begin a transaction to acquire the exclusive lock. This lock won't be released until we close because of the exclusive locking mode.\n+    ret = sqlite3_exec(m_db, \"BEGIN EXCLUSIVE TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(\"SQLiteDatabase: Unable to obtain an exclusive lock on the database, is it being used by another bitcoind?\\n\");\n+    }\n+    ret = sqlite3_exec(m_db, \"COMMIT\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to end exclusive lock transaction: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Make the table for our key-value pairs\n+    // First check that the main table exists\n+    bool table_exists;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "6720df53bd5d4e551c101743c4050bd0c7682238",
      "in_reply_to_id": 502874011,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:11:20Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935239",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935247",
      "pull_request_review_id": 506194151,
      "id": 502935247,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTI0Nw==",
      "diff_hunk": "@@ -61,6 +61,42 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     }\n }\n \n+void SQLiteBatch::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "83952c59940e4b03bf63b48c0f83b460f988d4be",
      "in_reply_to_id": 502875497,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Inlined all of these.",
      "created_at": "2020-10-11T16:11:28Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935247",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935247"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": 66,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935253",
      "pull_request_review_id": 506194156,
      "id": 502935253,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTI1Mw==",
      "diff_hunk": "@@ -192,7 +192,29 @@ bool SQLiteDatabase::Rewrite(const char* skip)\n \n bool SQLiteDatabase::Backup(const std::string& dest) const\n {\n-    return false;\n+    sqlite3* db_copy;\n+    int res = sqlite3_open(dest.c_str(), &db_copy);\n+    if (res != SQLITE_OK) {\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    sqlite3_backup* backup = sqlite3_backup_init(db_copy, \"main\", m_db, \"main\");\n+    if (!backup) {\n+        LogPrintf(\"SQLiteDatabase::Backup: Unable to begin backup: %s\\n\", sqlite3_errmsg(m_db));",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "8eee65c46d3b897fca9e07b092f3714e3bcdb79e",
      "in_reply_to_id": 502875831,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:11:32Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935253",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935253"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 203,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935273",
      "pull_request_review_id": 506194168,
      "id": 502935273,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTI3Mw==",
      "diff_hunk": "@@ -192,7 +192,29 @@ bool SQLiteDatabase::Rewrite(const char* skip)\n \n bool SQLiteDatabase::Backup(const std::string& dest) const\n {\n-    return false;\n+    sqlite3* db_copy;\n+    int res = sqlite3_open(dest.c_str(), &db_copy);\n+    if (res != SQLITE_OK) {\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    sqlite3_backup* backup = sqlite3_backup_init(db_copy, \"main\", m_db, \"main\");\n+    if (!backup) {\n+        LogPrintf(\"SQLiteDatabase::Backup: Unable to begin backup: %s\\n\", sqlite3_errmsg(m_db));\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    // Copy all of the pages using -1\n+    res = sqlite3_backup_step(backup, -1);\n+    if (res != SQLITE_DONE) {\n+        LogPrintf(\"SQLiteDatabase::Backup: Unable to backup: %s\\n\", sqlite3_errstr(res));",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "8eee65c46d3b897fca9e07b092f3714e3bcdb79e",
      "in_reply_to_id": 502875988,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:11:39Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935273",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935290",
      "pull_request_review_id": 506194175,
      "id": 502935290,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTI5MA==",
      "diff_hunk": "@@ -472,7 +509,19 @@ bool ExistsSQLiteDatabase(const fs::path& path)\n \n std::unique_ptr<SQLiteDatabase> MakeSQLiteDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error)\n {\n-    return MakeUnique<SQLiteDatabase>(path, path / DATABASE_FILENAME);\n+    fs::path file = path / DATABASE_FILENAME;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c3aeda3d2f7d7b34b8a35ccea478161b0ca2c80d",
      "in_reply_to_id": 502876560,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:11:44Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935290",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935290"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 512,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935301",
      "pull_request_review_id": 506194192,
      "id": 502935301,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTMwMQ==",
      "diff_hunk": "@@ -472,7 +509,19 @@ bool ExistsSQLiteDatabase(const fs::path& path)\n \n std::unique_ptr<SQLiteDatabase> MakeSQLiteDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error)\n {\n-    return MakeUnique<SQLiteDatabase>(path, path / DATABASE_FILENAME);\n+    fs::path file = path / DATABASE_FILENAME;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c3aeda3d2f7d7b34b8a35ccea478161b0ca2c80d",
      "in_reply_to_id": 502876560,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:11:50Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935301",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935301"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 512,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935320",
      "pull_request_review_id": 506194198,
      "id": 502935320,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTMyMA==",
      "diff_hunk": "@@ -115,6 +115,43 @@ void SQLiteDatabase::Cleanup()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    assert(m_db);\n+\n+    sqlite3_stmt* stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare statement to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to execute statement to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to read database verification error: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        if (error.original.empty()) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c3aeda3d2f7d7b34b8a35ccea478161b0ca2c80d",
      "in_reply_to_id": 502877051,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:11:54Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935320",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935320"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 191,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935327",
      "pull_request_review_id": 506194206,
      "id": 502935327,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTMyNw==",
      "diff_hunk": "@@ -115,6 +115,43 @@ void SQLiteDatabase::Cleanup()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    assert(m_db);\n+\n+    sqlite3_stmt* stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare statement to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to execute statement to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to read database verification error: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        if (error.original.empty()) {\n+            error = _(\"Failed to verify database\\n\");",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c3aeda3d2f7d7b34b8a35ccea478161b0ca2c80d",
      "in_reply_to_id": 502877212,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, made that `Untranslated`",
      "created_at": "2020-10-11T16:12:03Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935327",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935327"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935329",
      "pull_request_review_id": 506194213,
      "id": 502935329,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTMyOQ==",
      "diff_hunk": "@@ -115,6 +115,43 @@ void SQLiteDatabase::Cleanup()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    assert(m_db);\n+\n+    sqlite3_stmt* stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare statement to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to execute statement to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);",
      "path": "src/wallet/sqlite.cpp",
      "position": 183,
      "original_position": 23,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c3aeda3d2f7d7b34b8a35ccea478161b0ca2c80d",
      "in_reply_to_id": 502878069,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:12:08Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935329",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935329"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 183,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935334",
      "pull_request_review_id": 506194217,
      "id": 502935334,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTMzNA==",
      "diff_hunk": "@@ -259,22 +259,117 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch::ReadKey: Unable to bind read statement :%s\\n\", sqlite3_errstr(res));\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    res = sqlite3_step(m_read_stmt);\n+    if (res != SQLITE_ROW) {\n+        LogPrintf(\"SQLiteBatch::ReadKey: Unable to execute read statement :%s\\n\", sqlite3_errstr(res));\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    // Leftmost column in result is index 0\n+    const char* data = (const char*)sqlite3_column_blob(m_read_stmt, 0);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "14b81e521c310cb616b7920b5625b704ef1e1899",
      "in_reply_to_id": 502878352,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:12:12Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935334",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935334"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 281,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935349",
      "pull_request_review_id": 506194223,
      "id": 502935349,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTM0OQ==",
      "diff_hunk": "@@ -374,16 +374,41 @@ bool SQLiteBatch::HasKey(CDataStream&& key)\n \n bool SQLiteBatch::StartCursor()\n {\n-    return false;\n+    assert(!m_cursor_init);\n+    if (!m_database.m_db) return false;\n+    m_cursor_init = true;\n+    return true;\n }\n \n bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& complete)\n {\n-    return false;\n+    complete = false;\n+\n+    if (!m_cursor_init) return false;\n+\n+    int res = sqlite3_step(m_cursor_stmt);\n+    if (res == SQLITE_DONE) {\n+        complete = true;\n+        return true;\n+    } else if (res != SQLITE_ROW) {\n+        LogPrintf(\"SQLiteBatch::ReadAtCursor: Unable to execute cursor step: %s\\n\", sqlite3_errstr(res));\n+        return false;\n+    }\n+\n+    // Leftmost column in result is index 0\n+    const char* key_data = (const char*)sqlite3_column_blob(m_cursor_stmt, 0);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "293bdfcdc1825e1b288ee09584cf26979a4d5900",
      "in_reply_to_id": 502878458,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:12:17Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935349",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935349"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 399,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935361",
      "pull_request_review_id": 506194229,
      "id": 502935361,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTM2MQ==",
      "diff_hunk": "@@ -374,16 +374,41 @@ bool SQLiteBatch::HasKey(CDataStream&& key)\n \n bool SQLiteBatch::StartCursor()\n {\n-    return false;\n+    assert(!m_cursor_init);\n+    if (!m_database.m_db) return false;\n+    m_cursor_init = true;\n+    return true;\n }\n \n bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& complete)\n {\n-    return false;\n+    complete = false;\n+\n+    if (!m_cursor_init) return false;\n+\n+    int res = sqlite3_step(m_cursor_stmt);\n+    if (res == SQLITE_DONE) {\n+        complete = true;\n+        return true;\n+    } else if (res != SQLITE_ROW) {\n+        LogPrintf(\"SQLiteBatch::ReadAtCursor: Unable to execute cursor step: %s\\n\", sqlite3_errstr(res));\n+        return false;\n+    }\n+\n+    // Leftmost column in result is index 0\n+    const char* key_data = (const char*)sqlite3_column_blob(m_cursor_stmt, 0);\n+    int key_data_size = sqlite3_column_bytes(m_cursor_stmt, 0);\n+    key.write(key_data, key_data_size);\n+    const char* value_data = (const char*)sqlite3_column_blob(m_cursor_stmt, 1);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "293bdfcdc1825e1b288ee09584cf26979a4d5900",
      "in_reply_to_id": 502878520,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:12:22Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935361",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 402,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935369",
      "pull_request_review_id": 506194239,
      "id": 502935369,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTM2OQ==",
      "diff_hunk": "@@ -505,7 +505,8 @@ bool SQLiteBatch::TxnAbort()\n \n bool ExistsSQLiteDatabase(const fs::path& path)\n {\n-    return false;\n+    fs::path file = path / DATABASE_FILENAME;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c4b6cf7ed72490df24a2e2d28d947002f3e6ef16",
      "in_reply_to_id": 502879435,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:12:27Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935369",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935369"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 508,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935380",
      "pull_request_review_id": 506194253,
      "id": 502935380,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTM4MA==",
      "diff_hunk": "@@ -119,6 +121,28 @@ bool SQLiteDatabase::Verify(bilingual_str& error)\n {\n     assert(m_db);\n \n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt{nullptr};\n+    int ret = sqlite3_prepare_v2(m_db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "87e2d29baca9d08e90ed401bf360b9b7e866c62c",
      "in_reply_to_id": 502882710,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:12:36Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935380",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935380"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935390",
      "pull_request_review_id": 506194264,
      "id": 502935390,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTM5MA==",
      "diff_hunk": "@@ -219,6 +243,14 @@ void SQLiteDatabase::Open(const char* mode)\n         if (ret != SQLITE_OK) {\n             throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to enable fullfsync: %s\\n\", sqlite3_errstr(ret)));\n         }\n+\n+        // Set the application id\n+        uint32_t app_id = ReadBE32(Params().MessageStart());\n+        std::string set_app_id = strprintf(\"PRAGMA application_id = %d\", (int32_t)app_id);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "87e2d29baca9d08e90ed401bf360b9b7e866c62c",
      "in_reply_to_id": 502882955,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:12:41Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935390",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935390"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 249,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935401",
      "pull_request_review_id": 506194270,
      "id": 502935401,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTQwMQ==",
      "diff_hunk": "@@ -18,6 +18,7 @@\n #include <stdint.h>\n \n static const char* DATABASE_FILENAME = \"wallet.dat\";\n+static const int32_t WALLET_SCHEMA_VERSION = 0;",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "10ceb039e8361d91a9169da8f68872ad4b564403",
      "in_reply_to_id": 502883560,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:12:45Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935401",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935401"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935403",
      "pull_request_review_id": 506194272,
      "id": 502935403,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTQwMw==",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "1a2eec03f0dc7731d5c199a97db148534ce174a2",
      "in_reply_to_id": 502884016,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:12:49Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935403",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935403"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935420",
      "pull_request_review_id": 506194281,
      "id": 502935420,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTQyMA==",
      "diff_hunk": "@@ -0,0 +1,632 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <sync.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+static Mutex g_sqlite_mutex;\n+static int g_sqlite_count GUARDED_BY(g_sqlite_mutex) = 0;\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    // From sqlite3_config() documentation for the SQLITE_CONFIG_LOG option:\n+    // \"The void pointer that is the second argument to SQLITE_CONFIG_LOG is passed through as\n+    // the first parameter to the application-defined logger function whenever that function is\n+    // invoked.\"\n+    // Assert that this is the case:\n+    assert(arg == nullptr);\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    {\n+        LOCK(g_sqlite_mutex);\n+        LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+        LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+        if (++g_sqlite_count == 1) {\n+            // Setup logging\n+            int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            // Force serialized threading mode\n+            ret = sqlite3_config(SQLITE_CONFIG_SERIALIZED);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to configure serialized threading mode: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+        int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    try {\n+        Open(\"\"); // mode is unused\n+    } catch (const std::runtime_error& e) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "e680b23e22b1c15ee8e42a375a68248e821f76eb",
      "in_reply_to_id": 502888684,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed `e`",
      "created_at": "2020-10-11T16:12:59Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935420",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935420"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935427",
      "pull_request_review_id": 506194290,
      "id": 502935427,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTQyNw==",
      "diff_hunk": "@@ -80,6 +81,72 @@ void SQLiteDatabase::Cleanup()\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    int flags = SQLITE_OPEN_FULLMUTEX | SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE;\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        TryCreateDirectories(m_dir_path);\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &m_db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    if (sqlite3_db_readonly(m_db, \"main\") != 0) {\n+        throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+    }\n+\n+    // Acquire an exclusive lock on the database\n+    // First change the locking mode to exclusive\n+    int ret = sqlite3_exec(m_db, \"PRAGMA locking_mode = exclusive\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to change database locking mode to exclusive: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    // Now begin a transaction to acquire the exclusive lock. This lock won't be released until we close because of the exclusive locking mode.\n+    ret = sqlite3_exec(m_db, \"BEGIN EXCLUSIVE TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(\"SQLiteDatabase: Unable to obtain an exclusive lock on the database, is it being used by another bitcoind?\\n\");\n+    }\n+    ret = sqlite3_exec(m_db, \"COMMIT\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to end exclusive lock transaction: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Make the table for our key-value pairs\n+    // First check that the main table exists\n+    bool table_exists;\n+    sqlite3_stmt* check_main_stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\", -1, &check_main_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to prepare statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    ret = sqlite3_step(check_main_stmt);\n+    if (sqlite3_finalize(check_main_stmt) != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to finalize statement checking table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    if (ret == SQLITE_DONE) {\n+        table_exists = false;\n+    } else if (ret == SQLITE_ROW) {\n+        table_exists = true;\n+    } else {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to execute statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Do the db setup things because the table doesn't exist only when we are creating a new wallet\n+    if (!table_exists) {\n+        ret = sqlite3_exec(m_db, \"CREATE TABLE main(key BLOB PRIMARY KEY NOT NULL, value BLOB NOT NULL)\", nullptr, nullptr, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        // Enable fullfysnc for the platforms that use it",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "6720df53bd5d4e551c101743c4050bd0c7682238",
      "in_reply_to_id": 502889094,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:13:08Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935427",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935427"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935464",
      "pull_request_review_id": 506194321,
      "id": 502935464,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTQ2NA==",
      "diff_hunk": "@@ -259,22 +259,117 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch::ReadKey: Unable to bind read statement :%s\\n\", sqlite3_errstr(res));\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    res = sqlite3_step(m_read_stmt);\n+    if (res != SQLITE_ROW) {\n+        LogPrintf(\"SQLiteBatch::ReadKey: Unable to execute read statement :%s\\n\", sqlite3_errstr(res));\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    // Leftmost column in result is index 0\n+    const char* data = (const char*)sqlite3_column_blob(m_read_stmt, 0);\n+    int data_size = sqlite3_column_bytes(m_read_stmt, 0);\n+    value.write(data, data_size);\n+\n+    sqlite3_clear_bindings(m_read_stmt);\n+    sqlite3_reset(m_read_stmt);\n+    return true;\n }\n \n bool SQLiteBatch::WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    if (m_read_only) throw std::runtime_error(\"Write called on database in read-only mode\");",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "14b81e521c310cb616b7920b5625b704ef1e1899",
      "in_reply_to_id": 502891009,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed `m_read_only` and these checks.",
      "created_at": "2020-10-11T16:13:35Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935464",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935464"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935472",
      "pull_request_review_id": 506194332,
      "id": 502935472,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTQ3Mg==",
      "diff_hunk": "@@ -192,7 +192,29 @@ bool SQLiteDatabase::Rewrite(const char* skip)\n \n bool SQLiteDatabase::Backup(const std::string& dest) const\n {\n-    return false;\n+    sqlite3* db_copy;\n+    int res = sqlite3_open(dest.c_str(), &db_copy);\n+    if (res != SQLITE_OK) {\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    sqlite3_backup* backup = sqlite3_backup_init(db_copy, \"main\", m_db, \"main\");\n+    if (!backup) {\n+        LogPrintf(\"SQLiteDatabase::Backup: Unable to begin backup: %s\\n\", sqlite3_errmsg(m_db));\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    // Copy all of the pages using -1",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "8eee65c46d3b897fca9e07b092f3714e3bcdb79e",
      "in_reply_to_id": 502892802,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:13:42Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935472",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935535",
      "pull_request_review_id": 506194389,
      "id": 502935535,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTUzNQ==",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    /* No-op. See commeng on SQLiteDatabase::Flush */\n+    void Flush() override {}\n+\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 35,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "1a2eec03f0dc7731d5c199a97db148534ce174a2",
      "in_reply_to_id": 502884857,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-11T16:14:31Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935535",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502935535"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502937015",
      "pull_request_review_id": 506195510,
      "id": 502937015,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNzAxNQ==",
      "diff_hunk": "@@ -1029,6 +1038,20 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n         return nullptr;\n     }\n \n+    // A db already exists so format is set, but options also specifies the format, so make sure they agree\n+    if (format && options.require_format && *format != options.require_format) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c4b6cf7ed72490df24a2e2d28d947002f3e6ef16",
      "in_reply_to_id": 502881270,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh right, they're both `Optional`. Changed.",
      "created_at": "2020-10-11T16:28:08Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502937015",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502937015"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1042,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502937474",
      "pull_request_review_id": 506195867,
      "id": 502937474,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNzQ3NA==",
      "diff_hunk": "@@ -8,6 +8,7 @@\n #include <util/system.h>\n \n bool ExistsBerkeleyDatabase(const fs::path& path);\n+bool ExistsSQLiteDatabase(const fs::path& path);",
      "path": "src/wallet/walletutil.cpp",
      "position": 5,
      "original_position": 4,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "5f17c73e8b890c92d2dc74e0e3bb34d217bc5160",
      "in_reply_to_id": 502882199,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think there was one in a previous iteration of this PR. But I'm going to leave it as is for now.",
      "created_at": "2020-10-11T16:32:45Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502937474",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502937474"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 11,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502937660",
      "pull_request_review_id": 506196029,
      "id": 502937660,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNzY2MA==",
      "diff_hunk": "@@ -115,6 +115,43 @@ void SQLiteDatabase::Cleanup()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    assert(m_db);\n+\n+    sqlite3_stmt* stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare statement to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to execute statement to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to read database verification error: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        if (error.original.empty()) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c3aeda3d2f7d7b34b8a35ccea478161b0ca2c80d",
      "in_reply_to_id": 502877051,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not yet :)",
      "created_at": "2020-10-11T16:34:56Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502937660",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502937660"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 191,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502937766",
      "pull_request_review_id": 506196107,
      "id": 502937766,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNzc2Ng==",
      "diff_hunk": "@@ -0,0 +1,624 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <sync.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* const DATABASE_FILENAME = \"wallet.dat\";\n+static constexpr int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+static Mutex g_sqlite_mutex;\n+static int g_sqlite_count GUARDED_BY(g_sqlite_mutex) = 0;\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    // From sqlite3_config() documentation for the SQLITE_CONFIG_LOG option:\n+    // \"The void pointer that is the second argument to SQLITE_CONFIG_LOG is passed through as\n+    // the first parameter to the application-defined logger function whenever that function is\n+    // invoked.\"\n+    // Assert that this is the case:\n+    assert(arg == nullptr);\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock)\n+    : WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    {\n+        LOCK(g_sqlite_mutex);\n+        LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+        LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+        if (++g_sqlite_count == 1) {\n+            // Setup logging\n+            int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            // Force serialized threading mode\n+            ret = sqlite3_config(SQLITE_CONFIG_SERIALIZED);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to configure serialized threading mode: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+        int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    try {\n+        Open(\"\"); // mode is unused\n+    } catch (const std::runtime_error&) {\n+        // If open fails, cleanup this object and rethrow the exception\n+        Cleanup();\n+        throw;\n+    }\n+}\n+\n+void SQLiteBatch::SetupSQLStatements()\n+{\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"SELECT value FROM main WHERE key = ?\", -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"INSERT INTO main VALUES(?, ?)\", -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db,\"insert or replace into main values(?, ?)\", -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "78eb7ade8a99c1fea4562115944f709fd28b14e6",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "piconit: a missed space\r\n```suggestion\r\n        if ((res = sqlite3_prepare_v2(m_database.m_db, \"insert or replace into main values(?, ?)\", -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\r\n```",
      "created_at": "2020-10-11T16:35:48Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502937766",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502937766"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502937951",
      "pull_request_review_id": 506196260,
      "id": 502937951,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNzk1MQ==",
      "diff_hunk": "@@ -115,6 +115,43 @@ void SQLiteDatabase::Cleanup()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    assert(m_db);\n+\n+    sqlite3_stmt* stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare statement to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to execute statement to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to read database verification error: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        if (error.original.empty()) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c3aeda3d2f7d7b34b8a35ccea478161b0ca2c80d",
      "in_reply_to_id": 502877051,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops.",
      "created_at": "2020-10-11T16:37:55Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502937951",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502937951"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 191,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502938062",
      "pull_request_review_id": 506196352,
      "id": 502938062,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzODA2Mg==",
      "diff_hunk": "@@ -0,0 +1,624 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <sync.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* const DATABASE_FILENAME = \"wallet.dat\";\n+static constexpr int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+static Mutex g_sqlite_mutex;\n+static int g_sqlite_count GUARDED_BY(g_sqlite_mutex) = 0;\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    // From sqlite3_config() documentation for the SQLITE_CONFIG_LOG option:\n+    // \"The void pointer that is the second argument to SQLITE_CONFIG_LOG is passed through as\n+    // the first parameter to the application-defined logger function whenever that function is\n+    // invoked.\"\n+    // Assert that this is the case:\n+    assert(arg == nullptr);\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock)\n+    : WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    {\n+        LOCK(g_sqlite_mutex);\n+        LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+        LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+        if (++g_sqlite_count == 1) {\n+            // Setup logging\n+            int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            // Force serialized threading mode\n+            ret = sqlite3_config(SQLITE_CONFIG_SERIALIZED);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to configure serialized threading mode: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+        int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    try {\n+        Open(\"\"); // mode is unused\n+    } catch (const std::runtime_error&) {\n+        // If open fails, cleanup this object and rethrow the exception\n+        Cleanup();\n+        throw;\n+    }\n+}\n+\n+void SQLiteBatch::SetupSQLStatements()\n+{\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"SELECT value FROM main WHERE key = ?\", -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"INSERT INTO main VALUES(?, ?)\", -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db,\"insert or replace into main values(?, ?)\", -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "78eb7ade8a99c1fea4562115944f709fd28b14e6",
      "in_reply_to_id": 502937766,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2020-10-11T16:39:14Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502938062",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502938062"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502971698",
      "pull_request_review_id": 506220762,
      "id": 502971698,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk3MTY5OA==",
      "diff_hunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite = true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    /* No-op. See commeng on SQLiteDatabase::Flush */\n+    void Flush() override {}\n+\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& key, CDataStream& value, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    const bool m_mock{false};\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock = false);\n+\n+    ~SQLiteDatabase();\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /* These functions are unused */\n+    void AddRef() override { assert(false); }\n+    void RemoveRef() override { assert(false); }\n+\n+    /** Rewrite the entire database on disk */\n+    bool Rewrite(const char* skip = nullptr) override;\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& dest) const override;\n+\n+    /** No-ops\n+     *\n+     * SQLite always flushes everything to the database file after each transaction\n+     * (each Read/Write/Erase that we do is its own transaction unless we called\n+     * TxnBegin) so there is no need to have Flush or Periodic Flush.\n+     *\n+     * There is no DB env to reload, so ReloadDbEnv has nothing to do\n+     */\n+    void Flush() override {}\n+    bool PeriodicFlush() override { return false; }\n+    void ReloadDbEnv() override {}\n+\n+    void IncrementUpdateCounter() override { ++nUpdateCounter; }\n+\n+    std::string Filename() override { return m_file_path; };",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 90,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "720d017f41a47cf40c4491e3d7ad2f0496634c37",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit, extra `;`.",
      "created_at": "2020-10-11T22:04:18Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502971698",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502971698"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502975954",
      "pull_request_review_id": 506224257,
      "id": 502975954,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk3NTk1NA==",
      "diff_hunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite = true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    /* No-op. See commeng on SQLiteDatabase::Flush */\n+    void Flush() override {}\n+\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& key, CDataStream& value, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    const bool m_mock{false};\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock = false);\n+\n+    ~SQLiteDatabase();\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /* These functions are unused */\n+    void AddRef() override { assert(false); }\n+    void RemoveRef() override { assert(false); }\n+\n+    /** Rewrite the entire database on disk */\n+    bool Rewrite(const char* skip = nullptr) override;\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& dest) const override;\n+\n+    /** No-ops\n+     *\n+     * SQLite always flushes everything to the database file after each transaction\n+     * (each Read/Write/Erase that we do is its own transaction unless we called\n+     * TxnBegin) so there is no need to have Flush or Periodic Flush.\n+     *\n+     * There is no DB env to reload, so ReloadDbEnv has nothing to do\n+     */\n+    void Flush() override {}\n+    bool PeriodicFlush() override { return false; }\n+    void ReloadDbEnv() override {}\n+\n+    void IncrementUpdateCounter() override { ++nUpdateCounter; }\n+\n+    std::string Filename() override { return m_file_path; };",
      "path": "src/wallet/sqlite.h",
      "position": null,
      "original_position": 90,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "720d017f41a47cf40c4491e3d7ad2f0496634c37",
      "in_reply_to_id": 502971698,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2020-10-11T22:44:09Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502975954",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502975954"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503103687",
      "pull_request_review_id": 506374717,
      "id": 503103687,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEwMzY4Nw==",
      "diff_hunk": "@@ -1175,6 +1175,9 @@ fi\n if test x$enable_wallet != xno; then\n     dnl Check for libdb_cxx only if wallet enabled\n     BITCOIN_FIND_BDB48\n+\n+    dnl Check for sqlite3\n+    PKG_CHECK_MODULES([SQLITE], [sqlite3 >= 3.7.17], ,[AC_MSG_ERROR([sqlite3 not found.])])",
      "path": "configure.ac",
      "position": null,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "3eff1f9bec5b92e3cb1e7fa5f0c7e0163b4f4ce2",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "3eff1f9bec5b92e3cb1e7fa5f0c7e0163b4f4ce2, pico-nit: It's odd not seeing a space after `,`\r\n```suggestion\r\n    PKG_CHECK_MODULES([SQLITE], [sqlite3 >= 3.7.17],, [AC_MSG_ERROR([sqlite3 not found.])])\r\n```",
      "created_at": "2020-10-12T07:53:44Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503103687",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503103687"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503104847",
      "pull_request_review_id": 506374717,
      "id": 503104847,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEwNDg0Nw==",
      "diff_hunk": "@@ -0,0 +1,26 @@\n+package=sqlite\n+$(package)_version=3320100\n+$(package)_download_path=https://sqlite.org/2020/\n+$(package)_file_name=sqlite-autoconf-$($(package)_version).tar.gz\n+$(package)_sha256_hash=486748abfb16abd8af664e3a5f03b228e5f124682b0c942e157644bf6fff7d10\n+\n+define $(package)_set_vars\n+$(package)_config_opts=--disable-shared --disable-readline --disable-dynamic-extensions --enable-option-checking\n+$(package)_config_opts_linux=--with-pic\n+endef\n+\n+define $(package)_config_cmds\n+  $($(package)_autoconf)\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE) libsqlite3.la\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install-libLTLIBRARIES install-includeHEADERS install-pkgconfigDATA\n+endef\n+\n+define $(package)_postprocess_cmds\n+  rm -rf lib/*.la",
      "path": "depends/packages/sqlite.mk",
      "position": null,
      "original_position": 25,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "f3b8ee19a09e676762d0584572aee927c4ecaa89",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "f3b8ee19a09e676762d0584572aee927c4ecaa89, nit: both flags are redundant\r\n```suggestion\r\n  rm lib/*.la\r\n```",
      "created_at": "2020-10-12T07:55:48Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503104847",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503104847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503105960",
      "pull_request_review_id": 506374717,
      "id": 503105960,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEwNTk2MA==",
      "diff_hunk": "@@ -21,6 +21,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | Python (tests) |  | [3.5](https://www.python.org/downloads) |  |  |  |\n | qrencode | [3.4.4](https://fukuchi.org/works/qrencode) |  | No |  |  |\n | Qt | [5.9.8](https://download.qt.io/official_releases/qt/) | [5.5.1](https://github.com/bitcoin/bitcoin/issues/13478) | No |  |  |\n+| SQLite 3 | [3.32.1](https://sqlite.org/download.html) | 3.7.17 |  |  |  |",
      "path": "doc/dependencies.md",
      "position": null,
      "original_position": 4,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "61079ce5f2ddd22d10edf500c3852fe04eedc912",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "61079ce5f2ddd22d10edf500c3852fe04eedc912\r\n```suggestion\r\n| SQLite 3 | [3.32.1](https://sqlite.org/download.html) | [3.7.17](https://github.com/bitcoin/bitcoin/pull/19077) |  |  |  |\r\n```",
      "created_at": "2020-10-12T07:57:41Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503105960",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503105960"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503186271",
      "pull_request_review_id": 506479943,
      "id": 503186271,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4NjI3MQ==",
      "diff_hunk": "@@ -80,6 +81,72 @@ void SQLiteDatabase::Cleanup() noexcept\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    int flags = SQLITE_OPEN_FULLMUTEX | SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE;\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        TryCreateDirectories(m_dir_path);\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &m_db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    if (sqlite3_db_readonly(m_db, \"main\") != 0) {\n+        throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+    }\n+\n+    // Acquire an exclusive lock on the database\n+    // First change the locking mode to exclusive\n+    int ret = sqlite3_exec(m_db, \"PRAGMA locking_mode = exclusive\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to change database locking mode to exclusive: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    // Now begin a transaction to acquire the exclusive lock. This lock won't be released until we close because of the exclusive locking mode.\n+    ret = sqlite3_exec(m_db, \"BEGIN EXCLUSIVE TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(\"SQLiteDatabase: Unable to obtain an exclusive lock on the database, is it being used by another bitcoind?\\n\");\n+    }\n+    ret = sqlite3_exec(m_db, \"COMMIT\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to end exclusive lock transaction: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Make the table for our key-value pairs\n+    // First check that the main table exists\n+    sqlite3_stmt* check_main_stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\", -1, &check_main_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to prepare statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    ret = sqlite3_step(check_main_stmt);\n+    if (sqlite3_finalize(check_main_stmt) != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to finalize statement checking table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    bool table_exists;\n+    if (ret == SQLITE_DONE) {\n+        table_exists = false;\n+    } else if (ret == SQLITE_ROW) {\n+        table_exists = true;\n+    } else {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to execute statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Do the db setup things because the table doesn't exist only when we are creating a new wallet\n+    if (!table_exists) {\n+        ret = sqlite3_exec(m_db, \"CREATE TABLE main(key BLOB PRIMARY KEY NOT NULL, value BLOB NOT NULL)\", nullptr, nullptr, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        // Enable fullfsync for the platforms that use it\n+        ret = sqlite3_exec(m_db, \"PRAGMA fullfsync = true\", nullptr, nullptr, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to enable fullfsync: %s\\n\", sqlite3_errstr(ret)));\n+        }",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "f4fd2218d705ed08f8554f9cd1946c087335d2f2",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "f4fd2218d705ed08f8554f9cd1946c087335d2f2\r\n\r\nThe [F_FULLFSYNC syncing method](https://sqlite.org/pragma.html#pragma_fullfsync) is supported by macOS only. Do we really want to implement plarform-dependant behavior of a wallet database?",
      "created_at": "2020-10-12T10:06:55Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503186271",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503186271"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": 144,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 266,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503224576",
      "pull_request_review_id": 506527775,
      "id": 503224576,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIyNDU3Ng==",
      "diff_hunk": "@@ -80,6 +81,72 @@ void SQLiteDatabase::Cleanup() noexcept\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    int flags = SQLITE_OPEN_FULLMUTEX | SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE;\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        TryCreateDirectories(m_dir_path);\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &m_db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    if (sqlite3_db_readonly(m_db, \"main\") != 0) {\n+        throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+    }\n+\n+    // Acquire an exclusive lock on the database\n+    // First change the locking mode to exclusive\n+    int ret = sqlite3_exec(m_db, \"PRAGMA locking_mode = exclusive\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to change database locking mode to exclusive: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    // Now begin a transaction to acquire the exclusive lock. This lock won't be released until we close because of the exclusive locking mode.\n+    ret = sqlite3_exec(m_db, \"BEGIN EXCLUSIVE TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(\"SQLiteDatabase: Unable to obtain an exclusive lock on the database, is it being used by another bitcoind?\\n\");\n+    }\n+    ret = sqlite3_exec(m_db, \"COMMIT\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to end exclusive lock transaction: %s\\n\", sqlite3_errstr(ret)));\n+    }",
      "path": "src/wallet/sqlite.cpp",
      "position": 234,
      "original_position": 43,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "f4fd2218d705ed08f8554f9cd1946c087335d2f2",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "f4fd2218d705ed08f8554f9cd1946c087335d2f2\r\n\r\nAccording to SQLite [docs](https://sqlite.org/lockingv3.html#transaction_control) the actual moment of `EXCLUSIVE` lock acquiring is a bit vague:\r\n> Note that the BEGIN command does not acquire any locks on the database. ... No EXCLUSIVE lock is acquired until either the memory cache fills up and must be spilled to disk or until the transaction commits.\r\n\r\n> The SQL command \"COMMIT\" does not actually commit the changes to disk. It just turns autocommit back on. Then, at the conclusion of the command, the regular autocommit logic takes over and causes the actual commit to disk to occur.\r\n\r\nIt's just a note for other reviewers.\r\n> ",
      "created_at": "2020-10-12T11:17:44Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503224576",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503224576"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": 220,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": 234,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503351332",
      "pull_request_review_id": 506691976,
      "id": 503351332,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM1MTMzMg==",
      "diff_hunk": "@@ -80,6 +81,72 @@ void SQLiteDatabase::Cleanup() noexcept\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    int flags = SQLITE_OPEN_FULLMUTEX | SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE;\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        TryCreateDirectories(m_dir_path);\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &m_db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    if (sqlite3_db_readonly(m_db, \"main\") != 0) {\n+        throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+    }\n+\n+    // Acquire an exclusive lock on the database\n+    // First change the locking mode to exclusive\n+    int ret = sqlite3_exec(m_db, \"PRAGMA locking_mode = exclusive\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to change database locking mode to exclusive: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    // Now begin a transaction to acquire the exclusive lock. This lock won't be released until we close because of the exclusive locking mode.\n+    ret = sqlite3_exec(m_db, \"BEGIN EXCLUSIVE TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(\"SQLiteDatabase: Unable to obtain an exclusive lock on the database, is it being used by another bitcoind?\\n\");\n+    }\n+    ret = sqlite3_exec(m_db, \"COMMIT\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to end exclusive lock transaction: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Make the table for our key-value pairs\n+    // First check that the main table exists\n+    sqlite3_stmt* check_main_stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\", -1, &check_main_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to prepare statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    ret = sqlite3_step(check_main_stmt);\n+    if (sqlite3_finalize(check_main_stmt) != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to finalize statement checking table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    bool table_exists;\n+    if (ret == SQLITE_DONE) {\n+        table_exists = false;\n+    } else if (ret == SQLITE_ROW) {\n+        table_exists = true;\n+    } else {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to execute statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Do the db setup things because the table doesn't exist only when we are creating a new wallet\n+    if (!table_exists) {\n+        ret = sqlite3_exec(m_db, \"CREATE TABLE main(key BLOB PRIMARY KEY NOT NULL, value BLOB NOT NULL)\", nullptr, nullptr, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        // Enable fullfsync for the platforms that use it\n+        ret = sqlite3_exec(m_db, \"PRAGMA fullfsync = true\", nullptr, nullptr, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to enable fullfsync: %s\\n\", sqlite3_errstr(ret)));\n+        }",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "f4fd2218d705ed08f8554f9cd1946c087335d2f2",
      "in_reply_to_id": 503186271,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fullfsync ensures that the data is written to disk on macOS, so we definitely need it.",
      "created_at": "2020-10-12T14:54:06Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503351332",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503351332"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": 144,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 266,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503353490",
      "pull_request_review_id": 506694714,
      "id": 503353490,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM1MzQ5MA==",
      "diff_hunk": "@@ -1175,6 +1175,9 @@ fi\n if test x$enable_wallet != xno; then\n     dnl Check for libdb_cxx only if wallet enabled\n     BITCOIN_FIND_BDB48\n+\n+    dnl Check for sqlite3\n+    PKG_CHECK_MODULES([SQLITE], [sqlite3 >= 3.7.17], ,[AC_MSG_ERROR([sqlite3 not found.])])",
      "path": "configure.ac",
      "position": null,
      "original_position": 6,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "3eff1f9bec5b92e3cb1e7fa5f0c7e0163b4f4ce2",
      "in_reply_to_id": 503103687,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-12T14:57:21Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503353490",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503353490"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503353549",
      "pull_request_review_id": 506694783,
      "id": 503353549,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM1MzU0OQ==",
      "diff_hunk": "@@ -0,0 +1,26 @@\n+package=sqlite\n+$(package)_version=3320100\n+$(package)_download_path=https://sqlite.org/2020/\n+$(package)_file_name=sqlite-autoconf-$($(package)_version).tar.gz\n+$(package)_sha256_hash=486748abfb16abd8af664e3a5f03b228e5f124682b0c942e157644bf6fff7d10\n+\n+define $(package)_set_vars\n+$(package)_config_opts=--disable-shared --disable-readline --disable-dynamic-extensions --enable-option-checking\n+$(package)_config_opts_linux=--with-pic\n+endef\n+\n+define $(package)_config_cmds\n+  $($(package)_autoconf)\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE) libsqlite3.la\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install-libLTLIBRARIES install-includeHEADERS install-pkgconfigDATA\n+endef\n+\n+define $(package)_postprocess_cmds\n+  rm -rf lib/*.la",
      "path": "depends/packages/sqlite.mk",
      "position": null,
      "original_position": 25,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "f3b8ee19a09e676762d0584572aee927c4ecaa89",
      "in_reply_to_id": 503104847,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-12T14:57:26Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503353549",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503353549"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503353599",
      "pull_request_review_id": 506694845,
      "id": 503353599,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM1MzU5OQ==",
      "diff_hunk": "@@ -21,6 +21,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | Python (tests) |  | [3.5](https://www.python.org/downloads) |  |  |  |\n | qrencode | [3.4.4](https://fukuchi.org/works/qrencode) |  | No |  |  |\n | Qt | [5.9.8](https://download.qt.io/official_releases/qt/) | [5.5.1](https://github.com/bitcoin/bitcoin/issues/13478) | No |  |  |\n+| SQLite 3 | [3.32.1](https://sqlite.org/download.html) | 3.7.17 |  |  |  |",
      "path": "doc/dependencies.md",
      "position": null,
      "original_position": 4,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "61079ce5f2ddd22d10edf500c3852fe04eedc912",
      "in_reply_to_id": 503105960,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-12T14:57:30Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503353599",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503353599"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503366280",
      "pull_request_review_id": 506711705,
      "id": 503366280,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM2NjI4MA==",
      "diff_hunk": "@@ -109,6 +109,43 @@ void SQLiteDatabase::Cleanup() noexcept\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    assert(m_db);\n+\n+    sqlite3_stmt* stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare statement to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "554dac60f160df08f94497a78e3e7a30217a5850",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "554dac60f160df08f94497a78e3e7a30217a5850, nit: is `else` required here\r\n```suggestion\r\n        if (ret == SQLITE_DONE) break;\r\n        if (ret != SQLITE_ROW) {\r\n```\r\n?",
      "created_at": "2020-10-12T15:18:12Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503366280",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503366280"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": 125,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503369412",
      "pull_request_review_id": 506715854,
      "id": 503369412,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM2OTQxMg==",
      "diff_hunk": "@@ -109,6 +109,43 @@ void SQLiteDatabase::Cleanup() noexcept\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    assert(m_db);\n+\n+    sqlite3_stmt* stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare statement to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "554dac60f160df08f94497a78e3e7a30217a5850",
      "in_reply_to_id": 503366280,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think that `ret != SQLITE_ROW` is a sufficient catch-all. We only want to special case `SQLITE_DONE`.",
      "created_at": "2020-10-12T15:23:23Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503369412",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503369412"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": 125,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503372405",
      "pull_request_review_id": 506719646,
      "id": 503372405,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM3MjQwNQ==",
      "diff_hunk": "@@ -109,6 +109,43 @@ void SQLiteDatabase::Cleanup() noexcept\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    assert(m_db);\n+\n+    sqlite3_stmt* stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare statement to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "554dac60f160df08f94497a78e3e7a30217a5850",
      "in_reply_to_id": 503366280,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree with you. Why do we need `else` word for that?",
      "created_at": "2020-10-12T15:28:10Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503372405",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503372405"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": 125,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503379686",
      "pull_request_review_id": 506728959,
      "id": 503379686,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM3OTY4Ng==",
      "diff_hunk": "@@ -109,6 +109,43 @@ void SQLiteDatabase::Cleanup() noexcept\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    assert(m_db);\n+\n+    sqlite3_stmt* stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare statement to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "554dac60f160df08f94497a78e3e7a30217a5850",
      "in_reply_to_id": 503366280,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I guess it isn't strictly necessary, but it doesn't really matter.",
      "created_at": "2020-10-12T15:40:29Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503379686",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503379686"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": 125,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503380408",
      "pull_request_review_id": 506729907,
      "id": 503380408,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM4MDQwOA==",
      "diff_hunk": "@@ -109,6 +109,43 @@ void SQLiteDatabase::Cleanup() noexcept\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    assert(m_db);\n+\n+    sqlite3_stmt* stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare statement to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "554dac60f160df08f94497a78e3e7a30217a5850",
      "in_reply_to_id": 503366280,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You are right again :)",
      "created_at": "2020-10-12T15:41:44Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503380408",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503380408"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": 125,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503541979",
      "pull_request_review_id": 506930848,
      "id": 503541979,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0MTk3OQ==",
      "diff_hunk": "@@ -0,0 +1,627 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <sync.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* const DATABASE_FILENAME = \"wallet.dat\";\n+static constexpr int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+static Mutex g_sqlite_mutex;\n+static int g_sqlite_count GUARDED_BY(g_sqlite_mutex) = 0;\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    // From sqlite3_config() documentation for the SQLITE_CONFIG_LOG option:\n+    // \"The void pointer that is the second argument to SQLITE_CONFIG_LOG is passed through as\n+    // the first parameter to the application-defined logger function whenever that function is\n+    // invoked.\"\n+    // Assert that this is the case:\n+    assert(arg == nullptr);\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock)\n+    : WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    {\n+        LOCK(g_sqlite_mutex);\n+        LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+        LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+        if (++g_sqlite_count == 1) {\n+            // Setup logging\n+            int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            // Force serialized threading mode\n+            ret = sqlite3_config(SQLITE_CONFIG_SERIALIZED);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to configure serialized threading mode: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+        int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    try {\n+        Open(\"\"); // mode is unused\n+    } catch (const std::runtime_error&) {\n+        // If open fails, cleanup this object and rethrow the exception\n+        Cleanup();\n+        throw;\n+    }\n+}\n+\n+void SQLiteBatch::SetupSQLStatements()\n+{\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"SELECT value FROM main WHERE key = ?\", -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"INSERT INTO main VALUES(?, ?)\", -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"insert or replace into main values(?, ?)\", -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "f00d666e85cee5b347f162cc2a9f56a40e543ee9",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: capitalisation of SQL statement",
      "created_at": "2020-10-12T21:31:18Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503541979",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503541979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503561815",
      "pull_request_review_id": 506949993,
      "id": 503561815,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU2MTgxNQ==",
      "diff_hunk": "@@ -265,22 +265,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    res = sqlite3_step(m_read_stmt);\n+    if (res != SQLITE_ROW) {\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    // Leftmost column in result is index 0\n+    const char* data = (const char*)sqlite3_column_blob(m_read_stmt, 0);\n+    int data_size = sqlite3_column_bytes(m_read_stmt, 0);\n+    value.write(data, data_size);\n+\n+    sqlite3_clear_bindings(m_read_stmt);\n+    sqlite3_reset(m_read_stmt);\n+    return true;\n }\n \n bool SQLiteBatch::WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    if (m_read_only) throw std::runtime_error(\"Write called on database in read-only mode\");\n+    assert(m_insert_stmt && m_overwrite_stmt);\n+\n+    sqlite3_stmt* stmt;\n+    if (overwrite) {\n+        stmt = m_overwrite_stmt;\n+    } else {\n+        stmt = m_insert_stmt;\n+    }\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    // Insert index 1 is key, 2 is value\n+    int res = sqlite3_bind_blob(stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n+        return false;\n+    }\n+    res = sqlite3_bind_blob(stmt, 2, value.data(), value.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n+        return false;\n+    }\n+\n+    // Execute\n+    res = sqlite3_step(stmt);\n+    sqlite3_clear_bindings(stmt);\n+    sqlite3_reset(stmt);\n+    return res == SQLITE_DONE;\n }\n \n bool SQLiteBatch::EraseKey(CDataStream&& key)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    if (m_read_only) throw std::runtime_error(\"Erase called on database in read-only mode\");\n+    assert(m_delete_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_delete_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_delete_stmt);\n+        sqlite3_reset(m_delete_stmt);\n+        return false;\n+    }\n+\n+    // Execute\n+    res = sqlite3_step(m_delete_stmt);\n+    sqlite3_clear_bindings(m_delete_stmt);\n+    sqlite3_reset(m_delete_stmt);\n+    return res == SQLITE_DONE;\n }\n \n bool SQLiteBatch::HasKey(CDataStream&& key)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    bool ret = false;\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);",
      "path": "src/wallet/sqlite.cpp",
      "position": 486,
      "original_position": 97,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "36ea015032ddf1aa7d424b463c2c6c531d832295",
      "in_reply_to_id": 500722270,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "40b15923da624272830ab51ac30be892b9d5712b\r\n\r\nIt was already suggested in https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-497108156\r\n\r\n> Could add a dedicated statement for HasKey, see https://stackoverflow.com/a/9756276/1978589. Are you going to add any index to main table?\r\n\r\nAnyway it could also log \"Unable to bind value to statement\" when binding fails.",
      "created_at": "2020-10-12T22:17:29Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503561815",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503561815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 486,
      "original_line": 486,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503914986",
      "pull_request_review_id": 507385953,
      "id": 503914986,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkxNDk4Ng==",
      "diff_hunk": "@@ -80,6 +81,72 @@ void SQLiteDatabase::Cleanup() noexcept\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    int flags = SQLITE_OPEN_FULLMUTEX | SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE;\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        TryCreateDirectories(m_dir_path);\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &m_db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    if (sqlite3_db_readonly(m_db, \"main\") != 0) {\n+        throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+    }\n+\n+    // Acquire an exclusive lock on the database\n+    // First change the locking mode to exclusive\n+    int ret = sqlite3_exec(m_db, \"PRAGMA locking_mode = exclusive\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to change database locking mode to exclusive: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    // Now begin a transaction to acquire the exclusive lock. This lock won't be released until we close because of the exclusive locking mode.\n+    ret = sqlite3_exec(m_db, \"BEGIN EXCLUSIVE TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(\"SQLiteDatabase: Unable to obtain an exclusive lock on the database, is it being used by another bitcoind?\\n\");\n+    }\n+    ret = sqlite3_exec(m_db, \"COMMIT\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to end exclusive lock transaction: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Make the table for our key-value pairs\n+    // First check that the main table exists\n+    sqlite3_stmt* check_main_stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\", -1, &check_main_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to prepare statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    ret = sqlite3_step(check_main_stmt);\n+    if (sqlite3_finalize(check_main_stmt) != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to finalize statement checking table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    bool table_exists;\n+    if (ret == SQLITE_DONE) {\n+        table_exists = false;\n+    } else if (ret == SQLITE_ROW) {\n+        table_exists = true;\n+    } else {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to execute statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Do the db setup things because the table doesn't exist only when we are creating a new wallet\n+    if (!table_exists) {\n+        ret = sqlite3_exec(m_db, \"CREATE TABLE main(key BLOB PRIMARY KEY NOT NULL, value BLOB NOT NULL)\", nullptr, nullptr, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        // Enable fullfsync for the platforms that use it\n+        ret = sqlite3_exec(m_db, \"PRAGMA fullfsync = true\", nullptr, nullptr, nullptr);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "5d3391a430f394d58047ca31f57f597cd0cbabba",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It looks like most pragmas are not persistent: http://sqlite.1065341.n5.nabble.com/Which-pragmas-are-persistent-td95287.html (I tested that `application_id` is persisted, but `fullfsync` is `0`) ",
      "created_at": "2020-10-13T12:37:31Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503914986",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/503914986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504067803",
      "pull_request_review_id": 507590356,
      "id": 504067803,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA2NzgwMw==",
      "diff_hunk": "@@ -109,6 +109,43 @@ void SQLiteDatabase::Cleanup() noexcept\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    assert(m_db);\n+\n+    sqlite3_stmt* stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare statement to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "554dac60f160df08f94497a78e3e7a30217a5850",
      "in_reply_to_id": 503366280,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed.",
      "created_at": "2020-10-13T15:54:48Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r504067803",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504067803"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": 125,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504067878",
      "pull_request_review_id": 507590461,
      "id": 504067878,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA2Nzg3OA==",
      "diff_hunk": "@@ -0,0 +1,627 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <sync.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* const DATABASE_FILENAME = \"wallet.dat\";\n+static constexpr int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+static Mutex g_sqlite_mutex;\n+static int g_sqlite_count GUARDED_BY(g_sqlite_mutex) = 0;\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    // From sqlite3_config() documentation for the SQLITE_CONFIG_LOG option:\n+    // \"The void pointer that is the second argument to SQLITE_CONFIG_LOG is passed through as\n+    // the first parameter to the application-defined logger function whenever that function is\n+    // invoked.\"\n+    // Assert that this is the case:\n+    assert(arg == nullptr);\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock)\n+    : WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    {\n+        LOCK(g_sqlite_mutex);\n+        LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+        LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+        if (++g_sqlite_count == 1) {\n+            // Setup logging\n+            int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            // Force serialized threading mode\n+            ret = sqlite3_config(SQLITE_CONFIG_SERIALIZED);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to configure serialized threading mode: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+        int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    try {\n+        Open(\"\"); // mode is unused\n+    } catch (const std::runtime_error&) {\n+        // If open fails, cleanup this object and rethrow the exception\n+        Cleanup();\n+        throw;\n+    }\n+}\n+\n+void SQLiteBatch::SetupSQLStatements()\n+{\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"SELECT value FROM main WHERE key = ?\", -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"INSERT INTO main VALUES(?, ?)\", -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"insert or replace into main values(?, ?)\", -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "f00d666e85cee5b347f162cc2a9f56a40e543ee9",
      "in_reply_to_id": 503541979,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2020-10-13T15:54:54Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r504067878",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504067878"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504068161",
      "pull_request_review_id": 507590741,
      "id": 504068161,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA2ODE2MQ==",
      "diff_hunk": "@@ -80,6 +81,72 @@ void SQLiteDatabase::Cleanup() noexcept\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    int flags = SQLITE_OPEN_FULLMUTEX | SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE;\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        TryCreateDirectories(m_dir_path);\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &m_db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    if (sqlite3_db_readonly(m_db, \"main\") != 0) {\n+        throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+    }\n+\n+    // Acquire an exclusive lock on the database\n+    // First change the locking mode to exclusive\n+    int ret = sqlite3_exec(m_db, \"PRAGMA locking_mode = exclusive\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to change database locking mode to exclusive: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    // Now begin a transaction to acquire the exclusive lock. This lock won't be released until we close because of the exclusive locking mode.\n+    ret = sqlite3_exec(m_db, \"BEGIN EXCLUSIVE TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(\"SQLiteDatabase: Unable to obtain an exclusive lock on the database, is it being used by another bitcoind?\\n\");\n+    }\n+    ret = sqlite3_exec(m_db, \"COMMIT\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to end exclusive lock transaction: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Make the table for our key-value pairs\n+    // First check that the main table exists\n+    sqlite3_stmt* check_main_stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\", -1, &check_main_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to prepare statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    ret = sqlite3_step(check_main_stmt);\n+    if (sqlite3_finalize(check_main_stmt) != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to finalize statement checking table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    bool table_exists;\n+    if (ret == SQLITE_DONE) {\n+        table_exists = false;\n+    } else if (ret == SQLITE_ROW) {\n+        table_exists = true;\n+    } else {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to execute statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Do the db setup things because the table doesn't exist only when we are creating a new wallet\n+    if (!table_exists) {\n+        ret = sqlite3_exec(m_db, \"CREATE TABLE main(key BLOB PRIMARY KEY NOT NULL, value BLOB NOT NULL)\", nullptr, nullptr, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        // Enable fullfsync for the platforms that use it\n+        ret = sqlite3_exec(m_db, \"PRAGMA fullfsync = true\", nullptr, nullptr, nullptr);",
      "path": "src/wallet/sqlite.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "5d3391a430f394d58047ca31f57f597cd0cbabba",
      "in_reply_to_id": 503914986,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Moved this to always be run right after the lock is acquired.",
      "created_at": "2020-10-13T15:55:12Z",
      "updated_at": "2020-10-14T15:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r504068161",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504068161"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504805234",
      "pull_request_review_id": 508514203,
      "id": 504805234,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgwNTIzNA==",
      "diff_hunk": "@@ -72,8 +72,9 @@ Subdirectory | File(s)           | Description\n -------------|-------------------|------------\n `database/`  | BDB logging files | Part of BDB environment; created at start and deleted on shutdown; a user *must keep it as safe* as personal wallet `wallet.dat`\n `./`         | `db.log`          | BDB error file\n-`./`         | `wallet.dat`      | Personal wallet (BDB) with keys and transactions\n+`./`         | `wallet.dat`      | Personal wallet with keys and transactions. May be either a Berkeley DB or SQLite database file.\n `./`         | `.walletlock`     | Wallet lock file\n+`./`         | `wallet.dat-journal` | SQLite Rollback Journal file for `wallet.dat`. Usually created at start and deleted on shutdown. A user *must keep it as safe* as the `wallet.dat` file.",
      "path": "doc/files.md",
      "position": 7,
      "original_position": 7,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "6c6639ac9f6e1677da066cf809f9e3fa4d2e7c32",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Include sqlite3 in documentation\" (6c6639ac9f6e1677da066cf809f9e3fa4d2e7c32)\r\n\r\nIf need to update, there are two corrections that could be made:\r\n\r\n- Line 69 \"Wallets are Berkeley DB (BDB) databases\" is no longer true\r\n- Line 76 \"Wallet lock file\" should say \"BDB wallet lock file\"",
      "created_at": "2020-10-14T16:15:16Z",
      "updated_at": "2020-10-14T16:28:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r504805234",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504805234"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 77,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/505351038",
      "pull_request_review_id": 509149864,
      "id": 505351038,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM1MTAzOA==",
      "diff_hunk": "@@ -72,8 +72,9 @@ Subdirectory | File(s)           | Description\n -------------|-------------------|------------\n `database/`  | BDB logging files | Part of BDB environment; created at start and deleted on shutdown; a user *must keep it as safe* as personal wallet `wallet.dat`\n `./`         | `db.log`          | BDB error file\n-`./`         | `wallet.dat`      | Personal wallet (BDB) with keys and transactions\n+`./`         | `wallet.dat`      | Personal wallet with keys and transactions. May be either a Berkeley DB or SQLite database file.\n `./`         | `.walletlock`     | Wallet lock file\n+`./`         | `wallet.dat-journal` | SQLite Rollback Journal file for `wallet.dat`. Usually created at start and deleted on shutdown. A user *must keep it as safe* as the `wallet.dat` file.",
      "path": "doc/files.md",
      "position": 7,
      "original_position": 7,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "6c6639ac9f6e1677da066cf809f9e3fa4d2e7c32",
      "in_reply_to_id": 504805234,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Addressed in #20152.",
      "created_at": "2020-10-15T08:42:38Z",
      "updated_at": "2020-10-15T08:42:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r505351038",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/505351038"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 77,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/518223118",
      "pull_request_review_id": 524490449,
      "id": 518223118,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIyMzExOA==",
      "diff_hunk": "@@ -0,0 +1,629 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <sync.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* const DATABASE_FILENAME = \"wallet.dat\";\n+static constexpr int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+static Mutex g_sqlite_mutex;\n+static int g_sqlite_count GUARDED_BY(g_sqlite_mutex) = 0;\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    // From sqlite3_config() documentation for the SQLITE_CONFIG_LOG option:\n+    // \"The void pointer that is the second argument to SQLITE_CONFIG_LOG is passed through as\n+    // the first parameter to the application-defined logger function whenever that function is\n+    // invoked.\"\n+    // Assert that this is the case:\n+    assert(arg == nullptr);\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock)\n+    : WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    {\n+        LOCK(g_sqlite_mutex);\n+        LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+        LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+        if (++g_sqlite_count == 1) {\n+            // Setup logging\n+            int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            // Force serialized threading mode\n+            ret = sqlite3_config(SQLITE_CONFIG_SERIALIZED);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to configure serialized threading mode: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+        int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    try {\n+        Open();\n+    } catch (const std::runtime_error&) {\n+        // If open fails, cleanup this object and rethrow the exception\n+        Cleanup();\n+        throw;\n+    }\n+}\n+\n+void SQLiteBatch::SetupSQLStatements()\n+{\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"SELECT value FROM main WHERE key = ?\", -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"INSERT INTO main VALUES(?, ?)\", -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"INSERT or REPLACE into main values(?, ?)\", -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"DELETE FROM main WHERE key = ?\", -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"SELECT key, value FROM main\", -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Cleanup();\n+}\n+\n+void SQLiteDatabase::Cleanup() noexcept\n+{\n+    Close();\n+\n+    LOCK(g_sqlite_mutex);\n+    if (--g_sqlite_count == 0) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    assert(m_db);\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt{nullptr};\n+    int ret = sqlite3_prepare_v2(m_db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = static_cast<uint32_t>(sqlite3_column_int(app_id_stmt, 0));\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare statement to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        }\n+        if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to execute statement to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to read database verification error: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        if (error.empty()) {\n+            error = _(\"Failed to verify database\") + Untranslated(\"\\n\");\n+        }\n+        error += Untranslated(strprintf(\"%s\\n\", str_msg));\n+    }\n+    sqlite3_finalize(stmt);\n+    return error.empty();\n+}\n+\n+void SQLiteDatabase::Open()\n+{\n+    int flags = SQLITE_OPEN_FULLMUTEX | SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE;\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        TryCreateDirectories(m_dir_path);\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &m_db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    if (sqlite3_db_readonly(m_db, \"main\") != 0) {\n+        throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+    }\n+\n+    // Acquire an exclusive lock on the database\n+    // First change the locking mode to exclusive\n+    int ret = sqlite3_exec(m_db, \"PRAGMA locking_mode = exclusive\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to change database locking mode to exclusive: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    // Now begin a transaction to acquire the exclusive lock. This lock won't be released until we close because of the exclusive locking mode.\n+    ret = sqlite3_exec(m_db, \"BEGIN EXCLUSIVE TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(\"SQLiteDatabase: Unable to obtain an exclusive lock on the database, is it being used by another bitcoind?\\n\");\n+    }\n+    ret = sqlite3_exec(m_db, \"COMMIT\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to end exclusive lock transaction: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Enable fullfsync for the platforms that use it\n+    ret = sqlite3_exec(m_db, \"PRAGMA fullfsync = true\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to enable fullfsync: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Make the table for our key-value pairs\n+    // First check that the main table exists\n+    sqlite3_stmt* check_main_stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\", -1, &check_main_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to prepare statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    ret = sqlite3_step(check_main_stmt);\n+    if (sqlite3_finalize(check_main_stmt) != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to finalize statement checking table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    bool table_exists;\n+    if (ret == SQLITE_DONE) {\n+        table_exists = false;\n+    } else if (ret == SQLITE_ROW) {\n+        table_exists = true;\n+    } else {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to execute statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Do the db setup things because the table doesn't exist only when we are creating a new wallet\n+    if (!table_exists) {\n+        ret = sqlite3_exec(m_db, \"CREATE TABLE main(key BLOB PRIMARY KEY NOT NULL, value BLOB NOT NULL)\", nullptr, nullptr, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        // Set the application id\n+        uint32_t app_id = ReadBE32(Params().MessageStart());\n+        std::string set_app_id = strprintf(\"PRAGMA application_id = %d\", static_cast<int32_t>(app_id));\n+        ret = sqlite3_exec(m_db, set_app_id.c_str(), nullptr, nullptr, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to set the application id: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        // Set the user version\n+        std::string set_user_ver = strprintf(\"PRAGMA user_version = %d\", WALLET_SCHEMA_VERSION);\n+        ret = sqlite3_exec(m_db, set_user_ver.c_str(), nullptr, nullptr, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to set the wallet schema version: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Rewrite(const char* skip)\n+{\n+    // Rewrite the database using the VACUUM command: https://sqlite.org/lang_vacuum.html\n+    int ret = sqlite3_exec(m_db, \"VACUUM\", nullptr, nullptr, nullptr);\n+    return ret == SQLITE_OK;\n+}\n+\n+bool SQLiteDatabase::Backup(const std::string& dest) const\n+{\n+    sqlite3* db_copy;\n+    int res = sqlite3_open(dest.c_str(), &db_copy);\n+    if (res != SQLITE_OK) {\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    sqlite3_backup* backup = sqlite3_backup_init(db_copy, \"main\", m_db, \"main\");\n+    if (!backup) {\n+        LogPrintf(\"%s: Unable to begin backup: %s\\n\", __func__, sqlite3_errmsg(m_db));\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    // Specifying -1 will copy all of the pages\n+    res = sqlite3_backup_step(backup, -1);\n+    if (res != SQLITE_DONE) {\n+        LogPrintf(\"%s: Unable to backup: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_backup_finish(backup);\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    res = sqlite3_backup_finish(backup);\n+    sqlite3_close(db_copy);\n+    return res == SQLITE_OK;\n+}\n+\n+void SQLiteDatabase::Close()\n+{\n+    int res = sqlite3_close(m_db);\n+    if (res != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to close database: %s\\n\", sqlite3_errstr(res)));\n+    }\n+    m_db = nullptr;\n+}\n+\n+std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(bool flush_on_close)\n+{\n+    // We ignore flush_on_close because we don't do manual flushing for SQLite\n+    return MakeUnique<SQLiteBatch>(*this);\n+}\n+\n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database)\n+    : m_database(database)\n+{\n+    // Make sure we have a db handle\n+    assert(m_database.m_db);\n+\n+    SetupSQLStatements();\n+}\n+\n+void SQLiteBatch::Close()\n+{\n+    // If m_db is in a transaction (i.e. not in autocommit mode), then abort the transaction in progress\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        if (TxnAbort()) {\n+            LogPrintf(\"SQLiteBatch: Batch closed unexpectedly without the transaction being explicitly committed or aborted\\n\");\n+        } else {\n+            LogPrintf(\"SQLiteBatch: Batch closed and failed to abort transaction\\n\");\n+        }\n+    }\n+\n+    // Free all of the prepared statements\n+    int ret = sqlite3_finalize(m_read_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize read statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    ret = sqlite3_finalize(m_insert_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize insert statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    ret = sqlite3_finalize(m_overwrite_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize overwrite statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    ret = sqlite3_finalize(m_delete_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize delete statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    ret = sqlite3_finalize(m_cursor_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize cursor statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    m_read_stmt = nullptr;\n+    m_insert_stmt = nullptr;\n+    m_overwrite_stmt = nullptr;\n+    m_delete_stmt = nullptr;\n+    m_cursor_stmt = nullptr;\n+}\n+\n+bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: Unable to bind statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    res = sqlite3_step(m_read_stmt);\n+    if (res != SQLITE_ROW) {\n+        if (res != SQLITE_DONE) {\n+            // SQLITE_DONE means \"not found\", don't log an error in that case.\n+            LogPrintf(\"%s: Unable to execute statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        }\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    // Leftmost column in result is index 0\n+    const char* data = reinterpret_cast<const char*>(sqlite3_column_blob(m_read_stmt, 0));\n+    int data_size = sqlite3_column_bytes(m_read_stmt, 0);\n+    value.write(data, data_size);\n+\n+    sqlite3_clear_bindings(m_read_stmt);\n+    sqlite3_reset(m_read_stmt);\n+    return true;\n+}\n+\n+bool SQLiteBatch::WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_insert_stmt && m_overwrite_stmt);\n+\n+    sqlite3_stmt* stmt;\n+    if (overwrite) {\n+        stmt = m_overwrite_stmt;\n+    } else {\n+        stmt = m_insert_stmt;\n+    }\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    // Insert index 1 is key, 2 is value\n+    int res = sqlite3_bind_blob(stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: Unable to bind key to statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n+        return false;\n+    }\n+    res = sqlite3_bind_blob(stmt, 2, value.data(), value.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: Unable to bind value to statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n+        return false;\n+    }\n+\n+    // Execute\n+    res = sqlite3_step(stmt);\n+    sqlite3_clear_bindings(stmt);\n+    sqlite3_reset(stmt);\n+    if (res != SQLITE_DONE) {\n+        LogPrintf(\"%s: Unable to execute statement: %s\\n\", __func__, sqlite3_errstr(res));\n+    }\n+    return res == SQLITE_DONE;\n+}\n+\n+bool SQLiteBatch::EraseKey(CDataStream&& key)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_delete_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_delete_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: Unable to bind statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_clear_bindings(m_delete_stmt);\n+        sqlite3_reset(m_delete_stmt);\n+        return false;\n+    }\n+\n+    // Execute\n+    res = sqlite3_step(m_delete_stmt);\n+    sqlite3_clear_bindings(m_delete_stmt);\n+    sqlite3_reset(m_delete_stmt);\n+    if (res != SQLITE_DONE) {\n+        LogPrintf(\"%s: Unable to execute statement: %s\\n\", __func__, sqlite3_errstr(res));\n+    }\n+    return res == SQLITE_DONE;\n+}\n+\n+bool SQLiteBatch::HasKey(CDataStream&& key)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    bool ret = false;\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res == SQLITE_OK) {\n+        res = sqlite3_step(m_read_stmt);\n+        if (res == SQLITE_ROW) {\n+            ret = true;\n+        }\n+    }\n+\n+    sqlite3_clear_bindings(m_read_stmt);\n+    sqlite3_reset(m_read_stmt);\n+    return ret;\n+}\n+\n+bool SQLiteBatch::StartCursor()\n+{\n+    assert(!m_cursor_init);\n+    if (!m_database.m_db) return false;\n+    m_cursor_init = true;\n+    return true;\n+}\n+\n+bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& complete)\n+{\n+    complete = false;\n+\n+    if (!m_cursor_init) return false;\n+\n+    int res = sqlite3_step(m_cursor_stmt);\n+    if (res == SQLITE_DONE) {\n+        complete = true;\n+        return true;\n+    }\n+    if (res != SQLITE_ROW) {\n+        LogPrintf(\"SQLiteBatch::ReadAtCursor: Unable to execute cursor step: %s\\n\", sqlite3_errstr(res));\n+        return false;\n+    }\n+\n+    // Leftmost column in result is index 0\n+    const char* key_data = reinterpret_cast<const char*>(sqlite3_column_blob(m_cursor_stmt, 0));\n+    int key_data_size = sqlite3_column_bytes(m_cursor_stmt, 0);\n+    key.write(key_data, key_data_size);\n+    const char* value_data = reinterpret_cast<const char*>(sqlite3_column_blob(m_cursor_stmt, 1));\n+    int value_data_size = sqlite3_column_bytes(m_cursor_stmt, 1);\n+    value.write(value_data, value_data_size);\n+    return true;\n+}\n+\n+void SQLiteBatch::CloseCursor()\n+{\n+    sqlite3_reset(m_cursor_stmt);\n+    m_cursor_init = false;\n+}\n+\n+bool SQLiteBatch::TxnBegin()\n+{\n+    if (!m_database.m_db || sqlite3_get_autocommit(m_database.m_db) == 0) return false;\n+    int res = sqlite3_exec(m_database.m_db, \"BEGIN TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Failed to begin the transaction\\n\");\n+    }\n+    return res == SQLITE_OK;\n+}\n+\n+bool SQLiteBatch::TxnCommit()\n+{\n+    if (!m_database.m_db || sqlite3_get_autocommit(m_database.m_db) != 0) return false;\n+    int res = sqlite3_exec(m_database.m_db, \"COMMIT TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Failed to commit the transaction\\n\");\n+    }\n+    return res == SQLITE_OK;\n+}\n+\n+bool SQLiteBatch::TxnAbort()\n+{\n+    if (!m_database.m_db || sqlite3_get_autocommit(m_database.m_db) != 0) return false;\n+    int res = sqlite3_exec(m_database.m_db, \"ROLLBACK TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Failed to abort the transaction\\n\");\n+    }\n+    return res == SQLITE_OK;\n+}\n+\n+bool ExistsSQLiteDatabase(const fs::path& path)\n+{\n+    const fs::path file = path / DATABASE_FILENAME;\n+    return fs::symlink_status(file).type() == fs::regular_file && IsSQLiteFile(file);\n+}\n+\n+std::unique_ptr<SQLiteDatabase> MakeSQLiteDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error)\n+{\n+    const fs::path file = path / DATABASE_FILENAME;\n+    try {\n+        auto db = MakeUnique<SQLiteDatabase>(path, file);\n+        if (options.verify && !db->Verify(error)) {\n+            status = DatabaseStatus::FAILED_VERIFY;\n+            return nullptr;\n+        }\n+        return db;",
      "path": "src/wallet/sqlite.cpp",
      "position": 584,
      "original_position": 584,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Does this return path need to set `status = DatabaseStatus::SUCCESS;`?\r\n\r\nI am asking because gcc seems to generate binaries that will inject false positives into valgrind. I haven't found a bug in the code.\r\n\r\nThough, the bdb version also seems to set `::SUCCESS`, so it might be appropriate here as well?",
      "created_at": "2020-11-05T17:21:05Z",
      "updated_at": "2020-11-05T17:21:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r518223118",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/518223118"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 584,
      "original_line": 584,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/518231532",
      "pull_request_review_id": 524501528,
      "id": 518231532,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIzMTUzMg==",
      "diff_hunk": "@@ -0,0 +1,629 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <sync.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* const DATABASE_FILENAME = \"wallet.dat\";\n+static constexpr int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+static Mutex g_sqlite_mutex;\n+static int g_sqlite_count GUARDED_BY(g_sqlite_mutex) = 0;\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    // From sqlite3_config() documentation for the SQLITE_CONFIG_LOG option:\n+    // \"The void pointer that is the second argument to SQLITE_CONFIG_LOG is passed through as\n+    // the first parameter to the application-defined logger function whenever that function is\n+    // invoked.\"\n+    // Assert that this is the case:\n+    assert(arg == nullptr);\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock)\n+    : WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    {\n+        LOCK(g_sqlite_mutex);\n+        LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+        LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+        if (++g_sqlite_count == 1) {\n+            // Setup logging\n+            int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            // Force serialized threading mode\n+            ret = sqlite3_config(SQLITE_CONFIG_SERIALIZED);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to configure serialized threading mode: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+        int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    try {\n+        Open();\n+    } catch (const std::runtime_error&) {\n+        // If open fails, cleanup this object and rethrow the exception\n+        Cleanup();\n+        throw;\n+    }\n+}\n+\n+void SQLiteBatch::SetupSQLStatements()\n+{\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"SELECT value FROM main WHERE key = ?\", -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"INSERT INTO main VALUES(?, ?)\", -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"INSERT or REPLACE into main values(?, ?)\", -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"DELETE FROM main WHERE key = ?\", -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"SELECT key, value FROM main\", -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Cleanup();\n+}\n+\n+void SQLiteDatabase::Cleanup() noexcept\n+{\n+    Close();\n+\n+    LOCK(g_sqlite_mutex);\n+    if (--g_sqlite_count == 0) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    assert(m_db);\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt{nullptr};\n+    int ret = sqlite3_prepare_v2(m_db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = static_cast<uint32_t>(sqlite3_column_int(app_id_stmt, 0));\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare statement to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        }\n+        if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to execute statement to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to read database verification error: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        if (error.empty()) {\n+            error = _(\"Failed to verify database\") + Untranslated(\"\\n\");\n+        }\n+        error += Untranslated(strprintf(\"%s\\n\", str_msg));\n+    }\n+    sqlite3_finalize(stmt);\n+    return error.empty();\n+}\n+\n+void SQLiteDatabase::Open()\n+{\n+    int flags = SQLITE_OPEN_FULLMUTEX | SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE;\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        TryCreateDirectories(m_dir_path);\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &m_db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    if (sqlite3_db_readonly(m_db, \"main\") != 0) {\n+        throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+    }\n+\n+    // Acquire an exclusive lock on the database\n+    // First change the locking mode to exclusive\n+    int ret = sqlite3_exec(m_db, \"PRAGMA locking_mode = exclusive\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to change database locking mode to exclusive: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    // Now begin a transaction to acquire the exclusive lock. This lock won't be released until we close because of the exclusive locking mode.\n+    ret = sqlite3_exec(m_db, \"BEGIN EXCLUSIVE TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(\"SQLiteDatabase: Unable to obtain an exclusive lock on the database, is it being used by another bitcoind?\\n\");\n+    }\n+    ret = sqlite3_exec(m_db, \"COMMIT\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to end exclusive lock transaction: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Enable fullfsync for the platforms that use it\n+    ret = sqlite3_exec(m_db, \"PRAGMA fullfsync = true\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to enable fullfsync: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Make the table for our key-value pairs\n+    // First check that the main table exists\n+    sqlite3_stmt* check_main_stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\", -1, &check_main_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to prepare statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    ret = sqlite3_step(check_main_stmt);\n+    if (sqlite3_finalize(check_main_stmt) != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to finalize statement checking table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    bool table_exists;\n+    if (ret == SQLITE_DONE) {\n+        table_exists = false;\n+    } else if (ret == SQLITE_ROW) {\n+        table_exists = true;\n+    } else {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to execute statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Do the db setup things because the table doesn't exist only when we are creating a new wallet\n+    if (!table_exists) {\n+        ret = sqlite3_exec(m_db, \"CREATE TABLE main(key BLOB PRIMARY KEY NOT NULL, value BLOB NOT NULL)\", nullptr, nullptr, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        // Set the application id\n+        uint32_t app_id = ReadBE32(Params().MessageStart());\n+        std::string set_app_id = strprintf(\"PRAGMA application_id = %d\", static_cast<int32_t>(app_id));\n+        ret = sqlite3_exec(m_db, set_app_id.c_str(), nullptr, nullptr, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to set the application id: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        // Set the user version\n+        std::string set_user_ver = strprintf(\"PRAGMA user_version = %d\", WALLET_SCHEMA_VERSION);\n+        ret = sqlite3_exec(m_db, set_user_ver.c_str(), nullptr, nullptr, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to set the wallet schema version: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Rewrite(const char* skip)\n+{\n+    // Rewrite the database using the VACUUM command: https://sqlite.org/lang_vacuum.html\n+    int ret = sqlite3_exec(m_db, \"VACUUM\", nullptr, nullptr, nullptr);\n+    return ret == SQLITE_OK;\n+}\n+\n+bool SQLiteDatabase::Backup(const std::string& dest) const\n+{\n+    sqlite3* db_copy;\n+    int res = sqlite3_open(dest.c_str(), &db_copy);\n+    if (res != SQLITE_OK) {\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    sqlite3_backup* backup = sqlite3_backup_init(db_copy, \"main\", m_db, \"main\");\n+    if (!backup) {\n+        LogPrintf(\"%s: Unable to begin backup: %s\\n\", __func__, sqlite3_errmsg(m_db));\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    // Specifying -1 will copy all of the pages\n+    res = sqlite3_backup_step(backup, -1);\n+    if (res != SQLITE_DONE) {\n+        LogPrintf(\"%s: Unable to backup: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_backup_finish(backup);\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    res = sqlite3_backup_finish(backup);\n+    sqlite3_close(db_copy);\n+    return res == SQLITE_OK;\n+}\n+\n+void SQLiteDatabase::Close()\n+{\n+    int res = sqlite3_close(m_db);\n+    if (res != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to close database: %s\\n\", sqlite3_errstr(res)));\n+    }\n+    m_db = nullptr;\n+}\n+\n+std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(bool flush_on_close)\n+{\n+    // We ignore flush_on_close because we don't do manual flushing for SQLite\n+    return MakeUnique<SQLiteBatch>(*this);\n+}\n+\n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database)\n+    : m_database(database)\n+{\n+    // Make sure we have a db handle\n+    assert(m_database.m_db);\n+\n+    SetupSQLStatements();\n+}\n+\n+void SQLiteBatch::Close()\n+{\n+    // If m_db is in a transaction (i.e. not in autocommit mode), then abort the transaction in progress\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        if (TxnAbort()) {\n+            LogPrintf(\"SQLiteBatch: Batch closed unexpectedly without the transaction being explicitly committed or aborted\\n\");\n+        } else {\n+            LogPrintf(\"SQLiteBatch: Batch closed and failed to abort transaction\\n\");\n+        }\n+    }\n+\n+    // Free all of the prepared statements\n+    int ret = sqlite3_finalize(m_read_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize read statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    ret = sqlite3_finalize(m_insert_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize insert statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    ret = sqlite3_finalize(m_overwrite_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize overwrite statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    ret = sqlite3_finalize(m_delete_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize delete statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    ret = sqlite3_finalize(m_cursor_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize cursor statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    m_read_stmt = nullptr;\n+    m_insert_stmt = nullptr;\n+    m_overwrite_stmt = nullptr;\n+    m_delete_stmt = nullptr;\n+    m_cursor_stmt = nullptr;\n+}\n+\n+bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: Unable to bind statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    res = sqlite3_step(m_read_stmt);\n+    if (res != SQLITE_ROW) {\n+        if (res != SQLITE_DONE) {\n+            // SQLITE_DONE means \"not found\", don't log an error in that case.\n+            LogPrintf(\"%s: Unable to execute statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        }\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    // Leftmost column in result is index 0\n+    const char* data = reinterpret_cast<const char*>(sqlite3_column_blob(m_read_stmt, 0));\n+    int data_size = sqlite3_column_bytes(m_read_stmt, 0);\n+    value.write(data, data_size);\n+\n+    sqlite3_clear_bindings(m_read_stmt);\n+    sqlite3_reset(m_read_stmt);\n+    return true;\n+}\n+\n+bool SQLiteBatch::WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_insert_stmt && m_overwrite_stmt);\n+\n+    sqlite3_stmt* stmt;\n+    if (overwrite) {\n+        stmt = m_overwrite_stmt;\n+    } else {\n+        stmt = m_insert_stmt;\n+    }\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    // Insert index 1 is key, 2 is value\n+    int res = sqlite3_bind_blob(stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: Unable to bind key to statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n+        return false;\n+    }\n+    res = sqlite3_bind_blob(stmt, 2, value.data(), value.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: Unable to bind value to statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n+        return false;\n+    }\n+\n+    // Execute\n+    res = sqlite3_step(stmt);\n+    sqlite3_clear_bindings(stmt);\n+    sqlite3_reset(stmt);\n+    if (res != SQLITE_DONE) {\n+        LogPrintf(\"%s: Unable to execute statement: %s\\n\", __func__, sqlite3_errstr(res));\n+    }\n+    return res == SQLITE_DONE;\n+}\n+\n+bool SQLiteBatch::EraseKey(CDataStream&& key)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_delete_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_delete_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: Unable to bind statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_clear_bindings(m_delete_stmt);\n+        sqlite3_reset(m_delete_stmt);\n+        return false;\n+    }\n+\n+    // Execute\n+    res = sqlite3_step(m_delete_stmt);\n+    sqlite3_clear_bindings(m_delete_stmt);\n+    sqlite3_reset(m_delete_stmt);\n+    if (res != SQLITE_DONE) {\n+        LogPrintf(\"%s: Unable to execute statement: %s\\n\", __func__, sqlite3_errstr(res));\n+    }\n+    return res == SQLITE_DONE;\n+}\n+\n+bool SQLiteBatch::HasKey(CDataStream&& key)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    bool ret = false;\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res == SQLITE_OK) {\n+        res = sqlite3_step(m_read_stmt);\n+        if (res == SQLITE_ROW) {\n+            ret = true;\n+        }\n+    }\n+\n+    sqlite3_clear_bindings(m_read_stmt);\n+    sqlite3_reset(m_read_stmt);\n+    return ret;\n+}\n+\n+bool SQLiteBatch::StartCursor()\n+{\n+    assert(!m_cursor_init);\n+    if (!m_database.m_db) return false;\n+    m_cursor_init = true;\n+    return true;\n+}\n+\n+bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& complete)\n+{\n+    complete = false;\n+\n+    if (!m_cursor_init) return false;\n+\n+    int res = sqlite3_step(m_cursor_stmt);\n+    if (res == SQLITE_DONE) {\n+        complete = true;\n+        return true;\n+    }\n+    if (res != SQLITE_ROW) {\n+        LogPrintf(\"SQLiteBatch::ReadAtCursor: Unable to execute cursor step: %s\\n\", sqlite3_errstr(res));\n+        return false;\n+    }\n+\n+    // Leftmost column in result is index 0\n+    const char* key_data = reinterpret_cast<const char*>(sqlite3_column_blob(m_cursor_stmt, 0));\n+    int key_data_size = sqlite3_column_bytes(m_cursor_stmt, 0);\n+    key.write(key_data, key_data_size);\n+    const char* value_data = reinterpret_cast<const char*>(sqlite3_column_blob(m_cursor_stmt, 1));\n+    int value_data_size = sqlite3_column_bytes(m_cursor_stmt, 1);\n+    value.write(value_data, value_data_size);\n+    return true;\n+}\n+\n+void SQLiteBatch::CloseCursor()\n+{\n+    sqlite3_reset(m_cursor_stmt);\n+    m_cursor_init = false;\n+}\n+\n+bool SQLiteBatch::TxnBegin()\n+{\n+    if (!m_database.m_db || sqlite3_get_autocommit(m_database.m_db) == 0) return false;\n+    int res = sqlite3_exec(m_database.m_db, \"BEGIN TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Failed to begin the transaction\\n\");\n+    }\n+    return res == SQLITE_OK;\n+}\n+\n+bool SQLiteBatch::TxnCommit()\n+{\n+    if (!m_database.m_db || sqlite3_get_autocommit(m_database.m_db) != 0) return false;\n+    int res = sqlite3_exec(m_database.m_db, \"COMMIT TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Failed to commit the transaction\\n\");\n+    }\n+    return res == SQLITE_OK;\n+}\n+\n+bool SQLiteBatch::TxnAbort()\n+{\n+    if (!m_database.m_db || sqlite3_get_autocommit(m_database.m_db) != 0) return false;\n+    int res = sqlite3_exec(m_database.m_db, \"ROLLBACK TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Failed to abort the transaction\\n\");\n+    }\n+    return res == SQLITE_OK;\n+}\n+\n+bool ExistsSQLiteDatabase(const fs::path& path)\n+{\n+    const fs::path file = path / DATABASE_FILENAME;\n+    return fs::symlink_status(file).type() == fs::regular_file && IsSQLiteFile(file);\n+}\n+\n+std::unique_ptr<SQLiteDatabase> MakeSQLiteDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error)\n+{\n+    const fs::path file = path / DATABASE_FILENAME;\n+    try {\n+        auto db = MakeUnique<SQLiteDatabase>(path, file);\n+        if (options.verify && !db->Verify(error)) {\n+            status = DatabaseStatus::FAILED_VERIFY;\n+            return nullptr;\n+        }\n+        return db;",
      "path": "src/wallet/sqlite.cpp",
      "position": 584,
      "original_position": 584,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "in_reply_to_id": 518223118,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I suppose it should, but istm it shouldn't matter. I'm pretty sure we never check `status` if there isn't a failure.",
      "created_at": "2020-11-05T17:33:45Z",
      "updated_at": "2020-11-05T17:33:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r518231532",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/518231532"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 584,
      "original_line": 584,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/518236788",
      "pull_request_review_id": 524509192,
      "id": 518236788,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIzNjc4OA==",
      "diff_hunk": "@@ -0,0 +1,629 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <sync.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* const DATABASE_FILENAME = \"wallet.dat\";\n+static constexpr int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+static Mutex g_sqlite_mutex;\n+static int g_sqlite_count GUARDED_BY(g_sqlite_mutex) = 0;\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    // From sqlite3_config() documentation for the SQLITE_CONFIG_LOG option:\n+    // \"The void pointer that is the second argument to SQLITE_CONFIG_LOG is passed through as\n+    // the first parameter to the application-defined logger function whenever that function is\n+    // invoked.\"\n+    // Assert that this is the case:\n+    assert(arg == nullptr);\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock)\n+    : WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    {\n+        LOCK(g_sqlite_mutex);\n+        LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+        LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+        if (++g_sqlite_count == 1) {\n+            // Setup logging\n+            int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            // Force serialized threading mode\n+            ret = sqlite3_config(SQLITE_CONFIG_SERIALIZED);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to configure serialized threading mode: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+        int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    try {\n+        Open();\n+    } catch (const std::runtime_error&) {\n+        // If open fails, cleanup this object and rethrow the exception\n+        Cleanup();\n+        throw;\n+    }\n+}\n+\n+void SQLiteBatch::SetupSQLStatements()\n+{\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"SELECT value FROM main WHERE key = ?\", -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"INSERT INTO main VALUES(?, ?)\", -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"INSERT or REPLACE into main values(?, ?)\", -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"DELETE FROM main WHERE key = ?\", -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"SELECT key, value FROM main\", -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Cleanup();\n+}\n+\n+void SQLiteDatabase::Cleanup() noexcept\n+{\n+    Close();\n+\n+    LOCK(g_sqlite_mutex);\n+    if (--g_sqlite_count == 0) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    assert(m_db);\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt{nullptr};\n+    int ret = sqlite3_prepare_v2(m_db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = static_cast<uint32_t>(sqlite3_column_int(app_id_stmt, 0));\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare statement to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        }\n+        if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to execute statement to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to read database verification error: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        if (error.empty()) {\n+            error = _(\"Failed to verify database\") + Untranslated(\"\\n\");\n+        }\n+        error += Untranslated(strprintf(\"%s\\n\", str_msg));\n+    }\n+    sqlite3_finalize(stmt);\n+    return error.empty();\n+}\n+\n+void SQLiteDatabase::Open()\n+{\n+    int flags = SQLITE_OPEN_FULLMUTEX | SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE;\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        TryCreateDirectories(m_dir_path);\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &m_db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    if (sqlite3_db_readonly(m_db, \"main\") != 0) {\n+        throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+    }\n+\n+    // Acquire an exclusive lock on the database\n+    // First change the locking mode to exclusive\n+    int ret = sqlite3_exec(m_db, \"PRAGMA locking_mode = exclusive\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to change database locking mode to exclusive: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    // Now begin a transaction to acquire the exclusive lock. This lock won't be released until we close because of the exclusive locking mode.\n+    ret = sqlite3_exec(m_db, \"BEGIN EXCLUSIVE TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(\"SQLiteDatabase: Unable to obtain an exclusive lock on the database, is it being used by another bitcoind?\\n\");\n+    }\n+    ret = sqlite3_exec(m_db, \"COMMIT\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to end exclusive lock transaction: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Enable fullfsync for the platforms that use it\n+    ret = sqlite3_exec(m_db, \"PRAGMA fullfsync = true\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to enable fullfsync: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Make the table for our key-value pairs\n+    // First check that the main table exists\n+    sqlite3_stmt* check_main_stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\", -1, &check_main_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to prepare statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    ret = sqlite3_step(check_main_stmt);\n+    if (sqlite3_finalize(check_main_stmt) != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to finalize statement checking table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    bool table_exists;\n+    if (ret == SQLITE_DONE) {\n+        table_exists = false;\n+    } else if (ret == SQLITE_ROW) {\n+        table_exists = true;\n+    } else {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to execute statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Do the db setup things because the table doesn't exist only when we are creating a new wallet\n+    if (!table_exists) {\n+        ret = sqlite3_exec(m_db, \"CREATE TABLE main(key BLOB PRIMARY KEY NOT NULL, value BLOB NOT NULL)\", nullptr, nullptr, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        // Set the application id\n+        uint32_t app_id = ReadBE32(Params().MessageStart());\n+        std::string set_app_id = strprintf(\"PRAGMA application_id = %d\", static_cast<int32_t>(app_id));\n+        ret = sqlite3_exec(m_db, set_app_id.c_str(), nullptr, nullptr, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to set the application id: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        // Set the user version\n+        std::string set_user_ver = strprintf(\"PRAGMA user_version = %d\", WALLET_SCHEMA_VERSION);\n+        ret = sqlite3_exec(m_db, set_user_ver.c_str(), nullptr, nullptr, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to set the wallet schema version: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Rewrite(const char* skip)\n+{\n+    // Rewrite the database using the VACUUM command: https://sqlite.org/lang_vacuum.html\n+    int ret = sqlite3_exec(m_db, \"VACUUM\", nullptr, nullptr, nullptr);\n+    return ret == SQLITE_OK;\n+}\n+\n+bool SQLiteDatabase::Backup(const std::string& dest) const\n+{\n+    sqlite3* db_copy;\n+    int res = sqlite3_open(dest.c_str(), &db_copy);\n+    if (res != SQLITE_OK) {\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    sqlite3_backup* backup = sqlite3_backup_init(db_copy, \"main\", m_db, \"main\");\n+    if (!backup) {\n+        LogPrintf(\"%s: Unable to begin backup: %s\\n\", __func__, sqlite3_errmsg(m_db));\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    // Specifying -1 will copy all of the pages\n+    res = sqlite3_backup_step(backup, -1);\n+    if (res != SQLITE_DONE) {\n+        LogPrintf(\"%s: Unable to backup: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_backup_finish(backup);\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    res = sqlite3_backup_finish(backup);\n+    sqlite3_close(db_copy);\n+    return res == SQLITE_OK;\n+}\n+\n+void SQLiteDatabase::Close()\n+{\n+    int res = sqlite3_close(m_db);\n+    if (res != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to close database: %s\\n\", sqlite3_errstr(res)));\n+    }\n+    m_db = nullptr;\n+}\n+\n+std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(bool flush_on_close)\n+{\n+    // We ignore flush_on_close because we don't do manual flushing for SQLite\n+    return MakeUnique<SQLiteBatch>(*this);\n+}\n+\n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database)\n+    : m_database(database)\n+{\n+    // Make sure we have a db handle\n+    assert(m_database.m_db);\n+\n+    SetupSQLStatements();\n+}\n+\n+void SQLiteBatch::Close()\n+{\n+    // If m_db is in a transaction (i.e. not in autocommit mode), then abort the transaction in progress\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        if (TxnAbort()) {\n+            LogPrintf(\"SQLiteBatch: Batch closed unexpectedly without the transaction being explicitly committed or aborted\\n\");\n+        } else {\n+            LogPrintf(\"SQLiteBatch: Batch closed and failed to abort transaction\\n\");\n+        }\n+    }\n+\n+    // Free all of the prepared statements\n+    int ret = sqlite3_finalize(m_read_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize read statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    ret = sqlite3_finalize(m_insert_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize insert statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    ret = sqlite3_finalize(m_overwrite_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize overwrite statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    ret = sqlite3_finalize(m_delete_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize delete statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    ret = sqlite3_finalize(m_cursor_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize cursor statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    m_read_stmt = nullptr;\n+    m_insert_stmt = nullptr;\n+    m_overwrite_stmt = nullptr;\n+    m_delete_stmt = nullptr;\n+    m_cursor_stmt = nullptr;\n+}\n+\n+bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: Unable to bind statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    res = sqlite3_step(m_read_stmt);\n+    if (res != SQLITE_ROW) {\n+        if (res != SQLITE_DONE) {\n+            // SQLITE_DONE means \"not found\", don't log an error in that case.\n+            LogPrintf(\"%s: Unable to execute statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        }\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    // Leftmost column in result is index 0\n+    const char* data = reinterpret_cast<const char*>(sqlite3_column_blob(m_read_stmt, 0));\n+    int data_size = sqlite3_column_bytes(m_read_stmt, 0);\n+    value.write(data, data_size);\n+\n+    sqlite3_clear_bindings(m_read_stmt);\n+    sqlite3_reset(m_read_stmt);\n+    return true;\n+}\n+\n+bool SQLiteBatch::WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_insert_stmt && m_overwrite_stmt);\n+\n+    sqlite3_stmt* stmt;\n+    if (overwrite) {\n+        stmt = m_overwrite_stmt;\n+    } else {\n+        stmt = m_insert_stmt;\n+    }\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    // Insert index 1 is key, 2 is value\n+    int res = sqlite3_bind_blob(stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: Unable to bind key to statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n+        return false;\n+    }\n+    res = sqlite3_bind_blob(stmt, 2, value.data(), value.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: Unable to bind value to statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n+        return false;\n+    }\n+\n+    // Execute\n+    res = sqlite3_step(stmt);\n+    sqlite3_clear_bindings(stmt);\n+    sqlite3_reset(stmt);\n+    if (res != SQLITE_DONE) {\n+        LogPrintf(\"%s: Unable to execute statement: %s\\n\", __func__, sqlite3_errstr(res));\n+    }\n+    return res == SQLITE_DONE;\n+}\n+\n+bool SQLiteBatch::EraseKey(CDataStream&& key)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_delete_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_delete_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: Unable to bind statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_clear_bindings(m_delete_stmt);\n+        sqlite3_reset(m_delete_stmt);\n+        return false;\n+    }\n+\n+    // Execute\n+    res = sqlite3_step(m_delete_stmt);\n+    sqlite3_clear_bindings(m_delete_stmt);\n+    sqlite3_reset(m_delete_stmt);\n+    if (res != SQLITE_DONE) {\n+        LogPrintf(\"%s: Unable to execute statement: %s\\n\", __func__, sqlite3_errstr(res));\n+    }\n+    return res == SQLITE_DONE;\n+}\n+\n+bool SQLiteBatch::HasKey(CDataStream&& key)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    bool ret = false;\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res == SQLITE_OK) {\n+        res = sqlite3_step(m_read_stmt);\n+        if (res == SQLITE_ROW) {\n+            ret = true;\n+        }\n+    }\n+\n+    sqlite3_clear_bindings(m_read_stmt);\n+    sqlite3_reset(m_read_stmt);\n+    return ret;\n+}\n+\n+bool SQLiteBatch::StartCursor()\n+{\n+    assert(!m_cursor_init);\n+    if (!m_database.m_db) return false;\n+    m_cursor_init = true;\n+    return true;\n+}\n+\n+bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& complete)\n+{\n+    complete = false;\n+\n+    if (!m_cursor_init) return false;\n+\n+    int res = sqlite3_step(m_cursor_stmt);\n+    if (res == SQLITE_DONE) {\n+        complete = true;\n+        return true;\n+    }\n+    if (res != SQLITE_ROW) {\n+        LogPrintf(\"SQLiteBatch::ReadAtCursor: Unable to execute cursor step: %s\\n\", sqlite3_errstr(res));\n+        return false;\n+    }\n+\n+    // Leftmost column in result is index 0\n+    const char* key_data = reinterpret_cast<const char*>(sqlite3_column_blob(m_cursor_stmt, 0));\n+    int key_data_size = sqlite3_column_bytes(m_cursor_stmt, 0);\n+    key.write(key_data, key_data_size);\n+    const char* value_data = reinterpret_cast<const char*>(sqlite3_column_blob(m_cursor_stmt, 1));\n+    int value_data_size = sqlite3_column_bytes(m_cursor_stmt, 1);\n+    value.write(value_data, value_data_size);\n+    return true;\n+}\n+\n+void SQLiteBatch::CloseCursor()\n+{\n+    sqlite3_reset(m_cursor_stmt);\n+    m_cursor_init = false;\n+}\n+\n+bool SQLiteBatch::TxnBegin()\n+{\n+    if (!m_database.m_db || sqlite3_get_autocommit(m_database.m_db) == 0) return false;\n+    int res = sqlite3_exec(m_database.m_db, \"BEGIN TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Failed to begin the transaction\\n\");\n+    }\n+    return res == SQLITE_OK;\n+}\n+\n+bool SQLiteBatch::TxnCommit()\n+{\n+    if (!m_database.m_db || sqlite3_get_autocommit(m_database.m_db) != 0) return false;\n+    int res = sqlite3_exec(m_database.m_db, \"COMMIT TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Failed to commit the transaction\\n\");\n+    }\n+    return res == SQLITE_OK;\n+}\n+\n+bool SQLiteBatch::TxnAbort()\n+{\n+    if (!m_database.m_db || sqlite3_get_autocommit(m_database.m_db) != 0) return false;\n+    int res = sqlite3_exec(m_database.m_db, \"ROLLBACK TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Failed to abort the transaction\\n\");\n+    }\n+    return res == SQLITE_OK;\n+}\n+\n+bool ExistsSQLiteDatabase(const fs::path& path)\n+{\n+    const fs::path file = path / DATABASE_FILENAME;\n+    return fs::symlink_status(file).type() == fs::regular_file && IsSQLiteFile(file);\n+}\n+\n+std::unique_ptr<SQLiteDatabase> MakeSQLiteDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error)\n+{\n+    const fs::path file = path / DATABASE_FILENAME;\n+    try {\n+        auto db = MakeUnique<SQLiteDatabase>(path, file);\n+        if (options.verify && !db->Verify(error)) {\n+            status = DatabaseStatus::FAILED_VERIFY;\n+            return nullptr;\n+        }\n+        return db;",
      "path": "src/wallet/sqlite.cpp",
      "position": 584,
      "original_position": 584,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "in_reply_to_id": 518223118,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Jup, we don't check `status` if there is no failure. It is just a style question.",
      "created_at": "2020-11-05T17:39:52Z",
      "updated_at": "2020-11-05T17:39:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r518236788",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/518236788"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 584,
      "original_line": 584,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/518317828",
      "pull_request_review_id": 524606209,
      "id": 518317828,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMxNzgyOA==",
      "diff_hunk": "@@ -0,0 +1,629 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <sync.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* const DATABASE_FILENAME = \"wallet.dat\";\n+static constexpr int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+static Mutex g_sqlite_mutex;\n+static int g_sqlite_count GUARDED_BY(g_sqlite_mutex) = 0;\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    // From sqlite3_config() documentation for the SQLITE_CONFIG_LOG option:\n+    // \"The void pointer that is the second argument to SQLITE_CONFIG_LOG is passed through as\n+    // the first parameter to the application-defined logger function whenever that function is\n+    // invoked.\"\n+    // Assert that this is the case:\n+    assert(arg == nullptr);\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock)\n+    : WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    {\n+        LOCK(g_sqlite_mutex);\n+        LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+        LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+        if (++g_sqlite_count == 1) {\n+            // Setup logging\n+            int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            // Force serialized threading mode\n+            ret = sqlite3_config(SQLITE_CONFIG_SERIALIZED);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to configure serialized threading mode: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+        int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    try {\n+        Open();\n+    } catch (const std::runtime_error&) {\n+        // If open fails, cleanup this object and rethrow the exception\n+        Cleanup();\n+        throw;\n+    }\n+}\n+\n+void SQLiteBatch::SetupSQLStatements()\n+{\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"SELECT value FROM main WHERE key = ?\", -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"INSERT INTO main VALUES(?, ?)\", -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"INSERT or REPLACE into main values(?, ?)\", -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"DELETE FROM main WHERE key = ?\", -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"SELECT key, value FROM main\", -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Cleanup();\n+}\n+\n+void SQLiteDatabase::Cleanup() noexcept\n+{\n+    Close();\n+\n+    LOCK(g_sqlite_mutex);\n+    if (--g_sqlite_count == 0) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    assert(m_db);\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt{nullptr};\n+    int ret = sqlite3_prepare_v2(m_db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = static_cast<uint32_t>(sqlite3_column_int(app_id_stmt, 0));\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare statement to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        }\n+        if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to execute statement to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to read database verification error: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        if (error.empty()) {\n+            error = _(\"Failed to verify database\") + Untranslated(\"\\n\");\n+        }\n+        error += Untranslated(strprintf(\"%s\\n\", str_msg));\n+    }\n+    sqlite3_finalize(stmt);\n+    return error.empty();\n+}\n+\n+void SQLiteDatabase::Open()\n+{\n+    int flags = SQLITE_OPEN_FULLMUTEX | SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE;\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        TryCreateDirectories(m_dir_path);\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &m_db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    if (sqlite3_db_readonly(m_db, \"main\") != 0) {\n+        throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+    }\n+\n+    // Acquire an exclusive lock on the database\n+    // First change the locking mode to exclusive\n+    int ret = sqlite3_exec(m_db, \"PRAGMA locking_mode = exclusive\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to change database locking mode to exclusive: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    // Now begin a transaction to acquire the exclusive lock. This lock won't be released until we close because of the exclusive locking mode.\n+    ret = sqlite3_exec(m_db, \"BEGIN EXCLUSIVE TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(\"SQLiteDatabase: Unable to obtain an exclusive lock on the database, is it being used by another bitcoind?\\n\");\n+    }\n+    ret = sqlite3_exec(m_db, \"COMMIT\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to end exclusive lock transaction: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Enable fullfsync for the platforms that use it\n+    ret = sqlite3_exec(m_db, \"PRAGMA fullfsync = true\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to enable fullfsync: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Make the table for our key-value pairs\n+    // First check that the main table exists\n+    sqlite3_stmt* check_main_stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\", -1, &check_main_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to prepare statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    ret = sqlite3_step(check_main_stmt);\n+    if (sqlite3_finalize(check_main_stmt) != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to finalize statement checking table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    bool table_exists;\n+    if (ret == SQLITE_DONE) {\n+        table_exists = false;\n+    } else if (ret == SQLITE_ROW) {\n+        table_exists = true;\n+    } else {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to execute statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Do the db setup things because the table doesn't exist only when we are creating a new wallet\n+    if (!table_exists) {\n+        ret = sqlite3_exec(m_db, \"CREATE TABLE main(key BLOB PRIMARY KEY NOT NULL, value BLOB NOT NULL)\", nullptr, nullptr, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        // Set the application id\n+        uint32_t app_id = ReadBE32(Params().MessageStart());\n+        std::string set_app_id = strprintf(\"PRAGMA application_id = %d\", static_cast<int32_t>(app_id));\n+        ret = sqlite3_exec(m_db, set_app_id.c_str(), nullptr, nullptr, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to set the application id: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        // Set the user version\n+        std::string set_user_ver = strprintf(\"PRAGMA user_version = %d\", WALLET_SCHEMA_VERSION);\n+        ret = sqlite3_exec(m_db, set_user_ver.c_str(), nullptr, nullptr, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to set the wallet schema version: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Rewrite(const char* skip)\n+{\n+    // Rewrite the database using the VACUUM command: https://sqlite.org/lang_vacuum.html\n+    int ret = sqlite3_exec(m_db, \"VACUUM\", nullptr, nullptr, nullptr);\n+    return ret == SQLITE_OK;\n+}\n+\n+bool SQLiteDatabase::Backup(const std::string& dest) const\n+{\n+    sqlite3* db_copy;\n+    int res = sqlite3_open(dest.c_str(), &db_copy);\n+    if (res != SQLITE_OK) {\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    sqlite3_backup* backup = sqlite3_backup_init(db_copy, \"main\", m_db, \"main\");\n+    if (!backup) {\n+        LogPrintf(\"%s: Unable to begin backup: %s\\n\", __func__, sqlite3_errmsg(m_db));\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    // Specifying -1 will copy all of the pages\n+    res = sqlite3_backup_step(backup, -1);\n+    if (res != SQLITE_DONE) {\n+        LogPrintf(\"%s: Unable to backup: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_backup_finish(backup);\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    res = sqlite3_backup_finish(backup);\n+    sqlite3_close(db_copy);\n+    return res == SQLITE_OK;\n+}\n+\n+void SQLiteDatabase::Close()\n+{\n+    int res = sqlite3_close(m_db);\n+    if (res != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to close database: %s\\n\", sqlite3_errstr(res)));\n+    }\n+    m_db = nullptr;\n+}\n+\n+std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(bool flush_on_close)\n+{\n+    // We ignore flush_on_close because we don't do manual flushing for SQLite\n+    return MakeUnique<SQLiteBatch>(*this);\n+}\n+\n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database)\n+    : m_database(database)\n+{\n+    // Make sure we have a db handle\n+    assert(m_database.m_db);\n+\n+    SetupSQLStatements();\n+}\n+\n+void SQLiteBatch::Close()\n+{\n+    // If m_db is in a transaction (i.e. not in autocommit mode), then abort the transaction in progress\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        if (TxnAbort()) {\n+            LogPrintf(\"SQLiteBatch: Batch closed unexpectedly without the transaction being explicitly committed or aborted\\n\");\n+        } else {\n+            LogPrintf(\"SQLiteBatch: Batch closed and failed to abort transaction\\n\");\n+        }\n+    }\n+\n+    // Free all of the prepared statements\n+    int ret = sqlite3_finalize(m_read_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize read statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    ret = sqlite3_finalize(m_insert_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize insert statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    ret = sqlite3_finalize(m_overwrite_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize overwrite statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    ret = sqlite3_finalize(m_delete_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize delete statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    ret = sqlite3_finalize(m_cursor_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize cursor statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    m_read_stmt = nullptr;\n+    m_insert_stmt = nullptr;\n+    m_overwrite_stmt = nullptr;\n+    m_delete_stmt = nullptr;\n+    m_cursor_stmt = nullptr;\n+}\n+\n+bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: Unable to bind statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    res = sqlite3_step(m_read_stmt);\n+    if (res != SQLITE_ROW) {\n+        if (res != SQLITE_DONE) {\n+            // SQLITE_DONE means \"not found\", don't log an error in that case.\n+            LogPrintf(\"%s: Unable to execute statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        }\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    // Leftmost column in result is index 0\n+    const char* data = reinterpret_cast<const char*>(sqlite3_column_blob(m_read_stmt, 0));\n+    int data_size = sqlite3_column_bytes(m_read_stmt, 0);\n+    value.write(data, data_size);\n+\n+    sqlite3_clear_bindings(m_read_stmt);\n+    sqlite3_reset(m_read_stmt);\n+    return true;\n+}\n+\n+bool SQLiteBatch::WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_insert_stmt && m_overwrite_stmt);\n+\n+    sqlite3_stmt* stmt;\n+    if (overwrite) {\n+        stmt = m_overwrite_stmt;\n+    } else {\n+        stmt = m_insert_stmt;\n+    }\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    // Insert index 1 is key, 2 is value\n+    int res = sqlite3_bind_blob(stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: Unable to bind key to statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n+        return false;\n+    }\n+    res = sqlite3_bind_blob(stmt, 2, value.data(), value.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: Unable to bind value to statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n+        return false;\n+    }\n+\n+    // Execute\n+    res = sqlite3_step(stmt);\n+    sqlite3_clear_bindings(stmt);\n+    sqlite3_reset(stmt);\n+    if (res != SQLITE_DONE) {\n+        LogPrintf(\"%s: Unable to execute statement: %s\\n\", __func__, sqlite3_errstr(res));\n+    }\n+    return res == SQLITE_DONE;\n+}\n+\n+bool SQLiteBatch::EraseKey(CDataStream&& key)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_delete_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_delete_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: Unable to bind statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_clear_bindings(m_delete_stmt);\n+        sqlite3_reset(m_delete_stmt);\n+        return false;\n+    }\n+\n+    // Execute\n+    res = sqlite3_step(m_delete_stmt);\n+    sqlite3_clear_bindings(m_delete_stmt);\n+    sqlite3_reset(m_delete_stmt);\n+    if (res != SQLITE_DONE) {\n+        LogPrintf(\"%s: Unable to execute statement: %s\\n\", __func__, sqlite3_errstr(res));\n+    }\n+    return res == SQLITE_DONE;\n+}\n+\n+bool SQLiteBatch::HasKey(CDataStream&& key)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    bool ret = false;\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res == SQLITE_OK) {\n+        res = sqlite3_step(m_read_stmt);\n+        if (res == SQLITE_ROW) {\n+            ret = true;\n+        }\n+    }\n+\n+    sqlite3_clear_bindings(m_read_stmt);\n+    sqlite3_reset(m_read_stmt);\n+    return ret;\n+}\n+\n+bool SQLiteBatch::StartCursor()\n+{\n+    assert(!m_cursor_init);\n+    if (!m_database.m_db) return false;\n+    m_cursor_init = true;\n+    return true;\n+}\n+\n+bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& complete)\n+{\n+    complete = false;\n+\n+    if (!m_cursor_init) return false;\n+\n+    int res = sqlite3_step(m_cursor_stmt);\n+    if (res == SQLITE_DONE) {\n+        complete = true;\n+        return true;\n+    }\n+    if (res != SQLITE_ROW) {\n+        LogPrintf(\"SQLiteBatch::ReadAtCursor: Unable to execute cursor step: %s\\n\", sqlite3_errstr(res));\n+        return false;\n+    }\n+\n+    // Leftmost column in result is index 0\n+    const char* key_data = reinterpret_cast<const char*>(sqlite3_column_blob(m_cursor_stmt, 0));\n+    int key_data_size = sqlite3_column_bytes(m_cursor_stmt, 0);\n+    key.write(key_data, key_data_size);\n+    const char* value_data = reinterpret_cast<const char*>(sqlite3_column_blob(m_cursor_stmt, 1));\n+    int value_data_size = sqlite3_column_bytes(m_cursor_stmt, 1);\n+    value.write(value_data, value_data_size);\n+    return true;\n+}\n+\n+void SQLiteBatch::CloseCursor()\n+{\n+    sqlite3_reset(m_cursor_stmt);\n+    m_cursor_init = false;\n+}\n+\n+bool SQLiteBatch::TxnBegin()\n+{\n+    if (!m_database.m_db || sqlite3_get_autocommit(m_database.m_db) == 0) return false;\n+    int res = sqlite3_exec(m_database.m_db, \"BEGIN TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Failed to begin the transaction\\n\");\n+    }\n+    return res == SQLITE_OK;\n+}\n+\n+bool SQLiteBatch::TxnCommit()\n+{\n+    if (!m_database.m_db || sqlite3_get_autocommit(m_database.m_db) != 0) return false;\n+    int res = sqlite3_exec(m_database.m_db, \"COMMIT TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Failed to commit the transaction\\n\");\n+    }\n+    return res == SQLITE_OK;\n+}\n+\n+bool SQLiteBatch::TxnAbort()\n+{\n+    if (!m_database.m_db || sqlite3_get_autocommit(m_database.m_db) != 0) return false;\n+    int res = sqlite3_exec(m_database.m_db, \"ROLLBACK TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Failed to abort the transaction\\n\");\n+    }\n+    return res == SQLITE_OK;\n+}\n+\n+bool ExistsSQLiteDatabase(const fs::path& path)\n+{\n+    const fs::path file = path / DATABASE_FILENAME;\n+    return fs::symlink_status(file).type() == fs::regular_file && IsSQLiteFile(file);\n+}\n+\n+std::unique_ptr<SQLiteDatabase> MakeSQLiteDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error)\n+{\n+    const fs::path file = path / DATABASE_FILENAME;\n+    try {\n+        auto db = MakeUnique<SQLiteDatabase>(path, file);\n+        if (options.verify && !db->Verify(error)) {\n+            status = DatabaseStatus::FAILED_VERIFY;\n+            return nullptr;\n+        }\n+        return db;",
      "path": "src/wallet/sqlite.cpp",
      "position": 584,
      "original_position": 584,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "in_reply_to_id": 518223118,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also happening with clang, so I'll try to fix this",
      "created_at": "2020-11-05T19:38:56Z",
      "updated_at": "2020-11-05T19:38:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r518317828",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/518317828"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 584,
      "original_line": 584,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/518320258",
      "pull_request_review_id": 524609259,
      "id": 518320258,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyMDI1OA==",
      "diff_hunk": "@@ -0,0 +1,629 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <sync.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* const DATABASE_FILENAME = \"wallet.dat\";\n+static constexpr int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+static Mutex g_sqlite_mutex;\n+static int g_sqlite_count GUARDED_BY(g_sqlite_mutex) = 0;\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    // From sqlite3_config() documentation for the SQLITE_CONFIG_LOG option:\n+    // \"The void pointer that is the second argument to SQLITE_CONFIG_LOG is passed through as\n+    // the first parameter to the application-defined logger function whenever that function is\n+    // invoked.\"\n+    // Assert that this is the case:\n+    assert(arg == nullptr);\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock)\n+    : WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    {\n+        LOCK(g_sqlite_mutex);\n+        LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+        LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+        if (++g_sqlite_count == 1) {\n+            // Setup logging\n+            int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            // Force serialized threading mode\n+            ret = sqlite3_config(SQLITE_CONFIG_SERIALIZED);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to configure serialized threading mode: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+        int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    try {\n+        Open();\n+    } catch (const std::runtime_error&) {\n+        // If open fails, cleanup this object and rethrow the exception\n+        Cleanup();\n+        throw;\n+    }\n+}\n+\n+void SQLiteBatch::SetupSQLStatements()\n+{\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"SELECT value FROM main WHERE key = ?\", -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"INSERT INTO main VALUES(?, ?)\", -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"INSERT or REPLACE into main values(?, ?)\", -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"DELETE FROM main WHERE key = ?\", -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"SELECT key, value FROM main\", -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Cleanup();\n+}\n+\n+void SQLiteDatabase::Cleanup() noexcept\n+{\n+    Close();\n+\n+    LOCK(g_sqlite_mutex);\n+    if (--g_sqlite_count == 0) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    assert(m_db);\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt{nullptr};\n+    int ret = sqlite3_prepare_v2(m_db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = static_cast<uint32_t>(sqlite3_column_int(app_id_stmt, 0));\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare statement to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        }\n+        if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to execute statement to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to read database verification error: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        if (error.empty()) {\n+            error = _(\"Failed to verify database\") + Untranslated(\"\\n\");\n+        }\n+        error += Untranslated(strprintf(\"%s\\n\", str_msg));\n+    }\n+    sqlite3_finalize(stmt);\n+    return error.empty();\n+}\n+\n+void SQLiteDatabase::Open()\n+{\n+    int flags = SQLITE_OPEN_FULLMUTEX | SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE;\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        TryCreateDirectories(m_dir_path);\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &m_db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+\n+    if (sqlite3_db_readonly(m_db, \"main\") != 0) {\n+        throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+    }\n+\n+    // Acquire an exclusive lock on the database\n+    // First change the locking mode to exclusive\n+    int ret = sqlite3_exec(m_db, \"PRAGMA locking_mode = exclusive\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to change database locking mode to exclusive: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    // Now begin a transaction to acquire the exclusive lock. This lock won't be released until we close because of the exclusive locking mode.\n+    ret = sqlite3_exec(m_db, \"BEGIN EXCLUSIVE TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(\"SQLiteDatabase: Unable to obtain an exclusive lock on the database, is it being used by another bitcoind?\\n\");\n+    }\n+    ret = sqlite3_exec(m_db, \"COMMIT\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Unable to end exclusive lock transaction: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Enable fullfsync for the platforms that use it\n+    ret = sqlite3_exec(m_db, \"PRAGMA fullfsync = true\", nullptr, nullptr, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to enable fullfsync: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Make the table for our key-value pairs\n+    // First check that the main table exists\n+    sqlite3_stmt* check_main_stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\", -1, &check_main_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to prepare statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    ret = sqlite3_step(check_main_stmt);\n+    if (sqlite3_finalize(check_main_stmt) != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to finalize statement checking table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+    bool table_exists;\n+    if (ret == SQLITE_DONE) {\n+        table_exists = false;\n+    } else if (ret == SQLITE_ROW) {\n+        table_exists = true;\n+    } else {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to execute statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+\n+    // Do the db setup things because the table doesn't exist only when we are creating a new wallet\n+    if (!table_exists) {\n+        ret = sqlite3_exec(m_db, \"CREATE TABLE main(key BLOB PRIMARY KEY NOT NULL, value BLOB NOT NULL)\", nullptr, nullptr, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        // Set the application id\n+        uint32_t app_id = ReadBE32(Params().MessageStart());\n+        std::string set_app_id = strprintf(\"PRAGMA application_id = %d\", static_cast<int32_t>(app_id));\n+        ret = sqlite3_exec(m_db, set_app_id.c_str(), nullptr, nullptr, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to set the application id: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        // Set the user version\n+        std::string set_user_ver = strprintf(\"PRAGMA user_version = %d\", WALLET_SCHEMA_VERSION);\n+        ret = sqlite3_exec(m_db, set_user_ver.c_str(), nullptr, nullptr, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to set the wallet schema version: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Rewrite(const char* skip)\n+{\n+    // Rewrite the database using the VACUUM command: https://sqlite.org/lang_vacuum.html\n+    int ret = sqlite3_exec(m_db, \"VACUUM\", nullptr, nullptr, nullptr);\n+    return ret == SQLITE_OK;\n+}\n+\n+bool SQLiteDatabase::Backup(const std::string& dest) const\n+{\n+    sqlite3* db_copy;\n+    int res = sqlite3_open(dest.c_str(), &db_copy);\n+    if (res != SQLITE_OK) {\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    sqlite3_backup* backup = sqlite3_backup_init(db_copy, \"main\", m_db, \"main\");\n+    if (!backup) {\n+        LogPrintf(\"%s: Unable to begin backup: %s\\n\", __func__, sqlite3_errmsg(m_db));\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    // Specifying -1 will copy all of the pages\n+    res = sqlite3_backup_step(backup, -1);\n+    if (res != SQLITE_DONE) {\n+        LogPrintf(\"%s: Unable to backup: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_backup_finish(backup);\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    res = sqlite3_backup_finish(backup);\n+    sqlite3_close(db_copy);\n+    return res == SQLITE_OK;\n+}\n+\n+void SQLiteDatabase::Close()\n+{\n+    int res = sqlite3_close(m_db);\n+    if (res != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to close database: %s\\n\", sqlite3_errstr(res)));\n+    }\n+    m_db = nullptr;\n+}\n+\n+std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(bool flush_on_close)\n+{\n+    // We ignore flush_on_close because we don't do manual flushing for SQLite\n+    return MakeUnique<SQLiteBatch>(*this);\n+}\n+\n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database)\n+    : m_database(database)\n+{\n+    // Make sure we have a db handle\n+    assert(m_database.m_db);\n+\n+    SetupSQLStatements();\n+}\n+\n+void SQLiteBatch::Close()\n+{\n+    // If m_db is in a transaction (i.e. not in autocommit mode), then abort the transaction in progress\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        if (TxnAbort()) {\n+            LogPrintf(\"SQLiteBatch: Batch closed unexpectedly without the transaction being explicitly committed or aborted\\n\");\n+        } else {\n+            LogPrintf(\"SQLiteBatch: Batch closed and failed to abort transaction\\n\");\n+        }\n+    }\n+\n+    // Free all of the prepared statements\n+    int ret = sqlite3_finalize(m_read_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize read statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    ret = sqlite3_finalize(m_insert_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize insert statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    ret = sqlite3_finalize(m_overwrite_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize overwrite statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    ret = sqlite3_finalize(m_delete_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize delete statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    ret = sqlite3_finalize(m_cursor_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize cursor statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n+    m_read_stmt = nullptr;\n+    m_insert_stmt = nullptr;\n+    m_overwrite_stmt = nullptr;\n+    m_delete_stmt = nullptr;\n+    m_cursor_stmt = nullptr;\n+}\n+\n+bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: Unable to bind statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    res = sqlite3_step(m_read_stmt);\n+    if (res != SQLITE_ROW) {\n+        if (res != SQLITE_DONE) {\n+            // SQLITE_DONE means \"not found\", don't log an error in that case.\n+            LogPrintf(\"%s: Unable to execute statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        }\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    // Leftmost column in result is index 0\n+    const char* data = reinterpret_cast<const char*>(sqlite3_column_blob(m_read_stmt, 0));\n+    int data_size = sqlite3_column_bytes(m_read_stmt, 0);\n+    value.write(data, data_size);\n+\n+    sqlite3_clear_bindings(m_read_stmt);\n+    sqlite3_reset(m_read_stmt);\n+    return true;\n+}\n+\n+bool SQLiteBatch::WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_insert_stmt && m_overwrite_stmt);\n+\n+    sqlite3_stmt* stmt;\n+    if (overwrite) {\n+        stmt = m_overwrite_stmt;\n+    } else {\n+        stmt = m_insert_stmt;\n+    }\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    // Insert index 1 is key, 2 is value\n+    int res = sqlite3_bind_blob(stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: Unable to bind key to statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n+        return false;\n+    }\n+    res = sqlite3_bind_blob(stmt, 2, value.data(), value.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: Unable to bind value to statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n+        return false;\n+    }\n+\n+    // Execute\n+    res = sqlite3_step(stmt);\n+    sqlite3_clear_bindings(stmt);\n+    sqlite3_reset(stmt);\n+    if (res != SQLITE_DONE) {\n+        LogPrintf(\"%s: Unable to execute statement: %s\\n\", __func__, sqlite3_errstr(res));\n+    }\n+    return res == SQLITE_DONE;\n+}\n+\n+bool SQLiteBatch::EraseKey(CDataStream&& key)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_delete_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_delete_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"%s: Unable to bind statement: %s\\n\", __func__, sqlite3_errstr(res));\n+        sqlite3_clear_bindings(m_delete_stmt);\n+        sqlite3_reset(m_delete_stmt);\n+        return false;\n+    }\n+\n+    // Execute\n+    res = sqlite3_step(m_delete_stmt);\n+    sqlite3_clear_bindings(m_delete_stmt);\n+    sqlite3_reset(m_delete_stmt);\n+    if (res != SQLITE_DONE) {\n+        LogPrintf(\"%s: Unable to execute statement: %s\\n\", __func__, sqlite3_errstr(res));\n+    }\n+    return res == SQLITE_DONE;\n+}\n+\n+bool SQLiteBatch::HasKey(CDataStream&& key)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    bool ret = false;\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res == SQLITE_OK) {\n+        res = sqlite3_step(m_read_stmt);\n+        if (res == SQLITE_ROW) {\n+            ret = true;\n+        }\n+    }\n+\n+    sqlite3_clear_bindings(m_read_stmt);\n+    sqlite3_reset(m_read_stmt);\n+    return ret;\n+}\n+\n+bool SQLiteBatch::StartCursor()\n+{\n+    assert(!m_cursor_init);\n+    if (!m_database.m_db) return false;\n+    m_cursor_init = true;\n+    return true;\n+}\n+\n+bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& complete)\n+{\n+    complete = false;\n+\n+    if (!m_cursor_init) return false;\n+\n+    int res = sqlite3_step(m_cursor_stmt);\n+    if (res == SQLITE_DONE) {\n+        complete = true;\n+        return true;\n+    }\n+    if (res != SQLITE_ROW) {\n+        LogPrintf(\"SQLiteBatch::ReadAtCursor: Unable to execute cursor step: %s\\n\", sqlite3_errstr(res));\n+        return false;\n+    }\n+\n+    // Leftmost column in result is index 0\n+    const char* key_data = reinterpret_cast<const char*>(sqlite3_column_blob(m_cursor_stmt, 0));\n+    int key_data_size = sqlite3_column_bytes(m_cursor_stmt, 0);\n+    key.write(key_data, key_data_size);\n+    const char* value_data = reinterpret_cast<const char*>(sqlite3_column_blob(m_cursor_stmt, 1));\n+    int value_data_size = sqlite3_column_bytes(m_cursor_stmt, 1);\n+    value.write(value_data, value_data_size);\n+    return true;\n+}\n+\n+void SQLiteBatch::CloseCursor()\n+{\n+    sqlite3_reset(m_cursor_stmt);\n+    m_cursor_init = false;\n+}\n+\n+bool SQLiteBatch::TxnBegin()\n+{\n+    if (!m_database.m_db || sqlite3_get_autocommit(m_database.m_db) == 0) return false;\n+    int res = sqlite3_exec(m_database.m_db, \"BEGIN TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Failed to begin the transaction\\n\");\n+    }\n+    return res == SQLITE_OK;\n+}\n+\n+bool SQLiteBatch::TxnCommit()\n+{\n+    if (!m_database.m_db || sqlite3_get_autocommit(m_database.m_db) != 0) return false;\n+    int res = sqlite3_exec(m_database.m_db, \"COMMIT TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Failed to commit the transaction\\n\");\n+    }\n+    return res == SQLITE_OK;\n+}\n+\n+bool SQLiteBatch::TxnAbort()\n+{\n+    if (!m_database.m_db || sqlite3_get_autocommit(m_database.m_db) != 0) return false;\n+    int res = sqlite3_exec(m_database.m_db, \"ROLLBACK TRANSACTION\", nullptr, nullptr, nullptr);\n+    if (res != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Failed to abort the transaction\\n\");\n+    }\n+    return res == SQLITE_OK;\n+}\n+\n+bool ExistsSQLiteDatabase(const fs::path& path)\n+{\n+    const fs::path file = path / DATABASE_FILENAME;\n+    return fs::symlink_status(file).type() == fs::regular_file && IsSQLiteFile(file);\n+}\n+\n+std::unique_ptr<SQLiteDatabase> MakeSQLiteDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error)\n+{\n+    const fs::path file = path / DATABASE_FILENAME;\n+    try {\n+        auto db = MakeUnique<SQLiteDatabase>(path, file);\n+        if (options.verify && !db->Verify(error)) {\n+            status = DatabaseStatus::FAILED_VERIFY;\n+            return nullptr;\n+        }\n+        return db;",
      "path": "src/wallet/sqlite.cpp",
      "position": 584,
      "original_position": 584,
      "commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "original_commit_id": "c4a29d0a90b821c443c10891d9326c534d15cf97",
      "in_reply_to_id": 518223118,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "#20324 ",
      "created_at": "2020-11-05T19:43:15Z",
      "updated_at": "2020-11-05T19:43:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r518320258",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/518320258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 584,
      "original_line": 584,
      "side": "RIGHT"
    }
  ]
}