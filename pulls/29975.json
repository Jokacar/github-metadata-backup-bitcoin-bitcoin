{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975",
    "id": 1843531702,
    "node_id": "PR_kwDOABII585t4g-2",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29975",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/29975.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/29975.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
    "number": 29975,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "blockstorage: Separate reindexing from saving new blocks",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`SaveBlockToDisk` / `FindBlockPos` are used for two purposes, depending on whether they are called during reindexing (`dbp` set,  `fKnown = true`) or in the \"normal\" case when adding new blocks (`dbp == nullptr`,  `fKnown = false`).\r\nThe actual tasks are quite different\r\n- In normal mode, preparations for saving a new block are made, which is then saved: find the correct position on disk (maybe skipping to a new blk file), check for available disk space, update the blockfile info db, save the block.\r\n- during reindex, most of this is not necessary (the block is already on disk after all), only the blockfile info needs to rebuilt because reindex wiped the leveldb it's saved in.\r\n\r\nUsing one function with many conditional statements for this leads to code that is hard to read / understand and bug-prone:\r\n- many code paths in `FindBlockPos` are conditional on `fKnown` or `!fKnown`\r\n- It's not really clear what actually needs to be done during reindex (we don't need to \"save a block to disk\" or \"find a block pos\" as the function names suggest)\r\n- logic that should be applied to only one of the two modes is sometimes applied to both (see first commit, or #27039)\r\n\r\n#24858 and #27039 were recent bugs directly related to the differences between reindexing and normal mode, and in both cases the simple fix took a long time to be reviewed and merged.\r\n\r\nThis PR proposes to clean this code up by splitting out the reindex logic into a separate function (`AddToBlockFileInfo`) which will be called directly from validation. As a result, `SaveBlockToDisk` and `FindBlockPos` only need to cover the non-reindex logic. ",
    "labels": [
      {
        "id": 219890555,
        "node_id": "MDU6TGFiZWwyMTk4OTA1NTU=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Block%20storage",
        "name": "Block storage",
        "color": "000000",
        "default": false
      }
    ],
    "created_at": "2024-04-26T21:30:16Z",
    "updated_at": "2024-04-29T11:50:56Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "0a3cf449a26726399eecb39859235110db15f9fa",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "mzumsande:202404_blockstorage_split_reindex",
      "ref": "202404_blockstorage_split_reindex",
      "sha": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 187673073,
        "node_id": "MDEwOlJlcG9zaXRvcnkxODc2NzMwNzM=",
        "name": "bitcoin",
        "full_name": "mzumsande/bitcoin",
        "owner": {
          "login": "mzumsande",
          "id": 48763452,
          "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
          "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/mzumsande",
          "html_url": "https://github.com/mzumsande",
          "followers_url": "https://api.github.com/users/mzumsande/followers",
          "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
          "organizations_url": "https://api.github.com/users/mzumsande/orgs",
          "repos_url": "https://api.github.com/users/mzumsande/repos",
          "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/mzumsande/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/mzumsande/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/mzumsande/bitcoin",
        "archive_url": "https://api.github.com/repos/mzumsande/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/mzumsande/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/mzumsande/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/mzumsande/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/mzumsande/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/mzumsande/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/mzumsande/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/mzumsande/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/mzumsande/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/mzumsande/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/mzumsande/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/mzumsande/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/mzumsande/bitcoin/events",
        "forks_url": "https://api.github.com/repos/mzumsande/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/mzumsande/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/mzumsande/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/mzumsande/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/mzumsande/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/mzumsande/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/mzumsande/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/mzumsande/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/mzumsande/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/mzumsande/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/mzumsande/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/mzumsande/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/mzumsande/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/mzumsande/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/mzumsande/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/mzumsande/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:mzumsande/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/mzumsande/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/mzumsande/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/mzumsande/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/mzumsande/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/mzumsande/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/mzumsande/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/mzumsande/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/mzumsande/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/mzumsande/bitcoin/hooks",
        "svn_url": "https://github.com/mzumsande/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 236595,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-04-26T21:42:28Z",
        "created_at": "2019-05-20T16:03:10Z",
        "updated_at": "2023-08-09T06:22:16Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "1ffbd96349820cae7f076ae3253d8a9d28155fd2",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35316,
        "stargazers_count": 76043,
        "watchers_count": 76043,
        "size": 255148,
        "default_branch": "master",
        "open_issues_count": 698,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-04-29T11:47:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-04-29T11:44:00Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 128,
    "deletions": 94,
    "changed_files": 5,
    "commits": 4,
    "review_comments": 8,
    "comments": 3
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ2YjBiYjZkZDBkMjZmM2UxMDM4NmQxYWZiYWZkOGQ1MmExMmIyYzU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6b0bb6dd0d26f3e10386d1afbafd8d52a12b2c5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d6b0bb6dd0d26f3e10386d1afbafd8d52a12b2c5",
      "tree": {
        "sha": "ba72eaadab1d1f7b9ed6a3955a89b882a1feeb80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba72eaadab1d1f7b9ed6a3955a89b882a1feeb80"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7973a670915632b75a6aa16f24f98b936865c48f",
          "sha": "7973a670915632b75a6aa16f24f98b936865c48f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7973a670915632b75a6aa16f24f98b936865c48f"
        }
      ],
      "message": "blockstorage: Add Assume for fKnown / snapshot chainstate\n\nfKnown is true during reindex (and only then), which deletes\nany existing snapshot chainstate. As a result, this function can never\nbe called wth fKnown set and a snapshot chainstate.\nAdd an Assume for this, and make the code initializing a blockfile cursor\nfor the snapshot conditional on !fKnown.\n\nThis is a preparation for splitting the reindex logic out of\nFindBlockPos in the following commits.",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-04-26T21:03:27Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-03-20T19:08:40Z"
      },
      "sha": "d6b0bb6dd0d26f3e10386d1afbafd8d52a12b2c5"
    },
    {
      "event": "commented",
      "id": 2080140998,
      "node_id": "IC_kwDOABII5857_G7G",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2080140998",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-26T21:30:19Z",
      "updated_at": "2024-04-29T11:50:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/29975).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [TheCharlatan](https://github.com/bitcoin/bitcoin/pull/29975#issuecomment-2080168836), [furszy](https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2026654546), [BrandonOdiwuor](https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2028283852) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29700](https://github.com/bitcoin/bitcoin/pull/29700) (kernel, refactor: return error status on all fatal errors by ryanofsky)\n* [#29641](https://github.com/bitcoin/bitcoin/pull/29641) (scripted-diff: Use LogInfo/LogDebug over LogPrintf/LogPrint by maflcko)\n* [#29231](https://github.com/bitcoin/bitcoin/pull/29231) (logging: Update to new logging API by ajtowns)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#issuecomment-2080140998",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975"
    },
    {
      "event": "labeled",
      "id": 12628633537,
      "node_id": "LE_lADOABII586HGINjzwAAAALwuafB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12628633537",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-26T21:30:21Z",
      "label": {
        "name": "Block storage",
        "color": "000000"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDIwZWZiNDExYmQ1MWZmM2JmY2I3ZjRhMmNjN2JkMGQ3MDRhZDdjMjY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/20efb411bd51ff3bfcb7f4a2cc7bd0d704ad7c26",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/20efb411bd51ff3bfcb7f4a2cc7bd0d704ad7c26",
      "tree": {
        "sha": "68ca569fae90ac26189f83416281157d0dacaa05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68ca569fae90ac26189f83416281157d0dacaa05"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6b0bb6dd0d26f3e10386d1afbafd8d52a12b2c5",
          "sha": "d6b0bb6dd0d26f3e10386d1afbafd8d52a12b2c5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d6b0bb6dd0d26f3e10386d1afbafd8d52a12b2c5"
        }
      ],
      "message": "blockstorage: split up FindBlockPos function\n\nFindBlockPos does different things depending on whether the block is known\nor not, as shown by the fact that much of the existing code is conditional on fKnown set or not.\n\nIf the block position is known (during reindex) the function only updates the block info\nstatistics. It doesn't actually find a block position in this case.\n\nThis commit removes fKnown and splits up these two code paths by introducing a separate function\nfor the reindex case when the block position is known.\nIt doesn't change behavior.",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-04-26T21:41:23Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-03-20T19:05:08Z"
      },
      "sha": "20efb411bd51ff3bfcb7f4a2cc7bd0d704ad7c26"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVkMWQ1MGUxYTYzNWYyNThhNDE0YjNjZTczM2M5OGVhN2FhYzQxZTA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed1d50e1a635f258a414b3ce733c98ea7aac41e0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ed1d50e1a635f258a414b3ce733c98ea7aac41e0",
      "tree": {
        "sha": "d7ca028e99229d9d9c6b42b1731d359b93b30a5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7ca028e99229d9d9c6b42b1731d359b93b30a5c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/20efb411bd51ff3bfcb7f4a2cc7bd0d704ad7c26",
          "sha": "20efb411bd51ff3bfcb7f4a2cc7bd0d704ad7c26",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/20efb411bd51ff3bfcb7f4a2cc7bd0d704ad7c26"
        }
      ],
      "message": "validation, blockstorage: Separate code paths for reindex and saving new blocks\n\nBy calling SaveBlockToDisk only when we actually want to save a new\nblock to disk. In the reindex case, we now call AddToBlockFileInfo\ndirectly from validation.\n\nThis commit doesn't change behavior.",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-04-26T21:42:06Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-04-26T19:06:55Z"
      },
      "sha": "ed1d50e1a635f258a414b3ce733c98ea7aac41e0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDM5YWQ4ZDgyNWUzNWI3MzI2YWQwZWEyNWMzN2QzZmUxMmRlZDY0Yzk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "tree": {
        "sha": "ee8b0c29a3bc5bccefc49b3498de0bc4ef7d9cb1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee8b0c29a3bc5bccefc49b3498de0bc4ef7d9cb1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed1d50e1a635f258a414b3ce733c98ea7aac41e0",
          "sha": "ed1d50e1a635f258a414b3ce733c98ea7aac41e0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ed1d50e1a635f258a414b3ce733c98ea7aac41e0"
        }
      ],
      "message": "doc: Improve documentation of FindBlockPos and SaveBlockToDisk",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-04-26T21:42:08Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-04-26T20:21:06Z"
      },
      "sha": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12628712674,
      "node_id": "HRFPE_lADOABII586HGINjzwAAAALwutzi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12628712674",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-26T21:42:29Z"
    },
    {
      "event": "commented",
      "id": 2080156364,
      "node_id": "IC_kwDOABII5857_KrM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2080156364",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-26T21:42:34Z",
      "updated_at": "2024-04-26T21:42:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/24317664317</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#issuecomment-2080156364",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975"
    },
    {
      "event": "labeled",
      "id": 12628713229,
      "node_id": "LE_lADOABII586HGINjzwAAAALwut8N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12628713229",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-26T21:42:34Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2080168836,
      "node_id": "IC_kwDOABII5857_NuE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2080168836",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-26T21:57:07Z",
      "updated_at": "2024-04-26T21:57:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#issuecomment-2080168836",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-27T02:06:41Z",
      "updated_at": "2024-04-27T02:06:41Z",
      "source": {
        "issue": {
          "id": 2201362078,
          "node_id": "PR_kwDOABII585qbY-z",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29700",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29700/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29700/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29700/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29700",
          "number": 29700,
          "state": "open",
          "state_reason": null,
          "title": "kernel, refactor: return error status on all fatal errors",
          "body": "Return util::Result objects from all functions that can trigger fatal errors.\r\n\r\nThere are many validation functions that handle failures by calling `AbortNode` and triggering shutdowns, without returning error information to their callers. This makes error handling in libbitcoinkernel application code difficult, because the only way to handle these errors is to register for [notification callbacks](https://github.com/bitcoin/bitcoin/blob/master/src/kernel/notifications_interface.h). Improve this by making all functions that trigger fatal errors return util::Result objects with the error information.\r\n\r\nThis PR is a pure refactoring that returns extra result information from functions without changing their behavior. It's a possible alternative to and subset of #29642, which adds similar return information but also makes behavior changes and exposes a FatalError type.\r\n\r\n---\r\n\r\n**This is based on #29906 + #25665.** The non-base commits are:\r\n\r\n- [`4cda7caf043b` refactor, kernel: Add FlushStatus / FlushResult types](https://github.com/bitcoin/bitcoin/pull/29700/commits/4cda7caf043bbcaceb6b92524041f397e8027544)\r\n- [`1e3519b8411c` refactor: Add InfoType field to util::Result](https://github.com/bitcoin/bitcoin/pull/29700/commits/1e3519b8411c9b188bdff6a5693b5fe258fd028b)\r\n- [`e7605d3a26f6` refactor, blockstorage: Return FlushResult from flush methods](https://github.com/bitcoin/bitcoin/pull/29700/commits/e7605d3a26f6d782ac67ddf1c0363acc28f10175)\r\n- [`85392fe736ab` refactor, blockstorage: Return fatal errors from block writes](https://github.com/bitcoin/bitcoin/pull/29700/commits/85392fe736ab7b69c8f3a6f23c280dd3b7a28fe8)\r\n- [`748ae7038124` refactor, blockstorage: Return fatal error from LoadBlockIndex](https://github.com/bitcoin/bitcoin/pull/29700/commits/748ae7038124bd005f4018abf100e77bb5f483da)\r\n- [`e0f637e02d86` refactor, validation: Return fatal errors from FlushStateToDisk](https://github.com/bitcoin/bitcoin/pull/29700/commits/e0f637e02d8636b7910d12403f8a2b3bf419bc96)\r\n- [`8ffc919783ea` refactor, validation: Return fatal errors from mempool accept functions](https://github.com/bitcoin/bitcoin/pull/29700/commits/8ffc919783eaf5959877998e39cbe111b51fda0e)\r\n- [`4d0aa437f89b` refactor, validation: Return fatal errors from assumeutxo snapshot functions](https://github.com/bitcoin/bitcoin/pull/29700/commits/4d0aa437f89b2c2cfbe7b97a4d142e5702fa5251)\r\n- [`33d3dbeb8b1f` refactor, validation: Return fatal errors from block connect functions](https://github.com/bitcoin/bitcoin/pull/29700/commits/33d3dbeb8b1fc755d9ea07be3aeb55676c2bc6eb)\r\n- [`b0d98b4789a4` refactor, validation: Return fatal errors from activate best chain functions](https://github.com/bitcoin/bitcoin/pull/29700/commits/b0d98b4789a459b4a89a1431c95787fd96935af8)\r\n- [`5d891ed72246` refactor, validation: Return fatal errors from new block functions](https://github.com/bitcoin/bitcoin/pull/29700/commits/5d891ed72246305d3f1a3f1c81f99e45c53f7815)\r\n- [`fd257d944c59` refactor, blockstorage: Return fatal error from ImportBlocks](https://github.com/bitcoin/bitcoin/pull/29700/commits/fd257d944c59abfed05bc81664033d39ab4ff258)\r\n- [`4d2c9de24916` refactor, validation: Return more errors from VerifyDB](https://github.com/bitcoin/bitcoin/pull/29700/commits/4d2c9de24916f8d69514ea7c7251136e2762fa5c)",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29700",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29700",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29700.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29700.patch"
          },
          "created_at": "2024-03-21T23:11:56Z",
          "updated_at": "2024-04-29T06:15:27Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-27T02:31:58Z",
      "updated_at": "2024-04-27T02:31:58Z",
      "source": {
        "issue": {
          "id": 2182604130,
          "node_id": "PR_kwDOABII585pbmSj",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29641",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29641/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29641/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29641/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29641",
          "number": 29641,
          "state": "open",
          "state_reason": null,
          "title": "scripted-diff: Use LogInfo/LogDebug over LogPrintf/LogPrint",
          "body": "`LogPrintf/LogPrint` are problematic, because:\r\n\r\n* Their name is non-descriptive of what the function does (info logging or debug logging).\r\n* They are deprecated aliases, where code is using either the deprecated or non-deprecated alias, which is inconsistent and confusing.\r\n\r\nFix all issues by replacing the usage.\r\n\r\nWhile the diff is large and may cause merge conflicts or backport conflicts, I don't see the deprecated aliases being kept forever, so this will have to be done at some point. All conflicts should be trivial to solve, in any case.",
          "user": {
            "login": "maflcko",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maflcko",
            "html_url": "https://github.com/maflcko",
            "followers_url": "https://api.github.com/users/maflcko/followers",
            "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
            "organizations_url": "https://api.github.com/users/maflcko/orgs",
            "repos_url": "https://api.github.com/users/maflcko/repos",
            "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/maflcko/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29641",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29641",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29641.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29641.patch"
          },
          "created_at": "2024-03-12T20:21:40Z",
          "updated_at": "2024-04-28T16:35:26Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "unlabeled",
      "id": 12629852704,
      "node_id": "UNLE_lADOABII586HGINjzwAAAALwzEIg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12629852704",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-27T02:46:17Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2026623423,
      "node_id": "PRR_kwDOABII5854y9G_",
      "url": null,
      "actor": null,
      "commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Recreated the change to understand it better, commented on what I've noticed.",
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2026623423",
      "submitted_at": "2024-04-27T12:59:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
    },
    {
      "event": "reviewed",
      "id": 2026654546,
      "node_id": "PRR_kwDOABII5854zEtS",
      "url": null,
      "actor": null,
      "commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2026654546",
      "submitted_at": "2024-04-27T14:04:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-28T19:13:30Z",
      "updated_at": "2024-04-28T19:13:30Z",
      "source": {
        "issue": {
          "id": 2077041540,
          "node_id": "PR_kwDOABII585j1CBc",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29231",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29231/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29231/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29231/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29231",
          "number": 29231,
          "state": "open",
          "state_reason": null,
          "title": "logging: Update to new logging API",
          "body": "Updates various logging calls to the new API from #28318. All commits are scripted diffs, so should be easy to update if needed, and also easy to reuse the scripts to update other code if needed when rebasing it after this is merged. Changes all uses of `LogPrintLevel()` where the level is hardcoded, and changes all `LogPrintf` and `LogPrint` uses in init.cpp.",
          "user": {
            "login": "ajtowns",
            "id": 127186,
            "node_id": "MDQ6VXNlcjEyNzE4Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ajtowns",
            "html_url": "https://github.com/ajtowns",
            "followers_url": "https://api.github.com/users/ajtowns/followers",
            "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
            "organizations_url": "https://api.github.com/users/ajtowns/orgs",
            "repos_url": "https://api.github.com/users/ajtowns/repos",
            "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ajtowns/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 11,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29231",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29231",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29231.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29231.patch"
          },
          "created_at": "2024-01-11T16:01:53Z",
          "updated_at": "2024-04-28T19:13:30Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 2028283852,
      "node_id": "PRR_kwDOABII58545SfM",
      "url": null,
      "actor": null,
      "commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n",
      "user": {
        "login": "BrandonOdiwuor",
        "id": 15610188,
        "node_id": "MDQ6VXNlcjE1NjEwMTg4",
        "avatar_url": "https://avatars.githubusercontent.com/u/15610188?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BrandonOdiwuor",
        "html_url": "https://github.com/BrandonOdiwuor",
        "followers_url": "https://api.github.com/users/BrandonOdiwuor/followers",
        "following_url": "https://api.github.com/users/BrandonOdiwuor/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BrandonOdiwuor/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BrandonOdiwuor/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BrandonOdiwuor/subscriptions",
        "organizations_url": "https://api.github.com/users/BrandonOdiwuor/orgs",
        "repos_url": "https://api.github.com/users/BrandonOdiwuor/repos",
        "events_url": "https://api.github.com/users/BrandonOdiwuor/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BrandonOdiwuor/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2028283852",
      "submitted_at": "2024-04-29T11:50:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581784723",
      "pull_request_review_id": 2026623423,
      "id": 1581784723,
      "node_id": "PRRC_kwDOABII585eSB6T",
      "diff_hunk": "@@ -189,7 +189,7 @@ BOOST_AUTO_TEST_CASE(blockmanager_flush_block_file)\n     // to block 2 location.\n     CBlockFileInfo* block_data = blockman.GetBlockFileInfo(0);\n     BOOST_CHECK_EQUAL(block_data->nBlocks, 2);\n-    BOOST_CHECK(blockman.SaveBlockToDisk(block3, /*nHeight=*/3, /*dbp=*/&pos2) == pos2);\n+    blockman.AddToBlockFileInfo(block3, /*nHeight=*/3, /*pos=*/pos2);",
      "path": "src/test/blockmanager_tests.cpp",
      "position": 43,
      "original_position": 43,
      "commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "seems to me the related comments needs to be updated in this file (e.g line 184 and 199)",
      "created_at": "2024-04-27T10:00:24Z",
      "updated_at": "2024-04-27T12:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1581784723",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581784723"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 192,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581822649",
      "pull_request_review_id": 2026623423,
      "id": 1581822649,
      "node_id": "PRRC_kwDOABII585eSLK5",
      "diff_hunk": "@@ -863,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    unsigned int nAddSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);",
      "path": "src/node/blockstorage.cpp",
      "position": 154,
      "original_position": 154,
      "commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: is the naming style deliberate here? When is it camel and when snake?",
      "created_at": "2024-04-27T12:28:32Z",
      "updated_at": "2024-04-27T12:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1581822649",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581822649"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": 945,
      "original_start_line": 945,
      "start_side": "RIGHT",
      "line": 946,
      "original_line": 946,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581824896",
      "pull_request_review_id": 2026623423,
      "id": 1581824896,
      "node_id": "PRRC_kwDOABII585eSLuA",
      "diff_hunk": "@@ -863,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;",
      "path": "src/node/blockstorage.cpp",
      "position": 14,
      "original_position": 14,
      "commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Does this reassignment still make sense?",
      "created_at": "2024-04-27T12:41:59Z",
      "updated_at": "2024-04-27T12:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1581824896",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581824896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 866,
      "original_line": 866,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581825021",
      "pull_request_review_id": 2026623423,
      "id": 1581825021,
      "node_id": "PRRC_kwDOABII585eSLv9",
      "diff_hunk": "@@ -863,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    unsigned int nAddSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\n+    Assume(chain_type == BlockfileType::NORMAL);\n+\n+    const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n+    const int nFile = pos.nFile;\n+\n+    if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+        m_blockfile_info.resize(nFile + 1);\n+    }\n+    if (nFile != last_blockfile) {\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};",
      "path": "src/node/blockstorage.cpp",
      "position": 165,
      "original_position": 165,
      "commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "should we keep the original comment here?",
      "created_at": "2024-04-27T12:42:44Z",
      "updated_at": "2024-04-27T12:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1581825021",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581825021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 957,
      "original_line": 957,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581825604",
      "pull_request_review_id": 2026623423,
      "id": 1581825604,
      "node_id": "PRRC_kwDOABII585eSL5E",
      "diff_hunk": "@@ -155,7 +155,13 @@ class BlockManager\n     /** Return false if undo file flushing fails. */\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n-    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown);\n+    /**\n+     * Helper function performing various preparations before a block can be saved to disk:\n+     * Locates the correct position for the block to be saved, which may be in the current or a new\n+     * block file depending on nAddSize. May flush the previous blockfile to disk if full, updates\n+     * blockfile info, and checks if there is enough disk space to save the block.\n+     */\n+    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);",
      "path": "src/node/blockstorage.h",
      "position": 11,
      "original_position": 11,
      "commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Does the comment on line 215 need any update after the change?",
      "created_at": "2024-04-27T12:46:50Z",
      "updated_at": "2024-04-27T12:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1581825604",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581825604"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 164,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581825870",
      "pull_request_review_id": 2026623423,
      "id": 1581825870,
      "node_id": "PRRC_kwDOABII585eSL9O",
      "diff_hunk": "@@ -4342,10 +4342,16 @@ bool ChainstateManager::AcceptBlock(const std::shared_ptr<const CBlock>& pblock,\n     // Write block to history file\n     if (fNewBlock) *fNewBlock = true;\n     try {\n-        FlatFilePos blockPos{m_blockman.SaveBlockToDisk(block, pindex->nHeight, dbp)};\n-        if (blockPos.IsNull()) {\n-            state.Error(strprintf(\"%s: Failed to find position to write new block to disk\", __func__));\n-            return false;\n+        FlatFilePos blockPos{};\n+        if (dbp) {\n+            blockPos = *dbp;\n+            m_blockman.AddToBlockFileInfo(block, pindex->nHeight, *dbp);",
      "path": "src/validation.cpp",
      "position": 11,
      "original_position": 11,
      "commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "we might as well use `blockPos` here\r\n```C++\r\nm_blockman.AddToBlockFileInfo(block, pindex->nHeight, blockPos);\r\n```",
      "created_at": "2024-04-27T12:48:47Z",
      "updated_at": "2024-04-27T12:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1581825870",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581825870"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4348,
      "original_line": 4348,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581826711",
      "pull_request_review_id": 2026623423,
      "id": 1581826711,
      "node_id": "PRRC_kwDOABII585eSMKX",
      "diff_hunk": "@@ -865,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    unsigned int nAddSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\n+    Assume(chain_type == BlockfileType::NORMAL);\n+\n+    const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;",
      "path": "src/node/blockstorage.cpp",
      "position": 158,
      "original_position": 167,
      "commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "original_commit_id": "20efb411bd51ff3bfcb7f4a2cc7bd0d704ad7c26",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "we could move this closer to the usage",
      "created_at": "2024-04-27T12:55:01Z",
      "updated_at": "2024-04-27T12:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1581826711",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581826711"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 950,
      "original_line": 950,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581827125",
      "pull_request_review_id": 2026623423,
      "id": 1581827125,
      "node_id": "PRRC_kwDOABII585eSMQ1",
      "diff_hunk": "@@ -865,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    unsigned int nAddSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\n+    Assume(chain_type == BlockfileType::NORMAL);",
      "path": "src/node/blockstorage.cpp",
      "position": 156,
      "original_position": 165,
      "commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "original_commit_id": "20efb411bd51ff3bfcb7f4a2cc7bd0d704ad7c26",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is the reason why\r\n```C++\r\nif (!m_blockfile_cursors[chain_type]) {\r\n    // If a snapshot is loaded during runtime, we may not have initialized this cursor yet.\r\n    assert(chain_type == BlockfileType::ASSUMED);\r\n    const auto new_cursor = BlockfileCursor{this->MaxBlockfileNum() + 1};\r\n    m_blockfile_cursors[chain_type] = new_cursor;\r\n    LogPrint(BCLog::BLOCKSTORAGE, \"[%s] initializing blockfile cursor to %s\\n\", chain_type, new_cursor);\r\n}\r\n```\r\n is not applicable here, right?\r\n Would it make sense to also assume `m_blockfile_cursors[chain_type]`?",
      "created_at": "2024-04-27T12:57:38Z",
      "updated_at": "2024-04-27T12:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1581827125",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581827125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 948,
      "original_line": 948,
      "side": "RIGHT"
    }
  ]
}